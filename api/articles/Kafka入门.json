{"title":"Kafka入门","uid":"99aa4407a60ebb936774d228acd49096","slug":"Kafka入门","date":"2022-09-30T09:39:05.000Z","updated":"2022-09-30T09:42:53.809Z","comments":true,"path":"api/articles/Kafka入门.json","keywords":null,"cover":[],"content":"<h2 id=\"1-环境搭建\"><a href=\"#1-环境搭建\" class=\"headerlink\" title=\"1. 环境搭建\"></a>1. 环境搭建</h2><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ubuntu1</td>\n<td align=\"center\">192.168.150.100</td>\n</tr>\n<tr>\n<td align=\"center\">ubuntu2</td>\n<td align=\"center\">192.168.150.101</td>\n</tr>\n<tr>\n<td align=\"center\">ubuntu3</td>\n<td align=\"center\">192.168.150.102</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意，以下均为Kraft方式搭建，官方不建议生产环境这么做 截止2022.8.17 </p></blockquote>\n<h3 id=\"1-1-三节点原生集群搭建-Kraft\"><a href=\"#1-1-三节点原生集群搭建-Kraft\" class=\"headerlink\" title=\"1.1 三节点原生集群搭建(Kraft)\"></a>1.1 三节点原生集群搭建(Kraft)</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ubuntu 22.04 TLS  直接一键安装jdk11</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> default-jdk\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">192.168</span>.150.100 ubuntu1 <span class=\"token operator\">>></span> /etc/hosts\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">192.168</span>.150.101 ubuntu2 <span class=\"token operator\">>></span> /etc/hosts\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">192.168</span>.150.102 ubuntu3 <span class=\"token operator\">>></span> /etc/hosts\n<span class=\"token builtin class-name\">source</span> /etc/hosts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1.官网下载安装包，解压至 /opt/kafka</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span>  \n<span class=\"token comment\">#2.进入其config目录，修改 server.properties 文件</span>\n<span class=\"token function\">vim</span> /opt/kafka/kafka_2.12-3.2.1/config/server.properties\n<span class=\"token assign-left variable\">node.id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>/2/3   <span class=\"token comment\"># 三台kafka一定要不同</span>\n<span class=\"token assign-left variable\">advertised.listeners</span><span class=\"token operator\">=</span>PLAINTEXT://ubuntu2:9092  <span class=\"token comment\"># ubuntu2是当前kafka主机名</span>\n<span class=\"token assign-left variable\">log.dirs</span><span class=\"token operator\">=</span>/opt/kafka/kafka_2.12-3.2.1/data/kraft-combined-logs   <span class=\"token comment\"># 自定义数据目录</span>\n<span class=\"token assign-left variable\">controller.quorum.voters</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>@ubuntu1:9093,2@ubuntu2:9093,3@ubuntu3:9093   <span class=\"token comment\"># 彼此连接</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KAFKA_HOME</span><span class=\"token operator\">=</span>/opt/kafka/kafka_2.12-3.2.1 <span class=\"token operator\">>></span> /etc/profile \n<span class=\"token builtin class-name\">echo</span> <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$KAFKA_HOME</span>/bin <span class=\"token operator\">>></span> /etc/profile\n<span class=\"token builtin class-name\">source</span> /etc/profile\n\n<span class=\"token comment\"># 生成集群id</span>\nkafka-storage.sh  random-uuid\n<span class=\"token comment\"># 集群初始化，三台节点都要执行</span>\nkafka-storage.sh <span class=\"token function\">format</span> <span class=\"token parameter variable\">-t</span> _852RDWbTAeZuD9ABwgteg <span class=\"token parameter variable\">-c</span> /opt/kafka/kafka_2.12-3.2.1/config/kraft/server.properties   \n<span class=\"token comment\"># 启动</span>\nkafka-server-start.sh <span class=\"token parameter variable\">-daemon</span> /opt/kafka/kafka_2.12-3.2.1/config/kraft/server.properties\nkafka-server-stop.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 测试</span>\n<span class=\"token comment\"># 创建first主题并分配3个分区和3个副本</span>\nkafka-topics.sh --bootstrap-server <span class=\"token number\">192.168</span>.150.100:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> second <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">3</span>\n<span class=\"token comment\"># 查看主题</span>\nkafka-topics.sh --bootstrap-server <span class=\"token number\">192.168</span>.150.101:9092 <span class=\"token parameter variable\">--list</span>\n<span class=\"token comment\"># 生产数据 1号服务器执行</span>\nkafka-console-producer.sh --bootstrap-server ubuntu1:9092 <span class=\"token parameter variable\">--topic</span> first\n<span class=\"token comment\"># 消费数据 2号服务器执行</span>\nkafka-console-consumer.sh --bootstrap-server ubuntu2:9092 <span class=\"token parameter variable\">--topic</span> first <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 一些便利性脚本</span>\n<span class=\"token comment\"># 首先让服务器之间免密登陆</span>\nssh-keygen <span class=\"token parameter variable\">-t</span> rsa  <span class=\"token comment\"># 控制节点执行</span>\nssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub root@ubuntu1   <span class=\"token comment\"># 拷贝公钥->1 自己也要拷贝</span>\nssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub root@ubuntu2   <span class=\"token comment\"># 拷贝公钥->2</span>\nssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub root@ubuntu3   <span class=\"token comment\"># 拷贝公钥->3</span>\n<span class=\"token comment\"># 如果想要删除，干掉 /root/.ssh/authorized_keys 即可</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> ubuntu1 ubuntu2 ubuntu3\n            <span class=\"token keyword\">do</span>\n                <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" --------启动 <span class=\"token variable\">$i</span> Kafka2-------\"</span>\n                <span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span> <span class=\"token string\">\"kafka-server-start.sh -daemon /opt/kafka/kafka_2.12-3.2.1/config/kraft/server.properties\"</span>\n            <span class=\"token keyword\">done</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> ubuntu1 ubuntu2 ubuntu3\n            <span class=\"token keyword\">do</span>\n                <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" --------停止 <span class=\"token variable\">$i</span> Kafka3-------\"</span>\n                <span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span> <span class=\"token string\">\"/opt/kafka/kafka_2.12-3.2.1/bin/kafka-server-stop.sh\"</span>\n            <span class=\"token keyword\">done</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"1-2-三节点Docker方式集群搭建（Kraft）\"><a href=\"#1-2-三节点Docker方式集群搭建（Kraft）\" class=\"headerlink\" title=\"1.2 三节点Docker方式集群搭建（Kraft）\"></a>1.2 三节点Docker方式集群搭建（Kraft）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span>  <span class=\"token function\">install</span> <span class=\"token function\">docker-compose</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 自己家网络有点问题，用服务器上传到了腾讯云，有需要的可以自己拉取</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span>EOF<span class=\"token operator\">></span> /etc/docker/daemon.json\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token string\">\"registry-mirrors\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token string\">\"https://mirror.ccs.tencentyun.com\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sudo</span> systemctl restart <span class=\"token function\">docker</span>\n<span class=\"token function\">docker</span> pull myteam-p-docker.pkg.coding.net/mall-project/public/kafka:latest  <span class=\"token comment\"># bitnami/kafka:3.2.1</span>\n<span class=\"token function\">docker</span> tag  myteam-p-docker.pkg.coding.net/mall-project/public/kafka:latest   bitnami/kafka:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 三台服务器都要执行</span>\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\n     <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bitnami/kafka:latest'</span>\n     <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> root\n     <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n       <span class=\"token punctuation\">-</span> <span class=\"token string\">'9092:9092'</span>\n       <span class=\"token punctuation\">-</span> <span class=\"token string\">'9093:9093'</span>\n     <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n       <span class=\"token punctuation\">-</span> KAFKA_ENABLE_KRAFT=yes\n       <span class=\"token punctuation\">-</span> KAFKA_CFG_PROCESS_ROLES=broker<span class=\"token punctuation\">,</span>controller\n       <span class=\"token punctuation\">-</span> KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\n       <span class=\"token punctuation\">-</span> KAFKA_CFG_LISTENERS=PLAINTEXT<span class=\"token punctuation\">:</span>//<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>CONTROLLER<span class=\"token punctuation\">:</span>//<span class=\"token punctuation\">:</span><span class=\"token number\">9093</span>\n       <span class=\"token punctuation\">-</span> KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER<span class=\"token punctuation\">:</span>PLAINTEXT<span class=\"token punctuation\">,</span>PLAINTEXT<span class=\"token punctuation\">:</span>PLAINTEXT\n       <span class=\"token punctuation\">-</span> KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT<span class=\"token punctuation\">:</span>//192.168.150.100<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span> <span class=\"token comment\"># 哪台机器执行，改成对应的IP</span>\n       <span class=\"token punctuation\">-</span> KAFKA_BROKER_ID=1   <span class=\"token comment\"># 每台kafka这里都需要改一下，不同即可</span>\n       <span class=\"token punctuation\">-</span> KAFKA_KRAFT_CLUSTER_ID=LelM2dIFQkiUFvXCEcqRWA\n       <span class=\"token punctuation\">-</span> KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@192.168.150.100<span class=\"token punctuation\">:</span><span class=\"token number\">9093</span><span class=\"token punctuation\">,</span>2@192.168.150.101<span class=\"token punctuation\">:</span><span class=\"token number\">9093</span><span class=\"token punctuation\">,</span>3@192.168.150.102<span class=\"token punctuation\">:</span><span class=\"token number\">9093</span>\n       <span class=\"token punctuation\">-</span> ALLOW_PLAINTEXT_LISTENER=yes   <span class=\"token comment\"># 写IP</span>\n     <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n       <span class=\"token punctuation\">-</span> /opt/docker<span class=\"token punctuation\">-</span>kafka/kraft<span class=\"token punctuation\">:</span>/bitnami/kafka<span class=\"token punctuation\">:</span>rw<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 三台服务器分别执行上面yaml，注意内容</span>\n<span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 【测试】注意：由于我已经原生搭建过kafka集群，所以这一步我可以直接在容器外使用命令行！容器内互通的</span>\n<span class=\"token comment\"># 创建first主题并分配3个分区和3个副本</span>\nkafka-topics.sh --bootstrap-server <span class=\"token number\">192.168</span>.150.100:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> second <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">3</span>\n<span class=\"token comment\"># 查看主题</span>\nkafka-topics.sh --bootstrap-server <span class=\"token number\">192.168</span>.150.101:9092 <span class=\"token parameter variable\">--list</span>\n<span class=\"token comment\"># 生产数据 1号服务器执行</span>\nkafka-console-producer.sh --bootstrap-server ubuntu1:9092 <span class=\"token parameter variable\">--topic</span> first\n<span class=\"token comment\"># 消费数据 2号服务器执行</span>\nkafka-console-consumer.sh --bootstrap-server ubuntu2:9092 <span class=\"token parameter variable\">--topic</span> first <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-3-Kafka-UI\"><a href=\"#1-3-Kafka-UI\" class=\"headerlink\" title=\"1.3 Kafka-UI\"></a>1.3 Kafka-UI</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>github：<a href=\"https://github.com/provectus/kafka-ui\">https://github.com/provectus/kafka-ui</a></p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># kafka-ui  </span>\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:8080 <span class=\"token punctuation\">\\</span>\n\t<span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_CLUSTERS_0_NAME</span><span class=\"token operator\">=</span>local <span class=\"token punctuation\">\\</span>\n\t<span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.150.100:9092,192.168.150.101:9092,192.168.150.102:9092 <span class=\"token punctuation\">\\</span>\n\t<span class=\"token parameter variable\">-d</span> myteam-p-docker.pkg.coding.net/mall-project/public/kafka-ui:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-核心概念\"><a href=\"#2-核心概念\" class=\"headerlink\" title=\"2. 核心概念\"></a>2. 核心概念</h2><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816103752570.png\" alt=\"image-20220816103752570\"></p>\n<ol>\n<li><p><strong>Producer</strong>：消息生产者，就是向 Kafka broker 发消息的客户端。 </p>\n</li>\n<li><p><strong>Consumer</strong>：消息消费者，向 Kafka broker 取消息的客户端。 </p>\n</li>\n<li><p><strong>Consumer Group（CG）</strong>：消费者组，由多个 consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。 </p>\n</li>\n<li><p><strong>Broker</strong>：一台 Kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个broker 可以容纳多个 topic。 </p>\n</li>\n<li><p><strong>Topic</strong>：可以理解为一个队列，生产者和消费者面向的都是一个 topic。 </p>\n</li>\n<li><p><strong>Partition</strong>：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。  <strong>Topic与Partition是一对多的关系</strong></p>\n</li>\n<li><p><strong>Replica</strong>：副本。一个 topic 的每个分区都有若干个副本，一个 Leader和若干个 Follower</p>\n</li>\n<li><p><strong>Leader</strong>：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 Leader。 </p>\n</li>\n<li><p><strong>Follower</strong>：每个分区多个副本中的“从”，实时从 Leader 中同步数据，保持和Leader 数据的同步。Leader 发生故障时，某个 Follower 会成为新的 Leader。</p>\n</li>\n</ol>\n<h3 id=\"2-1-基础命令\"><a href=\"#2-1-基础命令\" class=\"headerlink\" title=\"2.1 基础命令\"></a>2.1 基础命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">–bootstrap-server &lt;String: server toconnect to&gt;</td>\n<td align=\"center\">连接的 Kafka Broker 主机名称和端口号</td>\n</tr>\n<tr>\n<td align=\"center\">–topic &lt;String: topic&gt;</td>\n<td align=\"center\">操作的 topic 名称</td>\n</tr>\n<tr>\n<td align=\"center\">–create</td>\n<td align=\"center\">创建主题</td>\n</tr>\n<tr>\n<td align=\"center\">–delete</td>\n<td align=\"center\">删除主题</td>\n</tr>\n<tr>\n<td align=\"center\">–alter</td>\n<td align=\"center\">修改主题</td>\n</tr>\n<tr>\n<td align=\"center\">–list</td>\n<td align=\"center\">查看所有主题</td>\n</tr>\n<tr>\n<td align=\"center\">–describe</td>\n<td align=\"center\">查看主题详细描述</td>\n</tr>\n<tr>\n<td align=\"center\">–partitions &lt;Integer:#of partitions&gt;</td>\n<td align=\"center\">设置分区数</td>\n</tr>\n<tr>\n<td align=\"center\">–replication-factor&lt;Integer:replication factor&gt;</td>\n<td align=\"center\">设置分区副本</td>\n</tr>\n<tr>\n<td align=\"center\">–config&lt;String: name&#x3D;value&gt;</td>\n<td align=\"center\">更新系统默认配置</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-Producer\"><a href=\"#2-2-Producer\" class=\"headerlink\" title=\"2.2 Producer\"></a>2.2 Producer</h3><h4 id=\"2-2-1-发送流程\"><a href=\"#2-2-1-发送流程\" class=\"headerlink\" title=\"2.2.1 发送流程\"></a>2.2.1 发送流程</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// JavaAPI简单Demo</span>\n<span class=\"token comment\">// 1. 创建 kafka 生产者的配置对象</span>\n<span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 2. 给 kafka 配置对象添加配置信息：bootstrap.servers</span>\nproperties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BOOTSTRAP_SERVERS_CONFIG</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hadoop102:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// key,value 序列化（必须）：key.serializer，value.serializer</span>\nproperties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">KEY_SERIALIZER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproperties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">VALUE_SERIALIZER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 3. 创建 kafka 生产者对象</span>\n<span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> kafkaProducer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> \n<span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 4. 调用 send 方法,发送消息</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">// 注意这个ProducerRecor对象</span>\n     kafkaProducer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"atguigu \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">// 5. 关闭资源</span>\n kafkaProducer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220814185310715.png\" alt=\"image-20220814185310715\"></p>\n<h4 id=\"2-2-2-分区规则\"><a href=\"#2-2-2-分区规则\" class=\"headerlink\" title=\"2.2.2 分区规则\"></a>2.2.2 分区规则</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>主要是ProducerRecor这个类的构造方法</p></blockquote>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220814230311792.png\" alt=\"image-20220814230311792\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>自定义分区规则</p></blockquote>\n<ol>\n<li>定义类实现 Partitioner 接口。；</li>\n<li>重写 partition()方法；</li>\n<li>加入配置类</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 简单Demo</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                     keyBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> valueBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cluster</span> cluster<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取消息</span>\n    <span class=\"token class-name\">String</span> msgValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 创建 partition</span>\n    <span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断消息是否包含 atguigu</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msgValue<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        partition <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        partition <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 返回分区号</span>\n    <span class=\"token keyword\">return</span> partition<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 关闭资源</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 配置方法</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> configs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token comment\">// Properties对象指定自定义分区规则</span>\nproperties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARTITIONER_CLASS_CONFIG</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"com.kafka.producer.MyPartitioner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-2-3-几个调优参数\"><a href=\"#2-2-3-几个调优参数\" class=\"headerlink\" title=\"2.2.3 几个调优参数\"></a>2.2.3 几个调优参数</h4><p>好文推荐：[kafka生产者性能相关的参数理解 - 代码天地 (codetd.com)](<a href=\"https://www.codetd.com/article/13239209#:~:text=%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%BA60s\">https://www.codetd.com/article/13239209#:~:text=默认值为60s</a> 当执行KafkaProducer.send,() 和KafkaProducer.partitionsFor ()时阻塞等待的时间，之所以会阻塞时因为可能buffer满了或者获取元数据异常，那么超过这个时间就会抛出异常。)</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">batch.size：<span class=\"token comment\"># 批次大小，默认16k </span>\nlinger.ms：<span class=\"token comment\"># 等待时间，修改为5-100ms</span>\ncompression.type：<span class=\"token comment\"># 压缩snappy  可选值 none, gzip, snappy, lz4, or zstd</span>\nRecordAccumulator：<span class=\"token comment\"># 缓冲区大小，修改为64m</span>\n<span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 重试次数，默认Integer.MAX_VALUE 官方建议通过这个参数delivery.timeout.ms来控制重试行为。</span>\ndelivery.timeout.ms <span class=\"token comment\"># 调用send（）返回后报告成功或失败时间的上限 默认值为2分钟</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-2-4-Ack机制\"><a href=\"#2-2-4-Ack机制\" class=\"headerlink\" title=\"2.2.4 Ack机制\"></a>2.2.4 Ack机制</h4><p>消息发送方可以通过配置request.required.acks属性来保证消息的安全发送，值包括：</p>\n<p>0：表示不进行消息接收是否成功的确认</p>\n<p>1：表示当Leader落盘成功时发送确认</p>\n<p>-1(ALL)：表示Leader和ISR队列都落盘成功时确认</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>官方文档说明如下：</p>\n<h4 id=\"offsets-commit-required-acks\"><a href=\"#offsets-commit-required-acks\" class=\"headerlink\" title=\"offsets.commit.required.acks\"></a><a href=\"https://kafka.apache.org/documentation/#brokerconfigs_offsets.commit.required.acks\">offsets.commit.required.acks</a></h4><ul>\n<li><code>acks=0</code> If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case, and the <code>retries</code> configuration will not take effect (as the client won’t generally know of any failures). The offset given back for each record will always be set to <code>-1</code>.</li>\n<li><code>acks=1</code> This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost.</li>\n<li><code>acks=all</code> This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee. This is equivalent to the acks&#x3D;-1 setting.</li>\n</ul></blockquote>\n<h4 id=\"2-2-5-数据幂等性\"><a href=\"#2-2-5-数据幂等性\" class=\"headerlink\" title=\"2.2.5 数据幂等性\"></a>2.2.5 数据幂等性</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h4 id=\"enable-idempotence\"><a href=\"#enable-idempotence\" class=\"headerlink\" title=\"enable.idempotence\"></a><a href=\"https://kafka.apache.org/documentation/#producerconfigs_enable.idempotence\">enable.idempotence</a></h4><p>When set to ‘true’, the producer will ensure that exactly one copy of each message is written in the stream. If ‘false’, producer retries due to broker failures, etc., may write duplicates of the retried message in the stream. Note that enabling idempotence requires max.in.flight.requests.per.connection to be less than or equal to 5 (with message ordering preserved for any allowable value), retries to be greater than 0, and acks must be ‘all’.</p>\n<p>Idempotence is enabled by default if no conflicting configurations are set. If conflicting configurations are set and idempotence is not explicitly enabled, idempotence is disabled. If idempotence is explicitly enabled and conflicting configurations are set, a ConfigException is thrown.</p></blockquote>\n<p>解释如下</p>\n<ol>\n<li>幂等性必须运行在 ack&#x3D;-1 模式下；</li>\n<li>在没有冲突配置环境下（比如 ack &#x3D;-1），默认开启；</li>\n<li>幂等性判断标准：&lt;PID,Partition,SeqNumber&gt; 全部相同；</li>\n<li>只能保证单分区单会话条件下消息不重（也保证了消息不丢），全局唯一需要事务引入</li>\n</ol>\n<h4 id=\"2-2-6-事务\"><a href=\"#2-2-6-事务\" class=\"headerlink\" title=\"2.2.6 事务\"></a>2.2.6 事务</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220815120731867.png\" alt=\"image-20220815120731867\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 1 初始化事务</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">initTransactions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2 开启事务</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ProducerFencedException</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3 在事务内提交已经消费的偏移量（主要用于消费者）</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sendOffsetsToTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndMetadata</span><span class=\"token punctuation\">></span></span> offsets<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> consumerGroupId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ProducerFencedException</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 4 提交事务</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">commitTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ProducerFencedException</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 5 放弃事务（类似于回滚事务的操作）</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">abortTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ProducerFencedException</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：消息发送前必须指定了事务ID</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRANSACTIONAL_ID_CONFIG</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"transaction_id_0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-2-7-数据有序\"><a href=\"#2-2-7-数据有序\" class=\"headerlink\" title=\"2.2.7 数据有序\"></a>2.2.7 数据有序</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">max.in.flight.requests.per.connection <span class=\"token comment\"># 控制Producer发送窗口大小（RabbitMQ有个 basicQos方法是消费端限流，区别于这个）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>kafka在1.x及以后版本保证数据单分区有序，条件如下：</p>\n<ul>\n<li>未开启幂等性：<code>max.in.flight.requests.per.connection</code>需要设置为1</li>\n<li>开启幂等性：<code>max.in.flight.requests.per.connection</code>需要设置小于等于5<ul>\n<li>原因说明：因为在kafka1.x以后，启用幂等后，kafka服务端会缓存producer发来的最近5个request的元数据，故无论如何，都可以保证最近5个request的数据都是有序的</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h4 id=\"max-in-flight-requests-per-connection\"><a href=\"#max-in-flight-requests-per-connection\" class=\"headerlink\" title=\"max.in.flight.requests.per.connection\"></a><a href=\"https://kafka.apache.org/documentation/#producerconfigs_max.in.flight.requests.per.connection\">max.in.flight.requests.per.connection</a></h4><p>The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this config is set to be greater than 1 and <code>enable.idempotence</code> is set to false, there is a risk of message re-ordering（个人认为这里应该翻译为乱序而不是重排序） after a failed send due to retries (i.e., if retries are enabled). Additionally, enabling idempotence requires this config value to be less than or equal to 5. If conflicting configurations are set and idempotence is not explicitly enabled, idempotence is disabled.</p></blockquote>\n<h3 id=\"2-3-Broker\"><a href=\"#2-3-Broker\" class=\"headerlink\" title=\"2.3 Broker\"></a>2.3 Broker</h3><h4 id=\"2-3-1-Zookeeper中记录的节点信息\"><a href=\"#2-3-1-Zookeeper中记录的节点信息\" class=\"headerlink\" title=\"2.3.1 Zookeeper中记录的节点信息\"></a>2.3.1 Zookeeper中记录的节点信息</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220815134929950.png\" alt=\"image-20220815134929950\"></p>\n<h4 id=\"2-3-2-Broker-总体工作流程-amp-Leader选举流程\"><a href=\"#2-3-2-Broker-总体工作流程-amp-Leader选举流程\" class=\"headerlink\" title=\"2.3.2 Broker 总体工作流程 &amp; Leader选举流程\"></a>2.3.2 Broker 总体工作流程 &amp; Leader选举流程</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220815162325934.png\" alt=\"image-20220815162325934\"></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220815172903937.png\" alt=\"image-20220815172903937\"></p>\n<ul>\n<li>Leader上位顺序为 Replicas 中的顺序（从左到右），但必须在 Isr 中存活，</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h4 id=\"unclean-leader-election-enable\"><a href=\"#unclean-leader-election-enable\" class=\"headerlink\" title=\"unclean.leader.election.enable\"></a><a href=\"https://kafka.apache.org/documentation/#brokerconfigs_unclean.leader.election.enable\">unclean.leader.election.enable</a></h4><p>Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss</p>\n<p>该参数如果设为 true 可以让不在isr队列里的节点参加Leader选举！默认false（3.2.1），但是这个默认值在之前的版本经常变更</p></blockquote>\n<h4 id=\"2-3-3-Kafka副本\"><a href=\"#2-3-3-Kafka副本\" class=\"headerlink\" title=\"2.3.3 Kafka副本\"></a>2.3.3 Kafka副本</h4><ol>\n<li>默认副本1个，生产环境一般配置为2个，保证数据可靠性；太多副本会增加磁盘空间以及网络传输负担；</li>\n<li>Kfaka中副本分为：Leader和Follower。Kafka生产者只会把数据发往Leader，Follower找Leader同步；</li>\n<li>Kafka分区中所有副本统称为AR（Assigned Repllicas） AR &#x3D; ISR + OSR<ul>\n<li>ISR表示和Leader保持同步的Follower集合。Leader故障时，从ISR中选取新的Leader；ISR有以下几个参数<ul>\n<li><code>replica.lag.time.max.ms</code>   默认10000 即 10秒  这个参数很有讲究，参考这篇文章 <a href=\"https://blog.csdn.net/daima_caigou/article/details/109390705\">(2条消息) Kafka之ISR机制的理解_搬砖党弟中弟的博客-CSDN博客_isr机制</a></li>\n</ul>\n</li>\n<li>OSR表示Follower与Leader副本同步时，延迟过多的副本</li>\n</ul>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>replica.lag.time.max.ms</code></p>\n<p>当follower副本将leader副本的LEO之前的日志全部同步时，则认为该follower副本已经追赶上leader副本。</p>\n<p>此时更新该副本的lastCaughtUpTimeMs标识。</p>\n<p>Kafka的副本管理器（ReplicaManager）启动时会启动一个副本过期检测的定时任务，</p>\n<p>会定时检查当前时间与副本的lastCaughtUpTimeMs差值是否大于参数replica.lag.time.max.ms指定的值。</p>\n<p>所以replica.lag.time.max.ms的正确理解是：</p>\n<p><strong>follower在过去的replica.lag.time.max.ms时间内，已经追赶上leader一次了。</strong></p></blockquote>\n<h5 id=\"2-3-3-1-Leader与Follower同步问题（LEO-x2F-HW）\"><a href=\"#2-3-3-1-Leader与Follower同步问题（LEO-x2F-HW）\" class=\"headerlink\" title=\"2.3.3.1 Leader与Follower同步问题（LEO&#x2F;HW）\"></a>2.3.3.1 Leader与Follower同步问题（LEO&#x2F;HW）</h5><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220815190803748.png\" alt=\"image-20220815190803748\"></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220815190928393.png\" alt=\"image-20220815190928393\"></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816111547549.png\" alt=\"image-20220816111547549\"></p>\n<p><strong>注：小于 HW 值的offset所对应的消息被认为是“已提交”或“已备份”的消息，才对消费者可见。</strong></p>\n<h5 id=\"2-3-3-2-分区副本分配\"><a href=\"#2-3-3-2-分区副本分配\" class=\"headerlink\" title=\"2.3.3.2  分区副本分配\"></a>2.3.3.2  分区副本分配</h5><p>创建16个分区，默认分配如下（规则自行脑补，我也不会）：</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220815191457098.png\" alt=\"image-20220815191457098\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>手动调整</p></blockquote>\n<p>编写 json 手动设置，略</p>\n<h5 id=\"2-3-3-3-Leader-Rebalance\"><a href=\"#2-3-3-3-Leader-Rebalance\" class=\"headerlink\" title=\"2.3.3.3 Leader Rebalance\"></a>2.3.3.3 Leader Rebalance</h5><p><code>auto.leader.rebalance.enable</code>：开启leader balancing，默认true</p>\n<p>当一个broker停止或者crashes时，所有本来将它作为leader的分区将会把leader转移到其他broker上去，极端情况下，会导致同一个leader管理多个分区，导致负载不均衡，同时当这个broker重启时，如果这个broker不再是任何分区的leader,kafka的client也不会从这个broker来读取消息，从而导致资源的浪费。</p>\n<p>kafka中有一个被称为优先副本（preferred replicas）的概念。如果一个分区有3个副本，且这3个副本的优先级别分别为0,1,2，根据优先副本的概念，0会作为leader 。当0节点的broker挂掉时，会启动1这个节点broker当做leader。当0节点的broker再次启动后，会自动恢复为此partition的leader。不会导致负载不均衡和资源浪费，这就是leader的均衡机制。</p>\n<p>在配置文件conf&#x2F; server.properties中配置开启（默认就是开启）：auto.leader.rebalance.enable true</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 解释一下 leader 均衡机制(auto.leader.rebalance.enable&#x3D;true)：</p></blockquote>\n<p>当 partition 1 的 leader，就是 broker.id &#x3D; 1 的节点挂掉后，那么 leader 0 或 leader 2 成为 partition 1 的 leader，那么 leader 0 或 leader 2 会管理两个 partition 的读写，性能会下 降，当 leader 1 重新启动后，如果开启了 leader 均衡机制，那么 leader 1 会重新成为 partition 1 的 leader，降低 leader 0 或 leader 2 的负载</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>下面两个参数需开启 <code>auto.leader.rebalance.enable</code></p></blockquote>\n<p><code>leader.imbalance.per.broker.percentage</code>：，默认情况下，此设置设置为10，因此Kafka允许多达10%的领导者在<strong>非首选副本上</strong>，然后再次选举首选副本。</p>\n<p><code>leader.imbalance.check.interval.seconds</code>：默认值300秒。检查leader负载是否平衡的间隔时间。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>开启这个参数势必有性能损耗，主要是leader重新分配的消耗，而开启这个参数好处在于请求均摊，服务负载均衡</p></blockquote>\n<h4 id=\"2-3-4-文件存储\"><a href=\"#2-3-4-文件存储\" class=\"headerlink\" title=\"2.3.4 文件存储\"></a>2.3.4 文件存储</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816115042219.png\" alt=\"image-20220816115042219\"></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816122834245.png\" alt=\"image-20220816122834245\"></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">log.segment.bytes： <span class=\"token comment\"># 默认值 1G。 Kafka 中 log 日志是分成一块块存储的，此配置是指 log 日志划分成块的大小，</span>\nlog.index.interval.bytes： <span class=\"token comment\"># 默认 4kb。kafka 里面每当写入了 4kb 大小的日志（.log），然后就往 index 文件里面记录一个索引。 稀疏索引。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h5 id=\"2-3-4-1-文件清除策略\"><a href=\"#2-3-4-1-文件清除策略\" class=\"headerlink\" title=\"2.3.4.1 文件清除策略\"></a>2.3.4.1 文件清除策略</h5><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">log.retention.hours   <span class=\"token comment\"># 优先级最低，默认168，即7天</span>\nlog.retention.minutes   <span class=\"token comment\"># 优先级中等，覆盖前者</span>\nlog.retention.ms      <span class=\"token comment\"># 优先级最高，覆盖前者，-1表示没有限制</span>\nlog.retention.check.interval.ms <span class=\"token comment\"># 300000=5min 检查周期，注意和上面参数有关联</span>\nlog.retention.bytes   <span class=\"token comment\"># The maximum size of the log before deleting it</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>log.cleanup.policy</code> ：compact&#x2F;delete， 默认delete 启用数据删除策略</p>\n<ul>\n<li>基于时间：默认开启，以segment中所有记录的最大时间戳作为该log文件的时间戳</li>\n<li>基于空间：默认关闭，超过 <code>log.retention.bytes</code> 设置大小，删除最早的segment，默认-1，表示无穷大</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816124109638.png\" alt=\"image-20220816124109638\"></p>\n<p>如果采用 <code>compact</code> 策略，那么压缩后对于相同key的不同value值，只保留最后一个版本。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816124947504.png\" alt=\"image-20220816124947504\"></p>\n<p>压缩后的offset可能是不连续的，比如上图中没有6，当从这些offset消费消息时，将会拿到比这个offset大 的offset对应的消息，实际上会拿到offset为7的消息，并从这个位置开始消费。这种策略只适合特殊场景，比如消息的key是用户ID，value是用户的资料，通过这种压缩策略，整个消息集里就保存了所有用户最新的资料。 </p>\n<h5 id=\"2-3-4-2\"><a href=\"#2-3-4-2\" class=\"headerlink\" title=\"2.3.4.2\"></a>2.3.4.2</h5><ol>\n<li>Kafka 本身是分布式集群，可以采用分区技术，并行度高</li>\n<li>读数据采用稀疏索引，可以快速定位要消费的数据</li>\n<li>顺序写磁盘<ul>\n<li>Kafka 的 producer 生产数据，要写入到 log 文件中，写的过程是一直追加到文件末端，为顺序写。<strong>官网有数据表明</strong>，同样的磁盘，顺序写能到 600M&#x2F;s，而随机写只有 100K&#x2F;s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间</li>\n</ul>\n</li>\n<li>页缓存 <strong>+</strong> 零拷贝技术</li>\n</ol>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816131347862.png\" alt=\"image-20220816131347862\"></p>\n<p><code>log.flush.interval.messages</code> ：强制页缓存刷写到磁盘的条数，默认是 long 的最大值，9223372036854775807。一般不建议修改，交给系统自己管理。</p>\n<p><code>log.flush.interval.ms</code> ：每隔多久，刷数据到磁盘，默认是 null。一般不建议修改，交给系统自己管理</p>\n<h3 id=\"2-4-Consumer\"><a href=\"#2-4-Consumer\" class=\"headerlink\" title=\"2.4 Consumer\"></a>2.4 Consumer</h3><h4 id=\"2-4-1-消费者工作流程\"><a href=\"#2-4-1-消费者工作流程\" class=\"headerlink\" title=\"2.4.1 消费者工作流程\"></a>2.4.1 消费者工作流程</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>整体流程</p></blockquote>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816132126724.png\" alt=\"image-20220816132126724\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>cluster-&gt;consumer</p></blockquote>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816181804578.png\" alt=\"image-20220816181804578\"></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">max.poll.records  <span class=\"token comment\"># 一次拉取数据返回消息的最大条数，默认500条</span>\nfetch.min.bytes   <span class=\"token comment\"># 每批次最小抓取大小，默认1字节</span>\nfetch.max.bytes <span class=\"token comment\"># 每批次最大抓取大小 默认50m</span>\nfetch.max.wait.ms   <span class=\"token comment\"># 一批数据最小值未达到的超时时间，默认500ms</span>\nmax.poll.interval.ms  <span class=\"token comment\"># 默认值5分钟，表示若5分钟之内消费者没有消费完上一次poll的消息，那么consumer会主动发起离开group的请求</span>\n\nbootstrap.servers <span class=\"token comment\"># 向 Kafka 集群建立初始连接用到的 host/port 列表。</span>\nkey.deserializer   <span class=\"token comment\"># 指定接收消息的 key 和 value 的反序列化类型。一定要写全类名。</span>\nvalue.deserializer  <span class=\"token comment\"># 指定接收消息的 key 和 value 的反序列化类型。一定要写全类名。</span>\ngroup.id <span class=\"token comment\"># 标记消费者所属的消费者组。</span>\nenable.auto.commit <span class=\"token comment\"># 默认值为 true，消费者会自动周期性地向服务器提交偏移量。</span>\nauto.commit.interval.ms <span class=\"token comment\"># 如果设置了 enable.auto.commit 的值为 true， 则该值定义了消费者偏移量向 Kafka 提交的频率，默认 5s。</span>\nauto.offset.reset  <span class=\"token comment\"># 当 Kafka 中没有初始偏移量或当前偏移量在服务器中不存在（如，数据被删除了），该如何处理？ earliest：自动重置偏移量到最早的偏移量。 latest：默认，自动重置偏移量为最新的偏移量。 none：如果消费组原来的（previous）偏移量不存在，则向消费者抛异常。 anything：向消费者抛异常。</span>\noffsets.topic.num.partitions __consumer_offsets <span class=\"token comment\"># 的分区数，默认是 50 个分区。</span>\nheartbeat.interval.ms Kafka <span class=\"token comment\"># 消费者和 coordinator 之间的心跳时间，默认 3s。该条目的值必须小于 session.timeout.ms ，也不应该高于session.timeout.ms 的 1/3。 session.timeout.ms Kafka 消费者和 coordinator 之间连接超时时间，默认 45s。超过该值，该消费者被移除，消费者组执行再平衡。</span>\npartition.assignment.strategy <span class=\"token comment\"># 消 费 者 分 区 分 配 策 略 ， 默 认 策 略 是 Range + CooperativeSticky。Kafka 可以同时使用多个分区分配策略。可 以 选 择 的 策 略 包 括 ： Range 、 RoundRobin 、 Sticky 、CooperativeSticky</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-4-2-两种消费方式\"><a href=\"#2-4-2-两种消费方式\" class=\"headerlink\" title=\"2.4.2 两种消费方式\"></a>2.4.2 两种消费方式</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816131654158.png\" alt=\"image-20220816131654158\"></p>\n<h4 id=\"2-4-3-消费者组\"><a href=\"#2-4-3-消费者组\" class=\"headerlink\" title=\"2.4.3 消费者组\"></a>2.4.3 消费者组</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816175058739.png\" alt=\"image-20220816175058739\"></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816175111744.png\" alt=\"image-20220816175111744\"></p>\n<h4 id=\"2-4-4-消费者组初始化\"><a href=\"#2-4-4-消费者组初始化\" class=\"headerlink\" title=\"2.4.4 消费者组初始化\"></a>2.4.4 消费者组初始化</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">heartbeat.interval.ms  <span class=\"token comment\"># consumer发送心跳包的周期，默认3s</span>\nsession.timeout.ms   <span class=\"token comment\"># 心跳超时时间 默认45s</span>\nmax.poll.interval.ms  <span class=\"token comment\"># 默认值5分钟，表示若5分钟之内消费者没有消费完上一次poll的消息，那么consumer会主动发起离开group的请求</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816180455034.png\" alt=\"image-20220816180455034\"></p>\n<h4 id=\"2-4-5-分区的分配以及再平衡\"><a href=\"#2-4-5-分区的分配以及再平衡\" class=\"headerlink\" title=\"2.4.5 分区的分配以及再平衡\"></a>2.4.5 分区的分配以及再平衡</h4><p><code>partition.assignment.strategy</code> 消 费 者 分 区 分 配 策 略 ， 默 认 策 略 是 Range +  CooperativeSticky。Kafka 可以同时使用多个分区分配策略。可 以 选 择 的 策 略 包 括 ： <strong>Range 、 RoundRobin 、 Sticky 、CooperativeSticky</strong></p>\n<h5 id=\"2-4-5-1-Range\"><a href=\"#2-4-5-1-Range\" class=\"headerlink\" title=\"2.4.5.1 Range\"></a>2.4.5.1 Range</h5><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816193114026.png\" alt=\"image-20220816193114026\"></p>\n<h5 id=\"2-4-5-2-RoundRobin\"><a href=\"#2-4-5-2-RoundRobin\" class=\"headerlink\" title=\"2.4.5.2 RoundRobin\"></a>2.4.5.2 RoundRobin</h5><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816200645010.png\" alt=\"image-20220816200645010\"></p>\n<h5 id=\"2-4-5-3-Sticky\"><a href=\"#2-4-5-3-Sticky\" class=\"headerlink\" title=\"2.4.5.3  Sticky\"></a>2.4.5.3  Sticky</h5><pre><code>粘性分区是 Kafka 从 0.11.x 版本开始引入这种分配策略，首先会尽量均衡的放置分区到消费者上面，在出现同一消费者组内消费者出现问题的时候，会尽量保持原有分配的分区不变化。\n</code></pre>\n<h4 id=\"2-4-6-Offset偏移量\"><a href=\"#2-4-6-Offset偏移量\" class=\"headerlink\" title=\"2.4.6 Offset偏移量\"></a>2.4.6 Offset偏移量</h4><p>想要查看需要在 config&#x2F;consumer.properties 中添加配置 <code>exclude.internal.topics=false</code> 表示允许消费系统主题，主题名：<code>__consumer_offsets</code> </p>\n<h5 id=\"2-4-6-1-自动提交\"><a href=\"#2-4-6-1-自动提交\" class=\"headerlink\" title=\"2.4.6.1 自动提交\"></a>2.4.6.1 自动提交</h5><ul>\n<li><code>enable.auto.commit</code><strong>：</strong>是否开启自动提交offset功能，默认是true</li>\n<li><code>auto.commit.interval.ms</code>：自动提交offset的时间间隔，默认是5s</li>\n</ul>\n<p>当设置 <strong>enable.auto.commit</strong> 为 true，<strong>Kafka 会保证在开始调用 poll 方法时，提交上次 poll 返回的所有消息</strong>。从顺序上来说，poll 方法的逻辑是先提交上一批消息的位移，再处理下一批消息，因此它能保证不出现消费丢失的情况。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>自动提交位移的一个问题在于，它可能会出现重复消费。</p>\n<p><strong>如果设置 enable.auto.commit</strong> <strong>为 true，Consumer 按照 auto.commit.interval.ms设置的值（默认5秒）自动提交一次位移。</strong>我们假设提交位移之后的 3 秒发生了 Rebalance 操作。在 Rebalance 之后，所有 Consumer 从上一次提交的位移处继续消费，但该位移已经是 3 秒前的位移数据了，<strong>故在 Rebalance 发生前 3 秒消费的所有数据都要重新再消费一次。</strong>虽然你能够通过减少 <strong>auto.commit.interval.ms</strong> 的值来提高提交频率，但这么做只能缩小重复消费的时间窗口，不可能完全消除它。这是自动提交机制的一个缺陷。</p></blockquote>\n<h5 id=\"2-4-6-2-手动提交\"><a href=\"#2-4-6-2-手动提交\" class=\"headerlink\" title=\"2.4.6.2 手动提交\"></a>2.4.6.2 手动提交</h5><p>有两个方法：</p>\n<ul>\n<li><p>commitSync</p>\n</li>\n<li><p>commitAsync</p>\n<p>  commitAsync 不能够替代 commitSync。commitAsync 的问题在于，出现问题时它不会自动重试。因为它是异步操作，倘若提交失败后自动重试，那么它重试时提交的位移值可能早已经“过期”或不是最新值了。因此，异步提交的重试其实没有意义，所以 commitAsync 是不会重试的。</p>\n</li>\n</ul>\n<h5 id=\"2-4-6-3-手动提交和自动提交中的-reblance-问题\"><a href=\"#2-4-6-3-手动提交和自动提交中的-reblance-问题\" class=\"headerlink\" title=\"2.4.6.3 手动提交和自动提交中的 reblance 问题\"></a>2.4.6.3 手动提交和自动提交中的 reblance 问题</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>如果设置为手动提交，当集群满足 reblance 的条件时，集群会直接 reblance，不会等待所有消息被消费完，这会导致所有未被确认的消息会重新被消费，会出现重复消费的问题</li>\n<li>如果设置为自动提交，当集群满足 reblance 的条件时，集群不会马上 reblance，而是会等待所有消费者消费完当前消息，或者等待消费者超时（等待过程中会报如下 warning）， 之后才会 reblance。</li>\n</ul></blockquote>\n<h5 id=\"2-4-6-4-指定偏移量提交\"><a href=\"#2-4-6-4-指定偏移量提交\" class=\"headerlink\" title=\"2.4.6.4 指定偏移量提交\"></a>2.4.6.4 指定偏移量提交</h5><p><code>auto.offset.reset </code>    earliest | latest | none   默认是 latest。 </p>\n<p>当 Kafka 中没有初始偏移量（消费者组第一次消费）或服务器上不再存在当前偏移量时（例如该数据已被删除），该怎么办？ </p>\n<ul>\n<li>earliest：自动将偏移量重置为最早的偏移量，–from-beginning。 </li>\n<li>latest（默认值）：自动将偏移量重置为最新偏移量。</li>\n<li>none：如果未找到消费者组的先前偏移量，则向消费者抛出异常。</li>\n<li>anything else：throw exception to the consumer.</li>\n</ul>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220816212107181.png\" alt=\"image-20220816212107181\" style=\"zoom: 67%;\" />\n\n\n\n<h5 id=\"2-4-6-5-指定时间消费\"><a href=\"#2-4-6-5-指定时间消费\" class=\"headerlink\" title=\"2.4.6.5 指定时间消费\"></a>2.4.6.5 指定时间消费</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简单Demo</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">></span></span> assignment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>assignment<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    kafkaConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取消费者分区分配信息（有了分区分配信息才能开始消费）</span>\n    assignment <span class=\"token operator\">=</span> kafkaConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">assignment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> timestampToSearch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>  <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 封装集合存储，每个分区对应一天前的数据</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TopicPartition</span> topicPartition <span class=\"token operator\">:</span> assignment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    timestampToSearch<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>topicPartition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 获取从 1 天前开始消费的每个分区的 offset</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndTimestamp</span><span class=\"token punctuation\">></span></span> offsets <span class=\"token operator\">=</span> kafkaConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">offsetsForTimes</span><span class=\"token punctuation\">(</span>timestampToSearch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 遍历每个分区，对每个分区设置消费时间。</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TopicPartition</span> topicPartition <span class=\"token operator\">:</span> assignment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">OffsetAndTimestamp</span> offsetAndTimestamp <span class=\"token operator\">=</span>\n        offsets<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>topicPartition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 根据时间指定开始消费的位置</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offsetAndTimestamp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        kafkaConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span>topicPartition<span class=\"token punctuation\">,</span> offsetAndTimestamp<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"3-SpringBoot整合Demo\"><a href=\"#3-SpringBoot整合Demo\" class=\"headerlink\" title=\"3.SpringBoot整合Demo\"></a>3.SpringBoot整合Demo</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">TOPIC_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send/first\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息 %s 发送成功！\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send/second\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">send2</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息 %s 发送成功！\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConsumer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span> groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"default-group\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">firstConsumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first message: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first record: \"</span> <span class=\"token operator\">+</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ack<span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//配置多个消费组</span>\n    <span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token string\">\"second\"</span><span class=\"token punctuation\">,</span> groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"default-group\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">secondConsumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second message: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second record: \"</span> <span class=\"token operator\">+</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ack<span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> SpringStudy\n  <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">bootstrap-servers</span><span class=\"token punctuation\">:</span> 192.168.150.100<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>192.168.150.101<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span><span class=\"token punctuation\">,</span>192.168.150.102<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span>\n    <span class=\"token key atrule\">producer</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 生产者</span>\n      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 设置大于0的值，则客户端会将发送失败的记录重新发送</span>\n      <span class=\"token key atrule\">batch-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16384</span>\n      <span class=\"token key atrule\">buffer-memory</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33554432</span>\n      <span class=\"token key atrule\">acks</span><span class=\"token punctuation\">:</span> all\n      <span class=\"token comment\"># 指定消息key和消息体的编解码方式</span>\n      <span class=\"token key atrule\">key-serializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringSerializer\n      <span class=\"token key atrule\">value-serializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringSerializer\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">group-id</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>group\n      <span class=\"token key atrule\">enable-auto-commit</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n      <span class=\"token key atrule\">auto-offset-reset</span><span class=\"token punctuation\">:</span> earliest\n      <span class=\"token key atrule\">key-deserializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringDeserializer\n      <span class=\"token key atrule\">value-deserializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringDeserializer\n    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交</span>\n      <span class=\"token comment\"># RECORD</span>\n      <span class=\"token comment\"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交</span>\n      <span class=\"token comment\"># BATCH</span>\n      <span class=\"token comment\"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交</span>\n      <span class=\"token comment\"># TIME</span>\n      <span class=\"token comment\"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交</span>\n      <span class=\"token comment\"># COUNT</span>\n      <span class=\"token comment\"># TIME |　COUNT　有一个条件满足时提交</span>\n      <span class=\"token comment\"># COUNT_TIME</span>\n      <span class=\"token comment\"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交</span>\n      <span class=\"token comment\"># MANUAL</span>\n      <span class=\"token comment\"># 手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种</span>\n      <span class=\"token comment\"># MANUAL_IMMEDIATE</span>\n      <span class=\"token key atrule\">ack-mode</span><span class=\"token punctuation\">:</span> manual_immediate\n\n<span class=\"token comment\"># 应用服务 WEB 访问端口</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"1. 环境搭建 主机名 IP ubuntu1 192.168.150.100 ubuntu2 192.168.150.101 ubuntu3 192.168.150.102 注意，以下均为Kraft方式搭建，官方不建议生产环境这么做 截止2022.8.17 1.1 三节点原生集群...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"MQ","slug":"MQ","count":1,"path":"api/tags/MQ.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">1. 环境搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%B8%89%E8%8A%82%E7%82%B9%E5%8E%9F%E7%94%9F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA-Kraft\"><span class=\"toc-text\">1.1 三节点原生集群搭建(Kraft)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E4%B8%89%E8%8A%82%E7%82%B9Docker%E6%96%B9%E5%BC%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88Kraft%EF%BC%89\"><span class=\"toc-text\">1.2 三节点Docker方式集群搭建（Kraft）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-Kafka-UI\"><span class=\"toc-text\">1.3 Kafka-UI</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2. 核心概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.1 基础命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Producer\"><span class=\"toc-text\">2.2 Producer</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-1-%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.2.1 发送流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-2-%E5%88%86%E5%8C%BA%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2.2.2 分区规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-3-%E5%87%A0%E4%B8%AA%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2.2.3 几个调优参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-4-Ack%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">2.2.4 Ack机制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#offsets-commit-required-acks\"><span class=\"toc-text\">offsets.commit.required.acks</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-5-%E6%95%B0%E6%8D%AE%E5%B9%82%E7%AD%89%E6%80%A7\"><span class=\"toc-text\">2.2.5 数据幂等性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#enable-idempotence\"><span class=\"toc-text\">enable.idempotence</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-6-%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">2.2.6 事务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-7-%E6%95%B0%E6%8D%AE%E6%9C%89%E5%BA%8F\"><span class=\"toc-text\">2.2.7 数据有序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#max-in-flight-requests-per-connection\"><span class=\"toc-text\">max.in.flight.requests.per.connection</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-Broker\"><span class=\"toc-text\">2.3 Broker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-1-Zookeeper%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">2.3.1 Zookeeper中记录的节点信息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-2-Broker-%E6%80%BB%E4%BD%93%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B-amp-Leader%E9%80%89%E4%B8%BE%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.3.2 Broker 总体工作流程 &amp; Leader选举流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#unclean-leader-election-enable\"><span class=\"toc-text\">unclean.leader.election.enable</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-3-Kafka%E5%89%AF%E6%9C%AC\"><span class=\"toc-text\">2.3.3 Kafka副本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-3-1-Leader%E4%B8%8EFollower%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%EF%BC%88LEO-x2F-HW%EF%BC%89\"><span class=\"toc-text\">2.3.3.1 Leader与Follower同步问题（LEO&#x2F;HW）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-3-2-%E5%88%86%E5%8C%BA%E5%89%AF%E6%9C%AC%E5%88%86%E9%85%8D\"><span class=\"toc-text\">2.3.3.2  分区副本分配</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-3-3-Leader-Rebalance\"><span class=\"toc-text\">2.3.3.3 Leader Rebalance</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-4-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">2.3.4 文件存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-4-1-%E6%96%87%E4%BB%B6%E6%B8%85%E9%99%A4%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">2.3.4.1 文件清除策略</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-3-4-2\"><span class=\"toc-text\">2.3.4.2</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-Consumer\"><span class=\"toc-text\">2.4 Consumer</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-1-%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.4.1 消费者工作流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-2-%E4%B8%A4%E7%A7%8D%E6%B6%88%E8%B4%B9%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2.4.2 两种消费方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-3-%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84\"><span class=\"toc-text\">2.4.3 消费者组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-4-%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">2.4.4 消费者组初始化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-5-%E5%88%86%E5%8C%BA%E7%9A%84%E5%88%86%E9%85%8D%E4%BB%A5%E5%8F%8A%E5%86%8D%E5%B9%B3%E8%A1%A1\"><span class=\"toc-text\">2.4.5 分区的分配以及再平衡</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-5-1-Range\"><span class=\"toc-text\">2.4.5.1 Range</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-5-2-RoundRobin\"><span class=\"toc-text\">2.4.5.2 RoundRobin</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-5-3-Sticky\"><span class=\"toc-text\">2.4.5.3  Sticky</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-6-Offset%E5%81%8F%E7%A7%BB%E9%87%8F\"><span class=\"toc-text\">2.4.6 Offset偏移量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-6-1-%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">2.4.6.1 自动提交</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-6-2-%E6%89%8B%E5%8A%A8%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">2.4.6.2 手动提交</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-6-3-%E6%89%8B%E5%8A%A8%E6%8F%90%E4%BA%A4%E5%92%8C%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E4%B8%AD%E7%9A%84-reblance-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2.4.6.3 手动提交和自动提交中的 reblance 问题</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-6-4-%E6%8C%87%E5%AE%9A%E5%81%8F%E7%A7%BB%E9%87%8F%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">2.4.6.4 指定偏移量提交</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-4-6-5-%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E6%B6%88%E8%B4%B9\"><span class=\"toc-text\">2.4.6.5 指定时间消费</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-SpringBoot%E6%95%B4%E5%90%88Demo\"><span class=\"toc-text\">3.SpringBoot整合Demo</span></a></li></ol>","author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}},"mapped":true,"prev_post":{"title":"Mycat2入门","uid":"6b7e4a534de9f7da91f5ad92c6f8b78c","slug":"Mycat2入门","date":"2022-09-30T09:39:20.000Z","updated":"2022-09-30T09:48:35.054Z","comments":true,"path":"api/articles/Mycat2入门.json","keywords":null,"cover":[],"text":"1. 概述1.1 MyCat能干什么？ 读写分离 数据分片 垂直拆分（分库）、水平拆分（分表）、垂直+水平拆分（分库分表） 多数据源整合 Mycat 的原理中最重要的一个动词是“拦截”，它拦截了用户发送过来的 SQL 语 句，首先对 SQL 语句做了一些特定的分析：如分片分析、路...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":1,"path":"api/tags/中间件.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},"next_post":{"title":"JUC并发编程","uid":"75cf46e9ea7d77c8be442b61749fec6f","slug":"JUC并发编程","date":"2022-09-30T09:38:55.000Z","updated":"2022-09-30T09:43:41.709Z","comments":true,"path":"api/articles/JUC并发编程.json","keywords":null,"cover":[],"text":"JUC并发编程进程与线程进程 程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的 当一个程序被运行，从磁盘加载这个程序的代码至内存，这是就开启了一个进...","link":"","photos":[],"count_time":{"symbolsCount":"102k","symbolsTime":"1:32"},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"JUC","slug":"JUC","count":1,"path":"api/tags/JUC.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}}}