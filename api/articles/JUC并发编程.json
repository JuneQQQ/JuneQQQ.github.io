{"title":"JUC并发编程","uid":"75cf46e9ea7d77c8be442b61749fec6f","slug":"JUC并发编程","date":"2022-09-30T09:38:55.000Z","updated":"2022-09-30T09:43:41.709Z","comments":true,"path":"api/articles/JUC并发编程.json","keywords":null,"cover":[],"content":"<h1 id=\"JUC并发编程\"><a href=\"#JUC并发编程\" class=\"headerlink\" title=\"JUC并发编程\"></a>JUC并发编程</h1><h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><ul>\n<li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的</li>\n<li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这是就开启了一个进程。</li>\n<li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序智能启动一个实例进程（如网易云音乐、360）</li>\n</ul>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><ul>\n<li><strong>一个进程之内可以分为一到多个线程</strong></li>\n<li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行。</li>\n<li>Java中，线程作为最小调度单位，进程作为资源分配的最小单位。在windows中进程是不活动的，只是作为线程的容器。</li>\n</ul>\n<h3 id=\"进程-vs-线程\"><a href=\"#进程-vs-线程\" class=\"headerlink\" title=\"进程 vs 线程\"></a>进程 vs 线程</h3><ul>\n<li>进程基本上互相独立，而线程存在于进程内，是进程的一个子集</li>\n<li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li>\n<li>进程间通信较为复杂<ul>\n<li>同一台计算机的继进程通信称为IPC（Inter-process communication）</li>\n<li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如HTTP</li>\n</ul>\n</li>\n<li>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一共享变量</li>\n<li>线程更轻量，线程上下切换成本一般上要比进程上下文切换低</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-09 下午10.00.23.png\" alt=\"截屏2021-10-09下午10.00.23\" style=\"zoom:50%;\" />\n\n<h3 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h3><p>单核 CPU 下，线程实际上还是 <strong>串行执行的</strong>，操作系统中有一个组件叫做任务调度器，将 CPU 的时间片（Windows 下时间片最小约为15毫秒）分给不同的线程使用，只是由于CPU在线程时间（时间片很短）的切换非常快，人类感觉是同时运行的，总结一句话就是：微观串行，宏观并行。</p>\n<p>一般会将 <strong>线程轮流使用</strong> CPU的做法称为并发（concurrent）</p>\n<p>多核CPU下，每个核都可以调度运行线程，这时候线程是可以<strong>并行</strong>的</p>\n<ul>\n<li>并发（concurrent）是同一时间应对多件事情的能力</li>\n<li>并行（parallel）是同一时间动手做多件事情的能力</li>\n</ul>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>案例一：异步调用</p></blockquote>\n<p>从方法调用的角度来讲，如果</p>\n<ul>\n<li>需要等带结果返回，才能继续运行就是同步</li>\n<li>不需要等待结果，就能继续运行就是异步</li>\n</ul>\n<p><strong>1）设计</strong></p>\n<p>多线程可以让方法执行变为异步的（即不要干等）比如说读取磁盘文件时，假设读取操作花费了五秒钟，如果没有线程调度机制，这五秒调用者什么都干不了，其代码都得暂停</p>\n<p><strong>2）结论</strong></p>\n<ul>\n<li><p>比如在项目中，视频文件需要转换格式等操作比较费时，这是开一个新线程处理视频转换，避免阻塞主线程</p>\n</li>\n<li><p>Tomcat 的异步 servlet 也是类似的，让用户线程处理耗时较长的操作，避免阻塞 Tomcat 的工作线程</p>\n</li>\n<li><p>UI程序中，开线程进行其他操作，避免阻塞UI线程</p>\n</li>\n<li><p>单核CPU下，多线程不能实际提升程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用CPU，不至于一个线程总占用CPU，别的线程没法干活</p>\n</li>\n<li><p>多核CPU可以并行跑多个线程，但能否提高程序运行效率还是要分情况的。</p>\n<ul>\n<li>有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分（阿姆达定律）</li>\n<li>也不是所有的任务都需要拆分，任务的目的如果不同，谈拆分和效率没有意义</li>\n</ul>\n</li>\n<li><p>IO操作不占用CPU，<strong>只是我们一般拷贝文件使用的是阻塞IO</strong>，这时相当于线程虽然不用CPU，但需要一直等待IO结束，没能充分利用线程。所以才有后面的【非阻塞IO】和【异步IO】优化。</p>\n</li>\n</ul>\n<h2 id=\"Java线程\"><a href=\"#Java线程\" class=\"headerlink\" title=\"Java线程\"></a>Java线程</h2><h3 id=\"创建和运行线程\"><a href=\"#创建和运行线程\" class=\"headerlink\" title=\"创建和运行线程\"></a>创建和运行线程</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">////////////////////////////////////////</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//        t.setName(\"t2\");</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">////////////////////////////////////////</span>\n<span class=\"token class-name\">Runnable</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1 running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span> r<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ThreadName\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">////////////////////////////////////////</span>\n  \n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread Running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token comment\">////////////////////////////////////////</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"原理之Thread与Runnable的关系\"><a href=\"#原理之Thread与Runnable的关系\" class=\"headerlink\" title=\"原理之Thread与Runnable的关系\"></a>原理之Thread与Runnable的关系</h4><p>分析Thread源码，结论如下：</p>\n<ul>\n<li>传入Runnable参数写法是对Thread的成员变量target赋值，<strong>run方法调用 target.run( )</strong></li>\n<li>匿名内部类的写法是直接对run方法<strong>重写</strong>，执行的Thread.run( )</li>\n</ul>\n<p>小结：</p>\n<ul>\n<li>用Runnable更容易与线程池等高级API配合</li>\n<li>用Runnable让任务脱离了Thread继承体系，更加灵活。</li>\n</ul>\n<h4 id=\"前瞻：第三种创建线程方式\"><a href=\"#前瞻：第三种创建线程方式\" class=\"headerlink\" title=\"前瞻：第三种创建线程方式\"></a>前瞻：第三种创建线程方式</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该方法会等待返回值生成</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"查看进程线程的方法\"><a href=\"#查看进程线程的方法\" class=\"headerlink\" title=\"查看进程线程的方法\"></a>查看进程线程的方法</h4><p><strong>Windows</strong></p>\n<ul>\n<li>tasklist 查看进程 -&gt;  tasklist | findstr java</li>\n<li>taskkill 杀死进程</li>\n<li>jps   查看Java进程</li>\n</ul>\n<p><strong>Linux</strong></p>\n<ul>\n<li>ps -ef 查看所有进程  -&gt;  ps -ef | grep java</li>\n<li>ps -fT -p <PID>   查看某个进程的所有线程</li>\n<li>kill <PID>  杀死进程</li>\n<li>top  按大写H切换是否显示线程</li>\n<li>top -H -p <PID> 查看某个进程的所有线程</li>\n</ul>\n<p><strong>Java</strong></p>\n<ul>\n<li>jps\t\t\t查看所有Java进程</li>\n<li>jstack <pid> 查看某个Java进程的所有线程状态</li>\n<li>jconsole  来查看某个Java进程中线程的运行情况（图形界面）</li>\n</ul>\n<h3 id=\"原理之线程运行\"><a href=\"#原理之线程运行\" class=\"headerlink\" title=\"原理之线程运行\"></a>原理之线程运行</h3><h4 id=\"线程上下文切换（Thread-Context-Switch）\"><a href=\"#线程上下文切换（Thread-Context-Switch）\" class=\"headerlink\" title=\"线程上下文切换（Thread Context Switch）\"></a>线程上下文切换（Thread Context Switch）</h4><p>因为以下一些原因导致CPU不再执行当前的线程，转而执行另一个线程的代码</p>\n<ul>\n<li>线程的CPU时间片用完</li>\n<li>垃圾回收</li>\n<li>有更高优先级的线程需要执行</li>\n<li>线程自己调用了 <code>sleep  yield  wait  join  park  synchronized  lock</code> 等方法</li>\n</ul>\n<p>当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java中对应的概念就是程序计数器（Program Counter Register），它的作用是记住下一条JVM指令的执行地址，是线程私有的</p>\n<ul>\n<li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量表、操作数栈、返回地址等</li>\n<li>Context Switch 频繁发生会影响性能</li>\n</ul>\n<h3 id=\"常见方法\"><a href=\"#常见方法\" class=\"headerlink\" title=\"常见方法\"></a>常见方法</h3><table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">static 功能说明</th>\n<th align=\"center\">注意</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">start( )</td>\n<td align=\"center\">启动一个新线程，在新的线程运行方法中的代码</td>\n<td align=\"center\">start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU时间片还没分给它）。每个线程对象的 start 方法只能调用一次，如果调用多次会出现 IllegalThreadStateException</td>\n</tr>\n<tr>\n<td align=\"center\">run( )</td>\n<td align=\"center\">新线程启动后会调用的方法</td>\n<td align=\"center\">如果在构造 Thread 对象时，传递了 Runnable 参数，则线程启动后会调用 Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建Thread的子类对象，来覆盖默认行为</td>\n</tr>\n<tr>\n<td align=\"center\">join( )</td>\n<td align=\"center\">等待线程结束</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">join( long n )</td>\n<td align=\"center\">等待线程运行结束，最多等待 n 毫秒</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">getId( )</td>\n<td align=\"center\">获取线程长整型的 id</td>\n<td align=\"center\">id唯一</td>\n</tr>\n<tr>\n<td align=\"center\">getName( )</td>\n<td align=\"center\">获取线程名</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">setName( )</td>\n<td align=\"center\">设置线程名</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">getPriority( )</td>\n<td align=\"center\">修改线程优先级</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">setPriority( int )</td>\n<td align=\"center\">设置线程优先级</td>\n<td align=\"center\">java 中规定线程优先级是 1~10的整数，较大的优先级能提高该线程被CPU调度的几率；越大越优先</td>\n</tr>\n<tr>\n<td align=\"center\">getState( )</td>\n<td align=\"center\">获取线程状态</td>\n<td align=\"center\">Java 中线程状态是用6个enum表示，分别为：NEW   RUNNABLE  BLOCKED  WAITING  TIMED_WAITING  TERMINATED</td>\n</tr>\n<tr>\n<td align=\"center\">isInterrupted( )</td>\n<td align=\"center\">判断是否被打断</td>\n<td align=\"center\">不会清除<strong>打断标记</strong></td>\n</tr>\n<tr>\n<td align=\"center\">isAlive( )</td>\n<td align=\"center\">线程是否存活（还没有运行完毕）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">interrupt( )</td>\n<td align=\"center\">打断线程（仅标记，不是强制终止）</td>\n<td align=\"center\">如果被打断线程正在sleep  wait join会导致被打断的线程<strong>抛出InterruptedException</strong>，并清除<strong>打断标记</strong>；如果打断正在运行的线程，则会设置<strong>打断标记</strong>；park的线程被打断，也会设置<strong>打断标记</strong></td>\n</tr>\n<tr>\n<td align=\"center\">interrupted( )</td>\n<td align=\"center\">static <strong>判断当前线程是否被打断</strong></td>\n<td align=\"center\"><strong>会清除打断标记</strong></td>\n</tr>\n<tr>\n<td align=\"center\">currentThread( )</td>\n<td align=\"center\">static 获取当前正在运行的线程</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">sleep( long n )</td>\n<td align=\"center\">static 让当前执行的线程休眠 n 毫秒，休眠时让出CPU时间片给其他线程</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">yield( )</td>\n<td align=\"center\">static 提示线程调度器让出线程对CPU的使用</td>\n<td align=\"center\">主要是为了测试和调试</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://blog.csdn.net/anlian523/article/details/106752414\">interrupt()中断对LockSupport.park()的影响_anlian523的博客-CSDN博客_locksupport park 中断</a></p>\n<p>注：</p>\n<ol>\n<li>sleep 会补充 park 的 _counter 变量(permit)，使其为1，之后第一次park时不会阻塞！</li>\n</ol>\n<h4 id=\"start-与-run\"><a href=\"#start-与-run\" class=\"headerlink\" title=\"start 与 run\"></a>start 与 run</h4><p>![截屏2021-10-11上午8.23.00](<a href=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2021-10-11\">http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-11</a> 上午8.23.00.png)</p>\n<h4 id=\"sleep-与-yield\"><a href=\"#sleep-与-yield\" class=\"headerlink\" title=\"sleep 与 yield\"></a>sleep 与 yield</h4><h5 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep\"></a><strong>sleep</strong></h5><ol>\n<li>调用 sleep 会让当前线程<strong>从 Running 进入 Timed Waiting 状态</strong></li>\n<li>其他线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep  方法会抛出 InterruptedException</li>\n<li><strong>睡眠结束后的线程未必会得到执行</strong><ol>\n<li>建议用 TimeUnit 的 sleep 代替 Thread 的sleep来回的更好的可读性</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a><strong>yield</strong></h5><ol>\n<li>调用yield会让当前线程<strong>从 Running 进入 Runnable 状态</strong>，然后调度执行其它同优先级的线程。如果这时<strong>没有同优先级的线程，那么不能保证让当前线程暂停的效果</strong></li>\n<li>具体的实现依赖于操作系统的任务调度器</li>\n</ol>\n<h5 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a><strong>线程优先级</strong></h5><ul>\n<li>线程优先级会提示（hint）调度器优先调度该线程，<strong>但它仅仅是一个提示，调度器可以忽略它</strong></li>\n<li>如果CPU比较忙，那么优先级高的线程会获得更多的时间片，但CPU闲时，优先级几乎没作用</li>\n</ul>\n<h5 id=\"案例：防止CPU占用100\"><a href=\"#案例：防止CPU占用100\" class=\"headerlink\" title=\"案例：防止CPU占用100%\"></a><strong>案例：防止CPU占用100%</strong></h5><ul>\n<li>Thread.sleep( 1 )</li>\n<li>wait 实现</li>\n</ul>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a><strong>join</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为什么要使用 join？</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-11 上午8.57.51.png\" alt=\"截屏2021-10-11上午8.57.51\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-11 上午8.58.41.png\" alt=\"截屏2021-10-11上午8.58.41\" style=\"zoom:50%;\" />\n\n<p><strong>分析</strong></p>\n<ul>\n<li>因为主线程和线程 t1 是并行执行的，t1线程需要1s之后才能得出r&#x3D;10</li>\n<li>而主线程一开始就要打印 r 的结果，所以只能打印出 r &#x3D; 0</li>\n</ul>\n<p><strong>解决办法</strong></p>\n<ul>\n<li>用 sleep ？<ul>\n<li>等待时间难以确定</li>\n</ul>\n</li>\n<li><strong>用 join，加在 t1.start( )之后即可</strong><ul>\n<li>join( )：等待线程结束</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"interrupt\"><a href=\"#interrupt\" class=\"headerlink\" title=\"interrupt\"></a>interrupt</h4><ul>\n<li>打断正在 sleep wait join 的线程打断标记为 false</li>\n<li>打断正在运行的线程的打断标记为 true</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-11 上午9.27.42.png\" alt=\"截屏2021-10-11上午9.27.42\" style=\"zoom:50%;\" />\n\n<h5 id=\"模式之两阶段终止\"><a href=\"#模式之两阶段终止\" class=\"headerlink\" title=\"模式之两阶段终止\"></a>模式之两阶段终止</h5><p>在一个线程T1中如何“优雅”终止T2？这里的【优雅】指的是T2一个料理后事的机会</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>错误思路</p></blockquote>\n<ul>\n<li>使用线程对象的 <strong>stop( )</strong> 方法停止线程<ul>\n<li>stop方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其他线程将永远无法获取锁</li>\n</ul>\n</li>\n<li>使用 **System.exit( int )**方法停止线程<ul>\n<li>目的仅是停止一个线程，但这种做法会让整个程序都终止</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>两阶段终止模式</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-11 上午9.35.47.png\" alt=\"截屏2021-10-11上午9.35.47\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TwoPhaseTermination</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TwoPhaseTermination</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoPhaseTermination</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Thread</span> monitor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 启动监控线程</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        monitor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//                System.out.println(current.getName());</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行监控记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sleep Interrupt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    current<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重新设置打断标记</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        monitor<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 停止监控线程</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        monitor<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"打断-park-线程\"><a href=\"#打断-park-线程\" class=\"headerlink\" title=\"打断 park 线程\"></a>打断 park 线程</h5><p>打断 park 线程，不会清空打断状态 ，LockSupport.park( )方法需要打断标记为false才能生效</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unpark...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打断状态：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打断状态：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"不推荐使用的方法\"><a href=\"#不推荐使用的方法\" class=\"headerlink\" title=\"不推荐使用的方法\"></a>不推荐使用的方法</h4><p>这些方法已过时，容易破坏同步代码块，造成线程死锁</p>\n<ul>\n<li>stop( )：停止线程运行</li>\n<li>suspend( )：挂起（暂停）线程运行 -&gt; wait( )</li>\n<li>resume( )：恢复线程运行 -&gt; notify( )</li>\n</ul>\n<h3 id=\"守护线程与主线程\"><a href=\"#守护线程与主线程\" class=\"headerlink\" title=\"守护线程与主线程\"></a>守护线程与主线程</h3><p>默认情况下，Java进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，<strong>只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。</strong><code>setDameon( )</code>可以设置守护线程。</p>\n<ul>\n<li>垃圾回收线程就是一种守护线程</li>\n<li>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以Tomcat接收到shutdown命令后，不会等待他们处理完当前请求</li>\n</ul>\n<h3 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h3><p>从 <strong>操作系统</strong> 层面描述：五种状态</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-11 上午11.36.15.png\" alt=\"截屏2021-10-11上午11.36.15\" style=\"zoom:50%;\" />\n\n<ul>\n<li>【初始状态】仅是语言层面创建了线程对象，还未与操作系统关联</li>\n<li>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由CPU调度执行</li>\n<li>【运行状态】指获取了CPU时间片运行中的状态<ul>\n<li>当CPU时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程上下文的切换</li>\n</ul>\n</li>\n<li>【阻塞状态】<ul>\n<li>如果调用了阻塞API，如BIO读写文件，这时线程实际不会用到CPU，会导致线程上下文切换，进入【阻塞状态】</li>\n<li>等BIO操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</li>\n<li>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要他们一直不唤醒，调度器就一直不会考虑调度他们</li>\n</ul>\n</li>\n<li>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其他状态</li>\n</ul>\n<p>从 <strong>Java API</strong> 层面描述：六种状态</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-11 下午4.27.59.png\" alt=\"截屏2021-10-11下午4.27.59\" style=\"zoom:50%;\" />\n\n<ul>\n<li>NEW 线程刚被创建，但是还没有调用 start( )方法</li>\n<li>RUNNABLE 当调用了 start( ) 方法之后，注意，JavaAPI层面的 RUNNABLE 状态涵盖了 <strong>操作系统</strong> 层面的【可运行状态】、【运行状态】和【阻塞状态】（由于BIO导致的线程阻塞，在Java里无法区分，仍然认为是可运行的）</li>\n</ul>\n<h3 id=\"小结案例\"><a href=\"#小结案例\" class=\"headerlink\" title=\"小结案例\"></a>小结案例</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"洗水壶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"烧开水\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"老王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"洗茶壶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"洗茶杯\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拿茶叶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"泡茶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>存在的缺陷</p>\n<ul>\n<li>上面模拟的是小王等老王的水烧开了，小王泡茶，如果反过来要实现老王等小王的茶叶拿来了，老王泡茶呢？代码最好适应两种情况</li>\n<li>上面两个线程其实是各执行各的，如果要模拟老王把水壶交给小王泡茶，或者模拟小王把茶叶交给老王泡茶呢？</li>\n<li>等待后续学习解答</li>\n</ul>\n<h3 id=\"本章小结\"><a href=\"#本章小结\" class=\"headerlink\" title=\"本章小结\"></a>本章小结</h3><p>本章重点在于掌握</p>\n<ul>\n<li>线程创建</li>\n<li>线程重要 API，如start，run，sleep，join，interrupt 等</li>\n<li>线程状态</li>\n<li><strong>应用方面</strong><ul>\n<li>异步调用：主线程执行期间，其他线程异步执行耗时操作</li>\n<li>提高效率：并行计算，缩短计算时间</li>\n<li>同步等待：join</li>\n<li>统筹规划：合理使用线程，得到最优效果</li>\n</ul>\n</li>\n<li><strong>原理方面</strong><ul>\n<li>线程运行流程：栈、栈帧、上下文切换、程序计数器</li>\n<li>Thread 两种创建方式的源码</li>\n</ul>\n</li>\n<li><strong>模式方面</strong><ul>\n<li>两阶段终止</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"共享模型之管程\"><a href=\"#共享模型之管程\" class=\"headerlink\" title=\"共享模型之管程\"></a>共享模型之管程</h3><ul>\n<li>共享问题</li>\n<li>线程安全分析</li>\n<li>Monitor</li>\n<li>wait&#x2F;notify</li>\n<li>线程状态转换</li>\n<li>活跃性</li>\n<li>Lock</li>\n</ul>\n<h4 id=\"共享带来的问题\"><a href=\"#共享带来的问题\" class=\"headerlink\" title=\"共享带来的问题\"></a>共享带来的问题</h4><h5 id=\"临界区-Critical-Section\"><a href=\"#临界区-Critical-Section\" class=\"headerlink\" title=\"临界区 Critical Section\"></a>临界区 Critical Section</h5><ul>\n<li>一个程序运行多个线程本身是没有问题的</li>\n<li>问题出在多个线程访问共享资源<ul>\n<li>多个线程读共享资源其实也没有问题</li>\n<li>在多个线程对共享资源读写操作时发生指令交错，就会出现问题</li>\n</ul>\n</li>\n<li><strong>一段代码块如果存在对共享资源的多线程读写操作，这段代码称为临界区</strong><ul>\n<li>例如：对静态变量的操作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"竞态条件-Race-Condition\"><a href=\"#竞态条件-Race-Condition\" class=\"headerlink\" title=\"竞态条件 Race Condition\"></a>竞态条件 Race Condition</h4><p>多个线程在临界区内执行，由于代码的<strong>执行序列不同</strong>而导致结果无法预测，称之为发生了竞态条件。</p>\n<h3 id=\"synchronized-解决方案\"><a href=\"#synchronized-解决方案\" class=\"headerlink\" title=\"synchronized 解决方案\"></a>synchronized 解决方案</h3><h4 id=\"应用之互斥\"><a href=\"#应用之互斥\" class=\"headerlink\" title=\"应用之互斥\"></a>应用之互斥</h4><p>为了避免临界区的竞态条件发生，有多种手段可以达到目的。</p>\n<ul>\n<li>阻塞式的解决方法：synchronized 、 Lock</li>\n<li>非阻塞式的解决方案：原子变量</li>\n</ul>\n<p>本阶段使用：synchronized 来解决上述问题，俗称【对象锁】，它采用互斥的方式让同一时刻至多有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住。这样就能保证拥有锁的线程可以安全的执行临界区内的代码，不用担心上下文切换。</p>\n<p><strong>注意</strong></p>\n<ul>\n<li>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</li>\n<li>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点</li>\n</ul>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>对象<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  临界区\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>synchronized 实际是用<strong>对象锁保证了临界区代码的原子性</strong>，临界区内的代码对外是不可分割的，不会被线程切换所打断。</p>\n<ul>\n<li>如果把 synchronized 放到循环外面会怎样？<ul>\n<li>循环不可分割，相当于先执行了先拿到锁对象的线程，再执行了后者</li>\n</ul>\n</li>\n<li>如果 t1 synchronized(obj1)  而 t2 synchronized(obj2) 会怎样运作？<ul>\n<li>相当于没加锁</li>\n</ul>\n</li>\n<li>如果 t1 synchronized(obj1) 而 t2 没有加会怎样？如何理解？<ul>\n<li>仍然相当于没加锁，因为 t2 并不会因为 t1 的锁而产生阻塞</li>\n</ul>\n</li>\n</ul>\n<p>方法上的 synchronized</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 上午9.06.25.png\" alt=\"截屏2021-10-12上午9.06.25\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"所谓“线程八锁”（习题）\"><a href=\"#所谓“线程八锁”（习题）\" class=\"headerlink\" title=\"所谓“线程八锁”（习题）\"></a>所谓“线程八锁”（习题）</h4><p>其实就是考察 synchronized 锁住的是哪一个对象</p>\n<p>情况1：1-&gt;2  或  2-&gt;1</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2021-10-12%20%E4%B8%8A%E5%8D%889.08.32.png\" alt=\"截屏2021-10-12上午9.08.32\" style=\"zoom: 50%;\" />\n\n<p>情况2：1s后 1-&gt;2  或   2-&gt; 1s 后 1</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 上午9.13.10.png\" alt=\"截屏2021-10-12上午9.13.10\" style=\"zoom: 50%;\" />\n\n<p>情况3：3在1之前的位置 + 情况2   </p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 上午9.13.50.png\" alt=\"截屏2021-10-12上午9.13.50\" style=\"zoom: 50%;\" />\n\n<p>情况4：2 -&gt; 1（无互斥）</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220412201004137.png\" alt=\"image-20220412201004137\" style=\"zoom:50%;\" />\n\n<p>情况5：2-&gt;1（Number.class &#x2F; this 无互斥）</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 上午9.18.48.png\" alt=\"截屏2021-10-12上午9.18.48\" style=\"zoom: 50%;\" />\n\n<p>情况6：1s 1 -&gt;2  或 2 -&gt; 1s 1</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 上午9.18.48.png\" alt=\"截屏2021-10-12上午9.18.48\" style=\"zoom: 50%;\" />\n\n<p>情况7：2  -&gt; 1s 1</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 上午9.21.52.png\" alt=\"截屏2021-10-12上午9.21.52\" style=\"zoom: 50%;\" />\n\n<p>情况8：1s 1 -&gt; 2  或 2 -&gt; 1s 1</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 上午9.23.13.png\" alt=\"截屏2021-10-12上午9.23.13\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"变量的线程安全分析\"><a href=\"#变量的线程安全分析\" class=\"headerlink\" title=\"变量的线程安全分析\"></a>变量的线程安全分析</h3><h4 id=\"成员变量和静态变量是否线程安全？\"><a href=\"#成员变量和静态变量是否线程安全？\" class=\"headerlink\" title=\"成员变量和静态变量是否线程安全？\"></a>成员变量和静态变量是否线程安全？</h4><ul>\n<li>如果它们没有共享，则线程安全</li>\n<li>如果它们被共享了，根据它们的状态能否改变，又分为两种情况<ul>\n<li>如果只有读操作，则线程安全</li>\n<li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"局部变量是否线程安全？\"><a href=\"#局部变量是否线程安全？\" class=\"headerlink\" title=\"局部变量是否线程安全？\"></a>局部变量是否线程安全？</h4><ul>\n<li>局部变量是线程安全的</li>\n<li>局部变量引用的对象未必安全<ul>\n<li>如果该对象没有逃离方法的作用访问，它是线程安全的</li>\n<li>如果该对象逃离方法的作用范围，需要考虑线程安全</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常见的线程安全类\"><a href=\"#常见的线程安全类\" class=\"headerlink\" title=\"常见的线程安全类\"></a>常见的线程安全类</h4><ul>\n<li>String</li>\n<li>Integer</li>\n<li>StringBuffer</li>\n<li>Random</li>\n<li>Vector</li>\n<li>Hashtable</li>\n<li>java.util.concurrent 下的类</li>\n</ul>\n<p>这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为：</p>\n<ul>\n<li>它们每个方法是原子的</li>\n<li><strong>注意它们多个方法的组合不是原子的</strong>，见后面分析</li>\n</ul>\n<h5 id=\"线程安全类方法的组合\"><a href=\"#线程安全类方法的组合\" class=\"headerlink\" title=\"线程安全类方法的组合\"></a>线程安全类方法的组合</h5><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 上午10.35.11.png\" alt=\"截屏2021-10-12上午10.35.11\" style=\"zoom:50%;\" />\n\n<h5 id=\"不可变类线程安全型\"><a href=\"#不可变类线程安全型\" class=\"headerlink\" title=\"不可变类线程安全型\"></a>不可变类线程安全型</h5><p>String、Integer 等都是不可变类，因为其内部的状态不可变，因此他们的方法都是线程安全的。</p>\n<p>对于 replace、subsring 等方法都是在其中生成了新的对象返回。</p>\n<h4 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例1</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/ZtSRRm.png\" alt=\"ZtSRRm\" style=\"zoom:50%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例2</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/nTOLs2.png\" alt=\"nTOLs2\" style=\"zoom:50%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例3</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/inzWNd.png\" alt=\"inzWNd\" style=\"zoom:50%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例4</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/7IM7iB.png\" alt=\"7IM7iB\" style=\"zoom: 33%;\" />\n\n \n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例5</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/gSmjxq.png\" alt=\"gSmjxq\" style=\"zoom: 33%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例6</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/n8XVBm.png\" alt=\"n8XVBm\" style=\"zoom: 33%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例7</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/cfzPtB.png\" alt=\"cfzPtB\" style=\"zoom: 33%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午2.45.06.png\" alt=\"截屏2021-10-12下午2.45.06\" style=\"zoom: 33%;\" />\n\n\n\n\n\n<h3 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>售票窗口</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>n4<span class=\"token punctuation\">.</span>exercise</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Vector</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.ExerciseSell\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExerciseSell</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 模拟多人买票</span>\n        <span class=\"token class-name\">TicketWindow</span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TicketWindow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 所有线程的集合</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">></span></span> threadList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 卖出的票数统计</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> amountList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 买票</span>\n                <span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">sell</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 统计买票数</span>\n                amountList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            threadList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">:</span> threadList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 统计卖出的票数和剩余票数</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"余票：&#123;&#125;\"</span><span class=\"token punctuation\">,</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"卖出的票数：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> amountList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Random 为线程安全</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 随机 1~5</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 售票窗口</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TicketWindow</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TicketWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 获取余票数量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 售票，注意这里的 synchronized</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sell</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">>=</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itcast<span class=\"token punctuation\">.</span>n4<span class=\"token punctuation\">.</span>exercise</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.ExerciseTransfer\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExerciseTransfer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Account</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Account</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                a<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token function\">randomAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                b<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">randomAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 查看转账2000次后的总金额</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Random 为线程安全</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 随机 1~100</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">randomAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 账户</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> money<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMoney</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 转账,注意这里的 synchronized</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">>=</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMoney</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                target<span class=\"token punctuation\">.</span><span class=\"token function\">setMoney</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"Monitor-概念\"><a href=\"#Monitor-概念\" class=\"headerlink\" title=\"Monitor 概念\"></a>Monitor 概念</h3><h4 id=\"Java-对象头\"><a href=\"#Java-对象头\" class=\"headerlink\" title=\"Java 对象头\"></a>Java 对象头</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午4.45.28.png\" alt=\"截屏2021-10-12下午4.45.28\" style=\"zoom: 33%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午4.48.08.png\" alt=\"截屏2021-10-12下午4.48.08\" style=\"zoom: 33%;\" />\n\n<h4 id=\"Monitor（重量级锁）\"><a href=\"#Monitor（重量级锁）\" class=\"headerlink\" title=\"Monitor（重量级锁）\"></a>Monitor（重量级锁）</h4><p>Monitor被翻译为<strong>监视器</strong>或<strong>管程</strong>，由操作系统提供。</p>\n<p>每个Java对象都可以关联一个Monitor对象，如果使用 synchronized 给对向上锁（重量级）之后，该对象头的Mark Word中就被设置指向Monitor对象的指针</p>\n<p>Monitor结构如下</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午4.52.10.png\" alt=\"截屏2021-10-12下午4.52.10\" style=\"zoom:50%;\" />\n\n<ul>\n<li>刚开始 Monitor 中 Owner 为 null</li>\n<li>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor 中只能有一个 Owner</li>\n<li>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj) ，就会进入 EntryList 从而变为BLOCKED状态</li>\n<li>Thread-2 执行完同步代码块中的内容，然后唤醒 EntryList 中等带的线程来竞争锁。</li>\n<li>图中的 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但不满足进入 WAITING 状态的线程，后面将 wait-notify 时会分析</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>synchronized 必须是进入同一个对象的Monitor才有上述效果</li>\n<li>不加 synchronized 的对象不会关联监视器，不遵从以上规则</li>\n</ul>\n<h4 id=\"synchronized-字节码\"><a href=\"#synchronized-字节码\" class=\"headerlink\" title=\"synchronized 字节码\"></a>synchronized 字节码</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.06.05.png\" alt=\"截屏2021-10-12下午5.06.05\" style=\"zoom:50%;\" />\n\n<p>后面是异常解锁相关字节码</p>\n<h4 id=\"synchronized-原理-※\"><a href=\"#synchronized-原理-※\" class=\"headerlink\" title=\"synchronized 原理 ※\"></a>synchronized 原理 ※</h4><h5 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h5><p>轻量级锁的使用场景：如果一个对象有多个线程访问，但线程访问的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化。</p>\n<p>轻量级锁对使用者是透明的，语法仍然是 synchronized</p>\n<p>假设有两个同步块，利用一个对象加锁</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.21.47.png\" alt=\"截屏2021-10-12下午5.21.47\" style=\"zoom:50%;\" />\n\n<ul>\n<li>创建锁记录（Lock Record）对象，每个线程的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.37.16.png\" alt=\"截屏2021-10-12下午5.37.16\" style=\"zoom:50%;\" />\n\n<ul>\n<li>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的Mark Word，将 Mark Wrod 的值存入锁记录</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.40.49.png\" alt=\"截屏2021-10-12下午5.40.49\" style=\"zoom:50%;\" />\n\n<ul>\n<li>如果 cas 替换成功，对象头中存储了 <strong>锁记录地址和状态 00</strong>，表示由该线程给对象加上<strong>轻量级锁</strong></li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.43.01.png\" alt=\"截屏2021-10-12下午5.43.01\" style=\"zoom:50%;\" />\n\n<ul>\n<li>如果 cas 替换失败，有两种情况<ul>\n<li>如果是其他线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入<strong>锁膨胀</strong>过程</li>\n<li>如果是自己执行了 synchronized 锁重入，那么再添一条 Lock Record 作为重入的计数</li>\n</ul>\n</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.46.11.png\" alt=\"截屏2021-10-12下午5.46.11\" style=\"zoom:50%;\" />\n\n<ul>\n<li>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.48.29.png\" alt=\"截屏2021-10-12下午5.48.29\" style=\"zoom:50%;\" />\n\n<ul>\n<li>当退出 synchronized 代码块时（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头<ul>\n<li>成功，则解锁成功</li>\n<li>失败，说明轻量级锁进行了锁膨胀已经升级为重量级锁，进入重量级锁解锁流程</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"锁膨胀\"><a href=\"#锁膨胀\" class=\"headerlink\" title=\"锁膨胀\"></a>锁膨胀</h5><p>如果在尝试加轻量级锁的过程中，CAS操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争力），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p>\n<ul>\n<li>当 Thread-1 进行轻量级加锁时，Thread-0已经对该对象加了轻量级锁</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.54.19.png\" alt=\"截屏2021-10-12下午5.54.19\" style=\"zoom:50%;\" />\n\n<ul>\n<li>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程<ul>\n<li>即为 Object 对象申请Monitor锁，让Object指向重量级锁地址</li>\n<li>然后自己进入Monitor的EntryList BLOCKED</li>\n</ul>\n</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午5.59.44.png\" alt=\"截屏2021-10-12下午5.59.44\" style=\"zoom:50%;\" />\n\n<ul>\n<li>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中BLOCKED线程</li>\n</ul>\n<h5 id=\"自旋优化\"><a href=\"#自旋优化\" class=\"headerlink\" title=\"自旋优化\"></a>自旋优化</h5><p><strong>重量级锁竞争的时候，还可以使用自旋来进行优化</strong>，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。</p>\n<p>自旋重试成功的情况</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">线程1（CPU1 上）</th>\n<th align=\"center\">对象Mark</th>\n<th align=\"center\">线程2（CPU2 上）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-</td>\n<td align=\"center\">10（重量锁）</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">访问同步块，获取 monitor</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">成功（加锁）</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步代码块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步代码块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">访问同步块，获取 monitor</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步代码块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">自旋重试</td>\n</tr>\n<tr>\n<td align=\"center\">执行完毕</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">自旋重试</td>\n</tr>\n<tr>\n<td align=\"center\">成功（解锁）</td>\n<td align=\"center\">01（无锁）</td>\n<td align=\"center\">自旋重试</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">成功（加锁）</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">执行同步块</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">…</td>\n<td align=\"center\">…</td>\n</tr>\n</tbody></table>\n<p>自旋重试失败的情况</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">线程1（CPU1 上）</th>\n<th align=\"center\">对象Mark</th>\n<th align=\"center\">线程2（CPU2 上）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-</td>\n<td align=\"center\">10（重量锁）</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">访问同步块，获取 monitor</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">成功（加锁）</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步代码块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">访问同步块，获取 monitor</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">自旋重试</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">自旋重试</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">自旋重试</td>\n</tr>\n<tr>\n<td align=\"center\">执行同步块</td>\n<td align=\"center\">10（重量锁）重量锁指针</td>\n<td align=\"center\">阻塞</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">…</td>\n<td align=\"center\">…</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</li>\n<li>自旋会占用CPU时间，单核CPU自旋就是浪费，多核CPU自旋才能发挥优势。</li>\n<li>Java7之后不能控制是否开启自旋功能</li>\n</ul>\n<h5 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h5><p><strong>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行CAS操作。</strong></p>\n<p>Java6中引入了偏向锁来做进一步优化：<strong>只有第一次使用CAS将线程ID设置到对象的Mark Word头</strong>，之后发现这个线程ID是自己的就表示没有竞争，不用重新CAS。以后只要不发生竞争，这个对象就归该线程所有。</p>\n<p><strong>偏向锁是对轻量级锁的一种优化。</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午8.25.11.png\" alt=\"截屏2021-10-12下午8.25.11\" style=\"zoom: 33%;\" />\n\n<h6 id=\"偏向状态\"><a href=\"#偏向状态\" class=\"headerlink\" title=\"偏向状态\"></a>偏向状态</h6><p>看一下之前的对象头格式</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午8.26.23.png\" alt=\"截屏2021-10-12下午8.26.23\" style=\"zoom: 33%;\" />\n\n<p>一个对象创建时：</p>\n<ul>\n<li>如果开启了偏向锁（默认开启），那么对象创建后，markword值为 0x05 即最后3位为 101，这时它的 thread、epoch、age都为0</li>\n<li><strong>偏向锁是默认延迟的</strong>，不会在程序启动时立即生效，如果想避免延迟，可以添加VM参数：<code>-XX:BiasedLockingStartupDelay=0</code> 来禁用延迟</li>\n<li>如果没有开启偏向锁，那么对象创建后，markword 值为0x01即最后3位为001（Normal），这时它的hashcode、age都为0，第一次用到hashcode时才会赋值</li>\n<li>禁用偏向锁：<code>-XX:-UseBiasedLocking</code>，另外三种情况也会禁用偏向锁：<ul>\n<li>调用 hashCode( )方法会撤销偏向锁，因为位置不够存放 hashcode。轻量级锁 hashcode 会存放在线程栈帧锁记录里，重量级锁会放在 monitor 对象中</li>\n<li>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</li>\n<li>调用 wait &#x2F; notify（重量级锁专属方法）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"批量重偏向\"><a href=\"#批量重偏向\" class=\"headerlink\" title=\"批量重偏向\"></a>批量重偏向</h5><p><strong>如果对象被多个线程访问，但没有竞争（使用时间不同），这时偏向了线程T1的对象仍有机会重新偏向T2，重偏向会重置对象的Thread ID，这里针对的是一个类的对象</strong></p>\n<p>当撤销偏向锁阈值超过20次后，JVM会这样觉得，我是不是偏向错了呢？于是会在给这些对象加锁时重新偏向至加锁线程</p>\n<p>撤销一个线程的偏向锁20次，会重偏向新线程。 </p>\n<h5 id=\"批量撤销\"><a href=\"#批量撤销\" class=\"headerlink\" title=\"批量撤销\"></a>批量撤销</h5><p>当<strong>撤销</strong>偏向锁阈值超过40次后，JVM会这样觉得，自己却是偏向错了，根本就不该偏向。于是<strong>整个类的所有对象都会变为不可偏向（001-Normal）的</strong>，新建的对象也是不可偏向的。  </p>\n<p><a href=\"https://www.bilibili.com/video/BV16J411h7Rd?p=86&amp;spm_id_from=pageDriver\">https://www.bilibili.com/video/BV16J411h7Rd?p=86&amp;spm_id_from=pageDriver</a></p>\n<h4 id=\"锁消除\"><a href=\"#锁消除\" class=\"headerlink\" title=\"锁消除\"></a>锁消除</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午9.46.28.png\" alt=\"截屏2021-10-12下午9.46.28\" style=\"zoom:50%;\" />\n\n\n\n\n\n<h3 id=\"wait-notify\"><a href=\"#wait-notify\" class=\"headerlink\" title=\"wait  notify\"></a>wait  notify</h3><h4 id=\"原理之-wait-x2F-notify\"><a href=\"#原理之-wait-x2F-notify\" class=\"headerlink\" title=\"原理之 wait&#x2F;notify\"></a>原理之 wait&#x2F;notify</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-12 下午9.50.30.png\" alt=\"截屏2021-10-12下午9.50.30\" style=\"zoom:50%;\" />\n\n<ul>\n<li>Owner 线程发现条件不满足，调用 wait 方法，即可进入 WaitSet变为WAITING状态</li>\n<li>BLOCKED和WAITING的线程都处于【阻塞状态】，不占用CPU时间片</li>\n<li>BLOCKED线程会在Owner线程释放锁时唤醒</li>\n<li>WAITING线程会在Owner线程调用 <code>notify</code> 或 <code>notifyAll</code> 时唤醒，但唤醒后并不意味着立刻获得锁，仍需进入EntryList重新竞争</li>\n</ul>\n<h4 id=\"API-介绍\"><a href=\"#API-介绍\" class=\"headerlink\" title=\"API 介绍\"></a>API 介绍</h4><ul>\n<li>obj.wait( )：让进入 object 监视器的线程到 WaitSet 等待</li>\n<li>obj.notify( ) ：在 object 上正在 WaitSet 等待的线程中挑一个唤醒</li>\n<li>obj.notifyAll( ) ：让 object 上正在 WaitSet 等待的线程全部唤醒</li>\n</ul>\n<p>它们都是线程间协作的手段，都属于 Object 对象的方法。<strong>必须获得此对象的锁</strong>，才能调用这些方法</p>\n<h4 id=\"正确使用姿势\"><a href=\"#正确使用姿势\" class=\"headerlink\" title=\"正确使用姿势\"></a>正确使用姿势</h4><p><strong>sleep( long n )和 wait( long n )的区别</strong></p>\n<ol>\n<li>sleep 是Thread方法，而 wait 是 Object 的方法</li>\n<li>sleep 不需要强制和 synchronized 配合使用，但 wait 需要和 synchronized 一起使用</li>\n<li>sleep 在睡眠同时，不会释放锁对象，但 wait 会释放</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>条件不成立<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// TODO</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 另一个线程</span>\n<span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  lock<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"同步模式之保护性暂停（Guarded-Suspension）\"><a href=\"#同步模式之保护性暂停（Guarded-Suspension）\" class=\"headerlink\" title=\"同步模式之保护性暂停（Guarded Suspension）\"></a>同步模式之保护性暂停（Guarded Suspension）</h4><p><strong>用一个线程等待另一个线程的执行结果</strong></p>\n<ul>\n<li>有一个结果需要从一个线程传递到另一个线程，让他们关联同一个GuardedObject</li>\n<li>如果有结果不断从一个线程到另一个线程，那么可以使用消息队列（见生产者&#x2F;消费者）</li>\n<li>JDK中，<strong>join的实现</strong>、Future的实现，都是基于此模式</li>\n<li>因为要等待另一方的结果，因此归类到同步模式</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-13 上午10.58.29.png\" alt=\"截屏2021-10-13上午10.58.29\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">GuardedObject</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GuardedObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            g<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> download <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                download <span class=\"token operator\">=</span> <span class=\"token class-name\">Downloader</span><span class=\"token punctuation\">.</span><span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                g<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span>download<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">GuardedObject</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> response<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 设置超时时间</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 记录时间</span>\n        <span class=\"token keyword\">long</span> begin <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> passedTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// while 防止虚假唤醒步骤之一（同时代码块内也要做相关处理）</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">long</span> waitTime <span class=\"token operator\">=</span> timeout <span class=\"token operator\">-</span> passedTime<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>waitTime <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 防止虚假唤醒步骤之二：每次醒来等待的最大时间都不同</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          passedTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-13 下午2.50.49.png\" alt=\"截屏2021-10-13下午2.50.49\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Sleeper</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id <span class=\"token operator\">:</span> <span class=\"token class-name\">Mailboxes</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Postman</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span><span class=\"token string\">\"内容\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.People\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">People</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 收信</span>\n        <span class=\"token class-name\">GuardedObject</span> guardedObject <span class=\"token operator\">=</span> <span class=\"token class-name\">Mailboxes</span><span class=\"token punctuation\">.</span><span class=\"token function\">createGuardedObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始收信id：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> guardedObject<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> mail <span class=\"token operator\">=</span> guardedObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到信id：&#123;&#125;，内容:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> guardedObject<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.Postman\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Postman</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Postman</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> mail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mail <span class=\"token operator\">=</span> mail<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 发信</span>\n        <span class=\"token class-name\">GuardedObject</span> guardObject <span class=\"token operator\">=</span> <span class=\"token class-name\">Mailboxes</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGuardObject</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"送信 id:&#123;&#125;, 内容:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> mail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        guardObject<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span>mail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mailboxes</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">GuardedObject</span><span class=\"token punctuation\">></span></span> boxes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">GuardedObject</span> <span class=\"token function\">getGuardObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// TODO 这里有问题</span>\n        <span class=\"token keyword\">return</span> boxes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  \n    <span class=\"token comment\">// 产生 GuardedObject 的唯一 id</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">GuardedObject</span> <span class=\"token function\">createGuardedObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">GuardedObject</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GuardedObject</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// map 线程安全，不需要 synchronized</span>\n        boxes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// map 线程安全，不需要 synchronized</span>\n        <span class=\"token keyword\">return</span> boxes<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GuardedObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 标识 Guarded Object</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GuardedObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> response<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 设置超时时间</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 记录时间</span>\n            <span class=\"token keyword\">long</span> begin <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> passedTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// while 防止虚假唤醒步骤之一（同时代码块内也要做相关处理）</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">long</span> waitTime <span class=\"token operator\">=</span> timeout <span class=\"token operator\">-</span> passedTime<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>waitTime <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 防止虚假唤醒步骤之二：每次醒来等待的时间都不同</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                passedTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"异步模式之生产者-x2F-消费者\"><a href=\"#异步模式之生产者-x2F-消费者\" class=\"headerlink\" title=\"异步模式之生产者 &#x2F; 消费者\"></a>异步模式之生产者 &#x2F; 消费者</h4><ul>\n<li><strong>与前面的保护性暂停中的 GuardObject 不同，不需要产生结果和消费结果的线程一一对应</strong></li>\n<li>消费队列可以用来平衡生产和消费的线程资源</li>\n<li>生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果</li>\n<li>消息队列是由容量限制的，满时不会再加入数据，空时不会再消耗数据</li>\n<li>JDK 中各种阻塞队列，采用的就是这种模式</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-13 下午3.41.05.png\" alt=\"截屏2021-10-13下午3.41.05\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.Test1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">MessageQueue</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> finalI <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span>finalI<span class=\"token punctuation\">,</span> <span class=\"token string\">\"值\"</span> <span class=\"token operator\">+</span> finalI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"生产者\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Sleeper</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 消息队列类，java 线程之间通信</span>\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.M\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageQueue</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 队列集合、容量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 取消息</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Message</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 检查队列是否为空</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队列空，消费线程等待\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    list<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 头部返回，尾部进入</span>\n            <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已消费消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 存消息</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队列满，生产者程等待\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    list<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已生产新的消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"park-amp-unpark\"><a href=\"#park-amp-unpark\" class=\"headerlink\" title=\"park &amp; unpark\"></a>park &amp; unpark</h3><p><strong>基本使用</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 暂停当前线程</span>\n<span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 恢复某个线程的运行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>wait notify notifyAll 必须配合 Object Monitor 一起使用，而 unpark 不必</li>\n<li>park &amp; unpark 是以线程为单位来【阻塞】和【唤醒】线程，而 notify 只能随机唤醒一个等待线程， notifyAll 是唤醒所有等待线程，就不那么【精确】</li>\n<li>park &amp; unpark 可以先 unpark ，而 wait &amp; notify 不能先 notify</li>\n</ul>\n<p><strong>原理</strong></p>\n<p><strong>每一个线程都有自己的一个 Parker 对象，由三部分组成 _counter  _cond _mutex</strong> ，打个比喻</p>\n<ul>\n<li>线程就像一个旅人，Parker 就像他随身携带的背包，条件变量就好比背包中的帐篷，_counter 就好比背包中的备用干粮（0为耗尽，1为充足）</li>\n<li>调用 park 就是要看需不需要停下来歇息<ul>\n<li>如果备用干粮耗尽，那么钻进帐篷休息</li>\n<li>如果备用干粮充足，那么不需要停留，继续前进</li>\n</ul>\n</li>\n<li>调用 unpark，就好比补充干粮<ul>\n<li>如果这时线程还在帐篷，就唤醒让他继续前进</li>\n<li>如果这时线程还在继续运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需要停留继续前进<ul>\n<li>因为背包空间有限，多次调用 unpark 只会补充一份备用干粮</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-13 下午8.43.09.png\" alt=\"截屏2021-10-13下午8.43.09\" style=\"zoom:50%;\" />\n\n<ol>\n<li>当前线程调用 Unsafe.park( ) 方法</li>\n<li>检查 _counter，本情况为0，这时获得 _mutex 互斥锁</li>\n<li>线程进入 _cond 条件变量阻塞</li>\n<li>设置 _counter &#x3D; 0</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-13 下午8.46.55.png\" alt=\"截屏2021-10-13下午8.46.55\" style=\"zoom:50%;\" />\n\n<ol>\n<li>调用 Unsafe.unpark(Thread_0)方法，设置 _counter 为1</li>\n<li>唤醒 _cond 条件变量中的 Thread_0</li>\n<li>Thread_0 恢复运行</li>\n<li>设置 _counter 为0</li>\n</ol>\n<h3 id=\"重新理解线程状态转换\"><a href=\"#重新理解线程状态转换\" class=\"headerlink\" title=\"重新理解线程状态转换\"></a>重新理解线程状态转换</h3><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-11 上午11.36.15.png\" alt=\"截屏2021-10-11上午11.36.15\" style=\"zoom:50%;\" />\n\n <img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-13 下午8.53.08.png\" alt=\"截屏2021-10-13下午8.53.08\" style=\"zoom:50%;\" />\n\n<p>假设有线程 Thread t</p>\n<p><strong>情况1 New –&gt; RUNNABLE</strong></p>\n<ul>\n<li>当调用 t.start( )方法时，由 NEW –&gt; RUNNBALE</li>\n</ul>\n<p><strong>情况2 RUNNABLE &lt;–&gt; WAITING</strong></p>\n<p><em>t 线程</em>用 synchronized(obj) 获得了锁对象后</p>\n<ul>\n<li>调用 obj.wait( ) 方法时，t线程从 RUNNABLE –&gt; WAITING</li>\n<li>调用 obj.notify( ) ，obj.notifyAll( )，t.interrupt( )时<ul>\n<li><strong>竞争锁成功</strong>，t 线程从 WAITING –&gt; RUNNABLE</li>\n<li><strong>竞争锁失败</strong>，t 线程从 WITING –&gt; BLOCKED<ul>\n<li>竞争锁：notifyAll导致</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>情况3 RUNNABLE &lt;–&gt; WAITING</strong></p>\n<ul>\n<li><strong>当前线程</strong>调用 t.join( ) 方法时，<strong>当前线程</strong>从RUNNABLE –&gt; WAITING<ul>\n<li>注意事项<strong>当前线程</strong>在 <strong>t 线程对象</strong>的监视器上等待</li>\n</ul>\n</li>\n<li><strong>t 线程</strong>运行结束，或调用了<strong>当前线程</strong>的 Interrupt( ) 时，<strong>当前线程</strong>从 WAITING –&gt; RUNNABLE</li>\n</ul>\n<p><strong>情况4 RUNNABLE &lt;–&gt; WAITING</strong></p>\n<ul>\n<li>当前线程调用 LockSupport.park( ) 方法会让当前线程从 RUNNABLE –&gt; WAITING</li>\n<li>调用 LockSupport.unpark( 目标线程 )或调用了目标线程的 interrupt( )，会让目标线程从 WAITING –&gt; RUNNABLE</li>\n</ul>\n<p><strong>情况5 RUNNABLE &lt;–&gt; TIMED_WAITING</strong></p>\n<p><strong>t 线程</strong>用 synchronized( obj ) 获取了锁对象后</p>\n<ul>\n<li>调用 obj.wait(long n) 方法时，<strong>t 线程</strong>从RUNNABLE –&gt; TIMED_WAITING</li>\n<li><strong>t 线程</strong>等待时间超过了n毫秒，或调用obj.notify( ), obj.notifyAll( ), t.interrupt( )时<ul>\n<li>竞争锁成功，<strong>t 线程</strong>从 TIMED_WAITING –&gt; RUNNABLE</li>\n<li>竞争锁失败，<strong>t 线程</strong>从 TIMED_WAITING –&gt; BLOCKED</li>\n</ul>\n</li>\n</ul>\n<p><strong>情况6 RUNNABLE &lt;–&gt; TIMED_WAITING</strong></p>\n<ul>\n<li><strong>当前线程</strong>调用 t.join(long n) 方法时，<strong>当前线程</strong>从 RUNNABLE –&gt; TIMED_WAITING<ul>\n<li>注意是 <strong>当前线程</strong> 在 <strong>t 线程对象</strong>的监视器上等待</li>\n</ul>\n</li>\n<li><strong>当前线程</strong>等待时间超过了 n 毫秒，或 <strong>t 线程</strong>运行结束，或调用了当前线程的 interrupt( ) 时，<strong>当前线程</strong>从 TIMED_WAITING –&gt; RUNNABLE</li>\n</ul>\n<p><strong>情况7 RUNNABLE &lt;–&gt; TIMED_WAITING</strong></p>\n<ul>\n<li>当前线程调用 Thread.sleep(long n)，当前线程从 RUNNABLE –&gt; TIMED_WAITING</li>\n<li><strong>当前线程</strong>等待时间超过了 n 毫秒，<strong>当前线程</strong>从TIMED_WAITING –&gt; RUNNABLE</li>\n</ul>\n<p><strong>情况8 RUNNABLE &lt;–&gt; TIMED_WAITING</strong></p>\n<ul>\n<li>当前线程调用 LockSupport.parkNanos(long nanos)或LockSupport.parkUntil(long millis)时，<strong>当前线程</strong>从 RUNNABLE –&gt; TIMED_WAITING</li>\n<li>调用 LockSupport.unpark( 目标线程 )或调用了线程的 interrupt( )，或是等待超时，会让目标线程从TIMED_WAITING –&gt; RUNNABLE</li>\n</ul>\n<p><strong>情况9 RUNNABLE &lt;–&gt; BLOCKED</strong></p>\n<ul>\n<li><strong>t 线程</strong>用 synchronized(obj) 获取了对象锁时如果竞争失败，从RUNNABLE –&gt; BLOCKED</li>\n<li>持有 obj 锁线程的同步代码块执行完毕，会唤醒该对象上所有BLOCKED的线程重新竞争，如果其中 <strong>t 线程</strong>竞争成功，从BLOCKED –&gt; RUNNABLE，其它失败的线程仍然BLOCKED</li>\n</ul>\n<p><strong>情况10 RUNNABLE –&gt; TERMINATED</strong></p>\n<p>当前线程所有代码运行完毕，进入 TERMINATED</p>\n<h3 id=\"多把锁\"><a href=\"#多把锁\" class=\"headerlink\" title=\"多把锁\"></a>多把锁</h3><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-13 下午9.30.05.png\" alt=\"截屏2021-10-13下午9.30.05\" style=\"zoom:50%;\" />\n\n<p>将锁的粒度细分</p>\n<ul>\n<li>好处：可以增强并发度</li>\n<li>坏处：如果一个线程同时获得多把锁，就容易发生死锁</li>\n</ul>\n<h3 id=\"活跃性\"><a href=\"#活跃性\" class=\"headerlink\" title=\"活跃性\"></a>活跃性</h3><h4 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h4><p>t1线程获得A对象锁，接下来想获得B对象的锁<br>t2线程获得B对象锁，接下来想获得A对象的锁</p>\n<h4 id=\"定位死锁\"><a href=\"#定位死锁\" class=\"headerlink\" title=\"定位死锁\"></a>定位死锁</h4><ul>\n<li>jconsole &#x2F; jps -&gt; jstack</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDeadLock</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Chopstick</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Chopstick</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Chopstick</span> c3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Chopstick</span> c4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Chopstick</span> c5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苏格拉底\"</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柏拉图\"</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"亚里士多德\"</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">,</span> c4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赫拉克利特\"</span><span class=\"token punctuation\">,</span> c4<span class=\"token punctuation\">,</span> c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"阿基米德\"</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.Philosopher\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Philosopher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Chopstick</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Chopstick</span> right<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Chopstick</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Chopstick</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//　尝试获得左手筷子</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 尝试获得右手筷子</span>\n                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eating...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Sleeper</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"筷子&#123;\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"活锁\"><a href=\"#活锁\" class=\"headerlink\" title=\"活锁\"></a>活锁</h4><p>活锁出现在两个线程相互改变对方的结束条件，最后谁也无法结束，</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-14 上午8.03.05.png\" alt=\"截屏2021-10-14上午8.03.05\" style=\"zoom:50%;\" />\n\n<h4 id=\"饥饿\"><a href=\"#饥饿\" class=\"headerlink\" title=\"饥饿\"></a>饥饿</h4><p>由于优先级太低，始终得不到CPU调度执行，也不能够结束</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>相对于 synchronized 它具备如下特点</p>\n<ul>\n<li>可中断</li>\n<li>可以设置超时时间</li>\n<li>可以设置为公平锁</li>\n<li>支持多个条件变量</li>\n</ul>\n<p>与 synchronized 一样，都支持可重入</p>\n<p><strong>基本语法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取锁</span>\nreentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 临界区</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 释放锁</span>\n  reentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"可重入\"><a href=\"#可重入\" class=\"headerlink\" title=\"可重入\"></a>可重入</h4><p>同一个线程如果首次获得了这把锁，那么因为它是这把锁的持有者，因此有权利再次获取这把锁。如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in m1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in m2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"可打断\"><a href=\"#可打断\" class=\"headerlink\" title=\"可打断\"></a>可打断</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.001\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test001</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"尝试获取锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有获得锁，返回\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取到锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Sleeper</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打断 t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"锁超时\"><a href=\"#锁超时\" class=\"headerlink\" title=\"锁超时\"></a>锁超时</h4><p>立刻失败</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"尝试获得锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取不到锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取不到锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获得到锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获得到锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"释放了锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"哲学家问题的改进\"><a href=\"#哲学家问题的改进\" class=\"headerlink\" title=\"* 哲学家问题的改进\"></a>* 哲学家问题的改进</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDeadLock</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Chopstick</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Chopstick</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Chopstick</span> c3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Chopstick</span> c4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Chopstick</span> c5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苏格拉底\"</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柏拉图\"</span><span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"亚里士多德\"</span><span class=\"token punctuation\">,</span> c3<span class=\"token punctuation\">,</span> c4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赫拉克利特\"</span><span class=\"token punctuation\">,</span> c4<span class=\"token punctuation\">,</span> c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"阿基米德\"</span><span class=\"token punctuation\">,</span> c5<span class=\"token punctuation\">,</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.Philosopher\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Philosopher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Chopstick</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Chopstick</span> right<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Philosopher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Chopstick</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Chopstick</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                            right<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                   left<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eating...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Sleeper</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Chopstick</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReentrantLock</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Chopstick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"筷子&#123;\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h4><p>ReentrantLock 默认是不公平的，但是公平锁一般没有必要，会降低并发度</p>\n<h4 id=\"条件变量\"><a href=\"#条件变量\" class=\"headerlink\" title=\"条件变量\"></a>条件变量</h4><p>synchronized 中也有条件变量，就是我们所讲的那个 WaitSet 休息室，当条件不满足时进入 WaitSet 等待；Reentrantock 的条件变量比 synchronized 强大之处在于，它是支持多个条件变量的，这就好比</p>\n<ul>\n<li>synchronized 是那些不满足条件的线程都在一间休息室等待消息</li>\n<li>ReentrantLock 支持多件休息室，有专门等烟的休息室、专门早餐的休息室、唤醒时也是按照休息室来唤醒</li>\n</ul>\n<p>使用流程 await( ) </p>\n<ul>\n<li>前需要获得锁</li>\n<li>执行后，会释放锁</li>\n<li>执行方法的线程被唤醒（或打断、超时）取重新竞争 lock 锁</li>\n<li>竞争 lock 锁成功后，从 await 后继续执行</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.Test24\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test24</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> room <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> hasCigarette <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> hasTakeout <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">ReentrantLock</span> <span class=\"token constant\">ROOM</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 等待烟的休息室</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> waitCigaretteSet <span class=\"token operator\">=</span> <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 等外卖的休息室</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> waitTakeoutSet <span class=\"token operator\">=</span> <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"有烟没？[&#123;&#125;]\"</span><span class=\"token punctuation\">,</span> hasCigarette<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasCigarette<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没烟，先歇会！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                        waitCigaretteSet<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"可以开始干活了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小南\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外卖送到没？[&#123;&#125;]\"</span><span class=\"token punctuation\">,</span> hasTakeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasTakeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没外卖，先歇会！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                        waitTakeoutSet<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"可以开始干活了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小女\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                hasTakeout <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                waitTakeoutSet<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"送外卖的\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                hasCigarette <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                waitCigaretteSet<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token constant\">ROOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"送烟的\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"同步模式之顺序控制\"><a href=\"#同步模式之顺序控制\" class=\"headerlink\" title=\"同步模式之顺序控制\"></a>同步模式之顺序控制</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>顺序运行</strong></p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方式之一：wait/notify</span>\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.002\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test002</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> t2runned <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t2runned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                        lock<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1 running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2 running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                t2runned <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                lock<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方式之二：park/unpark</span>\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.002\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test002</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2 running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>交替执行</strong></p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方式之一：wait/notifyAll</span>\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.002\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WaitNotify</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 等待标记 1-a-2 2-b-3 3-c-1</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 循环次数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> loopNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WaitNotify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> loopNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loopNumber <span class=\"token operator\">=</span> loopNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> waitFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nextFlag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loopNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token operator\">!=</span>waitFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                flag <span class=\"token operator\">=</span> nextFlag<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 唤醒所有线程</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">WaitNotify</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WaitNotify</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            w<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            w<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            w<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方式之二：ReentrantLock - Condition</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AwaitSignal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> loopNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AwaitSignal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> loopNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loopNumber <span class=\"token operator\">=</span> loopNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span><span class=\"token class-name\">Condition</span> current<span class=\"token punctuation\">,</span><span class=\"token class-name\">Condition</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loopNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                next<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"003\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test003</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">AwaitSignal</span> awaitSignal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AwaitSignal</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Condition</span> a <span class=\"token operator\">=</span> awaitSignal<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Condition</span> b <span class=\"token operator\">=</span> awaitSignal<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Condition</span> c <span class=\"token operator\">=</span> awaitSignal<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            awaitSignal<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            awaitSignal<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            awaitSignal<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        awaitSignal<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            a<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            awaitSignal<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 方式之三：park/unpark</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ParkUnpark</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> loopNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ParkUnpark</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> loopNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loopNumber <span class=\"token operator\">=</span> loopNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loopNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"004\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test004</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Thread</span> t1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Thread</span> t2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Thread</span> t3<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ParkUnpark</span> pu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ParkUnpark</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            pu<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            pu<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>t3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            pu<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"共享模型之内存\"><a href=\"#共享模型之内存\" class=\"headerlink\" title=\"共享模型之内存\"></a>共享模型之内存</h3><p>上一章讲解的Monitro主要关注的是访问共享变量时，保证临界区代码的原子性。这一章我深入学习共享变量在多线程间的【可见性】问题与多条指令执行时的【有序性】问题</p>\n<h3 id=\"Java-内存模型\"><a href=\"#Java-内存模型\" class=\"headerlink\" title=\"Java 内存模型\"></a>Java 内存模型</h3><p>JMM 即 Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等。</p>\n<p>JMM体现在以下几个方面</p>\n<ul>\n<li><strong>原子性</strong>：保证指令不会受到线程上下文切换的影响</li>\n<li><strong>可见性</strong>：保证指令不会受CPU缓存的影响</li>\n<li><strong>有序性</strong>：保证指令不会受CPU指令并行优化的影响</li>\n</ul>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><h4 id=\"退不出的循环\"><a href=\"#退不出的循环\" class=\"headerlink\" title=\"退不出的循环\"></a>退不出的循环</h4><p>先来看一个现象，main 线程对 run 变量的修改对于 t 线程不可见，导致了 t线程无法停止：</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-14 下午8.50.41.png\" alt=\"截屏2021-10-14下午8.50.41\" style=\"zoom:50%;\" />\n\n<p><strong>为什么？原因如下：</strong></p>\n<ol>\n<li>初始状态，t 线程刚开始从主存中读取了 run 的值到工作内存</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-14 下午8.52.16.png\" alt=\"截屏2021-10-14下午8.52.16\" style=\"zoom: 33%;\" />\n\n<ol start=\"2\">\n<li>因为 t 线程要频繁从主存中读取 run 的值，JIT编译器会将 run 的值缓存至自己工作内存中的高速缓存中，减少对主存 run 的访问，提高效率</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-14 下午8.54.26.png\" alt=\"截屏2021-10-14下午8.54.26\" style=\"zoom: 33%;\" />\n\n<ol start=\"3\">\n<li>1s之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量的值，结果永远是旧值</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-14 下午8.55.05.png\" alt=\"截屏2021-10-14下午8.55.05\" style=\"zoom:33%;\" />\n\n<p><strong>解决方法</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>方式之一</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 易变 volatile</span>\n<span class=\"token comment\">// 它可以用来修饰[成员变量]和[静态成员]变量，避免从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作volatile变量都是直接操作主存</span>\n<span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> run <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> \n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>方式之二</p></blockquote>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-14 下午9.01.18.png\" alt=\"截屏2021-10-14下午9.01.18\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"可见性-vs-原子性\"><a href=\"#可见性-vs-原子性\" class=\"headerlink\" title=\"可见性 vs 原子性\"></a>可见性 vs 原子性</h4><p>前面的例子体现的实际就是可见性，它保证的是多个线程之间，一个线程对 volatile 变量的修改对另外一个线程可见，不能保证原子性，仅用在一个写线程，多个读线程的情况。</p>\n<p>字节码理解：</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-14 下午9.05.32.png\" alt=\"截屏2021-10-14下午9.05.32\" style=\"zoom: 50%;\" />\n\n<p>比较之前举的线程安全的例子：两个线程一个 i++ 一个 i–,只能保证看到最新值，不能解决指令交错</p>\n<p><strong>注意：</strong></p>\n<p>synchronized 语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。但缺点是 synchronized 是属于重量级操作，性能相对更低。</p>\n<p>如果在前面示例的死循环中加入 System.out.println( ) 会发现即使不加 volatile 修饰符，线程 t 也能正确看到对 run 变量修改了，那么因为其源码中有使用 synchronized 关键字</p>\n<h4 id=\"终止模式之两阶段终止模式-改进-amp-犹豫模式\"><a href=\"#终止模式之两阶段终止模式-改进-amp-犹豫模式\" class=\"headerlink\" title=\"终止模式之两阶段终止模式 - 改进 &amp; 犹豫模式\"></a>终止模式之两阶段终止模式 - 改进 &amp; 犹豫模式</h4><p>Balking（犹豫）模式用在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做了，直接结束返回</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.005\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoPhraseTermination</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> stop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> starting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 犹豫模式改进</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Thread</span> monitorThread<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">////// 犹豫模式改进 ////////</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>starting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            starting <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">////// 犹豫模式改进 ////////</span>\n        monitorThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"料理后事\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行监控记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"monitor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        monitorThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        monitorThread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TwoPhraseTermination</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TwoPhraseTermination</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停止监控\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"Balking-应用\"><a href=\"#Balking-应用\" class=\"headerlink\" title=\"Balking 应用\"></a>Balking 应用</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MonitorService</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> stop<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> starting<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Thread</span> monitorThread<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 缩小同步范围，提升性能</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该监控线程已启动?(&#123;&#125;)\"</span><span class=\"token punctuation\">,</span> starting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>starting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            starting <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 由于之前的 balking 模式，以下代码只可能被一个线程执行，因此无需互斥</span>\n        monitorThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 这里的监控线程只可能启动一个，因此只需要用 volatile 保证 starting 的可见性</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监控线程已停止...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            starting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        stop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监控线程已启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        monitorThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> seconds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 不加打断需要等到下一次 sleep 结束才能退出循环，这里是为了更快结束</span>\n        monitorThread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它经常用来实现线程安全的单例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Sigleton</span> <span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INSTANCE</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    \t<span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t  <span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对比一下保护性暂停模式：保护性暂停模式用于在一个线程等待另一个线程的执行结果，当条件不满足时线程等待。</p>\n<h3 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h3><p>JVM会在不影响正确性的前提下，可以调整语句的执行顺序，思考下面一段代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在某个线程内执行如下赋值操作</span>\ni <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\nj <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，至于是先执行 i 还是 j，对最终的结果不会产生影响。所以，上面代码真正执行时，可以使</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">i <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\nj <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//  或  //</span>\nj <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种特性称之为【指令重排】，多线程下【指令重排】会影响正确性，为什么要有指令重排这项优化呢？可以从CPU执行指令的原理来理解。</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-14 下午9.58.54.png\" alt=\"截屏2021-10-14下午9.58.54\" style=\"zoom:50%;\" />\n\n\n\n<h5 id=\"原理之-volatile\"><a href=\"#原理之-volatile\" class=\"headerlink\" title=\"原理之 volatile\"></a>原理之 volatile</h5><p>volatile 的底层原理是<strong>内存屏障（Memory Barrier&#x2F;Fence）</strong></p>\n<ul>\n<li>对 volatile 变量的<strong>写指令后</strong>会加入写屏障</li>\n<li>对 volatile 变量的<strong>读指令前</strong>会加入读屏障</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220725182205283.png\" alt=\"image-20220725182205283\"></p>\n<h5 id=\"如何保证可见性\"><a href=\"#如何保证可见性\" class=\"headerlink\" title=\"如何保证可见性\"></a>如何保证可见性</h5><ul>\n<li><p>写屏障（sfence）保证在该写屏障之前的，对共享变量的改动，都同步到主存当中</p>\n</li>\n<li><p>&#96;&#96;&#96;java<br>public void actor2(I_Result r){<br>  num &#x3D; 2;<br>  ready &#x3D; true; &#x2F;&#x2F; ready是 volatile 赋值带写屏障<br>}</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- 而读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据\n\n- &#96;&#96;&#96;java\n  public void actor1(I_Result r)&#123;\n    &#x2F;&#x2F; 读屏障\n    &#x2F;&#x2F; ready 是 volatile 读取值带读屏障\n    if(ready)&#123;\n      r.r1 &#x3D; num + num;\n    &#125;else&#123;\n      r.r1 &#x3D; 1;\n    &#125;\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h5 id=\"Double-check-locking-问题\"><a href=\"#Double-check-locking-问题\" class=\"headerlink\" title=\"Double-check locking 问题\"></a>Double-check locking 问题</h5><p>以著名的 double-check locking 单例模式为例</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 上午10.24.39.png\" alt=\"截屏2021-10-15上午10.24.39\" style=\"zoom:50%;\" />\n\n<p>以上的实现特点是：</p>\n<ul>\n<li>懒惰实例化</li>\n<li>首次使用 getInstacne( ) 才使用 synchronized 加锁，后续使用时无需加锁</li>\n<li>有隐含的，但很关键的一点：第一个if使用了INSTANCE变量，是在同步块之外</li>\n</ul>\n<p>但在多线程环境下，以上代码是有问题的，getInstance方法对应的字节码如下：</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 上午10.30.05.png\" alt=\"截屏2021-10-15上午10.30.05\" style=\"zoom:50%;\" />\n\n<p>其中</p>\n<ul>\n<li>17表示创建对象，将对象引用入栈</li>\n<li>20表示复制一份对象引用</li>\n<li>21表示利用一个对象引用，调用构造方法</li>\n<li>24表示利用一个对象引用，赋值给 static INSTANCE</li>\n</ul>\n<p>也许JVM会优化为：先执行24，再执行21</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 上午10.35.48.png\" alt=\"截屏2021-10-15上午10.35.48\" style=\"zoom:50%;\" />\n\n<p>关键在于：getstatic 这行代码在 monitor 控制之外，它就像之前举例中不守规则的人，可以越过 monitor 读取 INSTANCE 变量的值</p>\n<p>这时 t1 还未完全将构造方法执行完毕，如果在构造方法中要执行很多初始化操作，那么 t2 拿到的将是一个未初始化完毕的单例</p>\n<h5 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h5><p><strong>对 INSTANCE 使用 volatile 修饰即可，可以禁用指令重排，但要注意在JDK5以上的版本 volatile 才会真正有效</strong></p>\n<h4 id=\"hanppens-before\"><a href=\"#hanppens-before\" class=\"headerlink\" title=\"hanppens-before\"></a>hanppens-before</h4><p>hanppens-before 规定了对共享变量的写操作对其他线程的读操作可见，它是可见性与有序性的一套规则总结，抛开以下 happens-before 规则，JMM并不能保证一个线程对共享变量的写，对于其它线程对该共享变量的读可见</p>\n<ul>\n<li>线程解锁 m 之前对变量的写，对于接下来对 m 加锁的其它线程对该变量</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>线程对 volatile 变量的写，对接下来其它线程对该变量的读可见</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 上午10.59.33.png\" alt=\"截屏2021-10-15上午10.59.33\" style=\"zoom:50%;\" />\n\n<ul>\n<li>线程 start 前对变量的写，对该线程开始后对该变量的读可见</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 上午11.03.03.png\" alt=\"截屏2021-10-15上午11.03.03\" style=\"zoom:50%;\" />\n\n<ul>\n<li>线程结束前对变量的写，对其他线程得知它结束后的读可见（比如其它线程调用 t1.isAlive( ) 或 t1.join( ) 等待它结束）</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 上午11.03.26.png\" alt=\"截屏2021-10-15上午11.03.26\" style=\"zoom:50%;\" />\n\n<ul>\n<li>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对变量的读可见（通过t2.interrupted &#x2F; t2.isInterrupted）</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 上午11.06.06.png\" alt=\"截屏2021-10-15上午11.06.06\" style=\"zoom: 33%;\" />\n\n<ul>\n<li>对变量默认值（0, false, null）的写，对其它线程对该变量的读可见</li>\n<li>具有传递性，如果 x hb -&gt; y 并且 y hb -&gt; z 那么有 x hb -&gt; z ，配合 volatile 的防指令重排，有下面的例子</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n  y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// x = 20 对 t2 可见，同时 y=10 也对 t2 可见</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"习题-1\"><a href=\"#习题-1\" class=\"headerlink\" title=\"习题\"></a>习题</h3><h4 id=\"balking-模式习题\"><a href=\"#balking-模式习题\" class=\"headerlink\" title=\"balking 模式习题\"></a>balking 模式习题</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/PrFP2P.png\" alt=\"PrFP2P\" style=\"zoom:50%;\" />\n\n<h4 id=\"线程安全单例习题\"><a href=\"#线程安全单例习题\" class=\"headerlink\" title=\"线程安全单例习题\"></a>线程安全单例习题</h4><p>单例模式有很多实现方法，饿汉、懒汉、静态内部类、枚举类，试分析每种实现下获取单例对象（即调用 getInstance）时的线程安全，并思考注释中的问题</p>\n<ul>\n<li>饿汉式：类加载就会导致该单实例对象被创建</li>\n<li>懒汉式：类加载不会导致该单实例对象被创建，而是首次使用对象时才会创建</li>\n</ul>\n<p><strong>实现1：</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/x0LU5b.png\" alt=\"x0LU5b\" style=\"zoom:50%;\" />\n\n<p><a href=\"https://www.bilibili.com/video/BV16J411h7Rd?p=155&amp;spm_id_from=pageDriver\">https://www.bilibili.com/video/BV16J411h7Rd?p=155&amp;spm_id_from=pageDriver</a></p>\n<h3 id=\"本章小结-1\"><a href=\"#本章小结-1\" class=\"headerlink\" title=\"本章小结\"></a>本章小结</h3><p>本章重点讲解了JMM中的</p>\n<ul>\n<li>可见性-由JVM缓存优化引起</li>\n<li>有序性-由JVM指令重排优化引起</li>\n<li>happens-before规则</li>\n<li>原理方面<ul>\n<li>CPU指令执行</li>\n<li>volatile</li>\n</ul>\n</li>\n<li>模式方面<ul>\n<li>两阶段终止模式的 volatile 改进</li>\n<li>同步模式之 balking</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"共享模型之无锁\"><a href=\"#共享模型之无锁\" class=\"headerlink\" title=\"共享模型之无锁\"></a>共享模型之无锁</h3><ul>\n<li>CAS 与 volatile</li>\n<li>原子整数</li>\n<li>原子引用</li>\n<li>原子累加器</li>\n<li>Unsafe</li>\n</ul>\n<h3 id=\"CAS-与-volatile\"><a href=\"#CAS-与-volatile\" class=\"headerlink\" title=\"CAS 与 volatile\"></a>CAS 与 volatile</h3><p>前面看到的 AtomicInteger 的解决方法，内部并没有采用锁来保护共享变量的线程安全，那么它是如何实现的？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> prev <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        brea<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  \t<span class=\"token punctuation\">&#125;</span>\n\t  <span class=\"token comment\">//////// ↓↓</span>\n\t\t<span class=\"token comment\">// getAndAdd( -1 * amount );</span>\n    <span class=\"token comment\">////////</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 下午8.22.04.png\" alt=\"截屏2021-10-15下午8.22.04\" style=\"zoom:50%;\" />\n\n<p><strong>注意：</strong></p>\n<p>其实CAS底层是 lock cmpxchg 指令（X86架构），在单核CPU和多核CPU下都能够保证【比较-交换】的原子性</p>\n<ul>\n<li>在多核状态下，某个核执行到 lock 的指令时，CPU会让总线锁住，当这个核把此指令执行完毕，再开启总线。这个过程不会被线程的调度机制所打断，保证了多个线程对内存模型操作的准确性，是原子的。</li>\n</ul>\n<h4 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h4><p>获取共享变量时，为了保证变量的可见性，需要使用 volatile 修饰</p>\n<p>它可以用来修饰成员变量和静态成员变量，可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是直接操作主存。即一个线程对 volatile 变量的修改，对另一个线程可见。</p>\n<p><strong>注意：</strong></p>\n<p>volatile 仅仅保证了共享变量的可见性，让其它线程能够看到最新值，但不能解决指令交错问题（不能保证原子性）</p>\n<p>CAS必须借助 volatile 才能读取到共享变量的最新值来实现【比较并交换】</p>\n<h4 id=\"为什么无锁效率高\"><a href=\"#为什么无锁效率高\" class=\"headerlink\" title=\"为什么无锁效率高\"></a>为什么无锁效率高</h4><ul>\n<li>无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 synchronized 会让线程在没有获得锁的情况下，发生上下文切换，进入阻塞，打个比喻：</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 下午8.32.49.png\" alt=\"截屏2021-10-15下午8.32.49\" style=\"zoom:50%;\" />\n\n<h4 id=\"CAS-特点\"><a href=\"#CAS-特点\" class=\"headerlink\" title=\"CAS 特点\"></a>CAS 特点</h4><p>结合 CAS 和 volatile 可以实现无锁并发，适用于<strong>线程数少、多核CPU</strong>场景下。</p>\n<ul>\n<li>CAS 是基于<strong>乐观锁</strong>的思想：最乐观的估计，不怕别的线程来修改共享变量，就算修改了也没关系，可以尝试。</li>\n<li>synchronized 是基于<strong>悲观锁</strong>的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。</li>\n<li>CAS 体现的是<strong>无锁并发、无阻塞并发</strong><ul>\n<li>因为没有使用 synchronized，所以线程不会陷入阻塞，这是效率提升的关键因素之一</li>\n<li>但如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"原子整数\"><a href=\"#原子整数\" class=\"headerlink\" title=\"原子整数\"></a>原子整数</h3><p>J.U.C并发包提供了：</p>\n<ul>\n<li>AtomicBoolean</li>\n<li>AtomicInteger</li>\n<li>AtomicLong</li>\n</ul>\n<p>以 AtomicInteger 为例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">AtomicInteger</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ni<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ++i   return unsafe.getAndAddInt(this, valueOffset, 1) + 1;</span>\ni<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i++   return unsafe.getAndAddInt(this, valueOffset, 1);</span>\n\ni<span class=\"token punctuation\">.</span><span class=\"token function\">getAndAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ni<span class=\"token punctuation\">.</span><span class=\"token function\">addAndGet</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ni<span class=\"token punctuation\">.</span><span class=\"token function\">updateAndGet</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\ni<span class=\"token punctuation\">.</span><span class=\"token function\">getAndUpdate</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//////////原理///////////////</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> prev <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此处可以改成 IntUnaryOperator的 applyAsInt 方法实现自定义计算</span>\n  \t<span class=\"token comment\">// int next = operator.applyAsInt(prev);</span>\n  \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/////////////////////////////</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"原子引用\"><a href=\"#原子引用\" class=\"headerlink\" title=\"原子引用\"></a>原子引用</h3><ul>\n<li>AtomicReference</li>\n<li>AtomicMarkableReference</li>\n<li>AtomicStampedReference</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 下午9.09.06.png\" alt=\"截屏2021-10-15下午9.09.06\" style=\"zoom:50%;\" />\n\n<p>主线程仅能判断出共享变量的值与最初值A是否相同，不能感知到这种A-&gt;B-&gt;A的改动，如果主线程希望：</p>\n<p>只有有其他线程【动过了】共享变量，那么自己的CAS就算失败，这时，仅比较值是不够的，需要再加一个版本号</p>\n<h4 id=\"AtomicStampedReference\"><a href=\"#AtomicStampedReference\" class=\"headerlink\" title=\"AtomicStampedReference\"></a>AtomicStampedReference</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 下午9.23.06.png\" alt=\"截屏2021-10-15下午9.23.06\" style=\"zoom:50%;\" />\n\n<p>AtomicStampedReference 可以给原子引用加上版本号，追踪原子引用整个变化过程，如：A-&gt;B-&gt;A-&gt;C，通过AtomicStampedReference，我们可以知道，引用变量途中更改了几次。</p>\n<p>但有时候，并不关心引用变量更改了几次，只是单纯地关心<strong>是否更改过</strong>，所以就需要AtomicMarkableReference</p>\n<h4 id=\"AtomicMarkableReference\"><a href=\"#AtomicMarkableReference\" class=\"headerlink\" title=\"AtomicMarkableReference\"></a>AtomicMarkableReference</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-15 下午9.30.23.png\" alt=\"截屏2021-10-15下午9.30.23\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"原子数组\"><a href=\"#原子数组\" class=\"headerlink\" title=\"原子数组\"></a>原子数组</h3><ul>\n<li>AtomicIntegerArray</li>\n<li>AtomicLongArray</li>\n<li>AtomicReferenceArray</li>\n</ul>\n<p>有如下方法</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 上午11.15.25.png\" alt=\"截屏2021-10-16上午11.15.25\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"字段更新器\"><a href=\"#字段更新器\" class=\"headerlink\" title=\"字段更新器\"></a>字段更新器</h3><ul>\n<li>AtomicReferenceFieldUpdater</li>\n<li>AtomicIntegerFieldUpdater</li>\n<li>AtomicLongFieldUpdater</li>\n</ul>\n<p>利用字段更新器，可以针对对象的某个字段（Field）进行原子操作只能配合 volatile 修饰的字段使用，否则会出现异常</p>\n<h3 id=\"原子累加器\"><a href=\"#原子累加器\" class=\"headerlink\" title=\"原子累加器\"></a>原子累加器</h3><ul>\n<li>LongAdder</li>\n<li>DoubleAdder</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 上午11.27.57.png\" alt=\"截屏2021-10-16上午11.27.57\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 上午11.27.38.png\" alt=\"截屏2021-10-16上午11.27.38\" style=\"zoom:50%;\" />\n\n<p>性能提升的原因如下：有竞争时，设置多个累加单元，Thread-0累加Cell[0]，而Thread-1累加Cell[1]…最后将结果汇总，这样他们在累加时操作不同的Cell变量，因此减少了CAS重试失败，从而提高性能</p>\n<h4 id=\"源码之-LongAdder\"><a href=\"#源码之-LongAdder\" class=\"headerlink\" title=\"* 源码之 LongAdder\"></a>* 源码之 LongAdder</h4><p>LongAdder 是并发大师@Author Doug Lea 的作品，设计的非常精巧</p>\n<p>LongAdder 类有几个关键字段</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 累加单元数组，懒惰初始化</span>\n<span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cells<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 基础值，如果没有竞争，则用CAS累加这个字段</span>\n<span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">long</span> base<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在 cells 创建或扩容时，置为1，表示加锁</span>\n<span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> cellsBusy<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>CAS 锁</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 上午11.52.07.png\" alt=\"截屏2021-10-16上午11.52.07\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"原理之伪共享\"><a href=\"#原理之伪共享\" class=\"headerlink\" title=\"*  原理之伪共享\"></a>*  原理之伪共享</h4><p>其中 Cell 即为累加单元</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 防止缓存行为伪共享</span>\n<span class=\"token annotation punctuation\">@sun.misc.Contended</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token keyword\">volatile</span> <span class=\"token keyword\">long</span> value<span class=\"token punctuation\">;</span>\n  \t<span class=\"token class-name\">Cell</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>value <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 重要的方法，用CAS方式进行累加，prev表示旧值，next表示新值</span>\n  \t<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">cas</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> prev<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> vauleOffset<span class=\"token punctuation\">,</span> prev <span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 省略不重要代码</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 下午6.25.35.png\" alt=\"截屏2021-10-16下午6.25.35\" style=\"zoom: 33%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 下午6.25.58.png\" alt=\"截屏2021-10-16下午6.25.58\" style=\"zoom: 33%;\" />\n\n<p>因为CPU与内存的速度差异很大，需要靠预读数据至缓存来提升效率</p>\n<p>而缓存以缓存行为单位，每个缓存行对应着一块内存，一般是64byte（8个long）</p>\n<p>缓存的加入会造成数据副本的产生，即同一份数据会缓存在不同核心的缓存行中</p>\n<p>CPU要保证数据一致性，如果某个CPU核心修改了数据，其它的CPU核心对应的整个缓存行必须失效</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 下午6.31.55.png\" alt=\"截屏2021-10-16下午6.31.55\" style=\"zoom:50%;\" />\n\n<p>因为 Cell 是数组形式，在内存中是连续存储的，一个 Cell 为 24字节（16字节对象头和8字节value），因此缓存行可以存下2个Cell对象。这样问题来了：</p>\n<ul>\n<li>Core-0要修改 Cell[0]</li>\n<li>Core-1要修改 Cell[1]</li>\n</ul>\n<p>无论谁修改成功，都会导致对方的Core缓存行失效。</p>\n<p>@sun.misc.Contended 用来解决这个问题，它的原理是在使用此注解的对象或字段的前后各增加128字节大小的 padding，从而让CPU将对象预读至缓存时占用不同的缓存行，这样，不会造成对方缓存行的失效</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 下午6.39.31.png\" alt=\"截屏2021-10-16下午6.39.31\" style=\"zoom:33%;\" />\n\n<h4 id=\"LongAdder-源码解析\"><a href=\"#LongAdder-源码解析\" class=\"headerlink\" title=\"LongAdder 源码解析\"></a>LongAdder 源码解析</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220412212012703.png\" alt=\"image-20220412212012703\" style=\"zoom:50%;\" />\n\n<p><a href=\"https://www.bilibili.com/video/BV16J411h7Rd?p=180&amp;spm_id_from=pageDriver\">https://www.bilibili.com/video/BV16J411h7Rd?p=180&amp;spm_id_from=pageDriver</a></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// increment 方法为入口</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">////////////////</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> as<span class=\"token punctuation\">;</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Cell</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>as <span class=\"token operator\">=</span> cells<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">casBase</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> base<span class=\"token punctuation\">,</span> b <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">boolean</span> uncontended <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span> as<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> as<span class=\"token punctuation\">[</span><span class=\"token function\">getProbe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span>\n          <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>uncontended <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">cas</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">longAccumulate</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> uncontended<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>![截屏2021-10-16下午6.56.57](<a href=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2021-10-16\">http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16</a> 下午6.56.57.png)</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/Nxe2so.png\" alt=\"Nxe2so\" style=\"zoom:50%;\" />\n\n<p>![截屏2021-10-16下午6.59.40](<a href=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2021-10-16\">http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16</a> 下午6.59.40.png)</p>\n<p>![截屏2021-10-16下午7.16.11](<a href=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2021-10-16\">http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16</a> 下午7.16.11.png)</p>\n<p>![截屏2021-10-16下午7.16.11](<a href=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2021-10-16\">http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16</a> 下午7.16.11.png)</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 下午9.48.52.png\" alt=\"截屏2021-10-16下午9.48.52\" style=\"zoom:50%;\" />\n\n\n\n\n\n<h4 id=\"Unsafe\"><a href=\"#Unsafe\" class=\"headerlink\" title=\"Unsafe\"></a>Unsafe</h4><p>Unsafe 对象提供了非常底层的、操作内存、线程的方法，Unsafe对象不能直接调用，只能通过反射获得。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Field</span> u <span class=\"token operator\">=</span> <span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"theUnsafe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nu<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Unsafe</span> unsafe <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">)</span> u<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//静态成员变量用null</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"Unsafe-CAS-操作\"><a href=\"#Unsafe-CAS-操作\" class=\"headerlink\" title=\"Unsafe CAS 操作\"></a>Unsafe CAS 操作</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取域的偏移地址</span>\n<span class=\"token keyword\">long</span> nameOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">objectFieldOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> ageOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">objectFieldOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 执行cas操作</span>\n<span class=\"token class-name\">Student1</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nunsafe<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>ageOffset<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nunsafe<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> nameOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 验证</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"本章小结-2\"><a href=\"#本章小结-2\" class=\"headerlink\" title=\"本章小结\"></a>本章小结</h3><ul>\n<li>CAS 与 volatile</li>\n<li>API<ul>\n<li>原子整数</li>\n<li>原子引用</li>\n<li>原子数组</li>\n<li>字段更新器</li>\n<li>原子累加器</li>\n</ul>\n</li>\n<li>Unsafe</li>\n<li>原理方面<ul>\n<li>LongAdder 源码</li>\n<li>伪共享</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"-\"></a>-</h3><h3 id=\"共享变量之不可变\"><a href=\"#共享变量之不可变\" class=\"headerlink\" title=\"共享变量之不可变\"></a>共享变量之不可变</h3><h3 id=\"日期转换的问题\"><a href=\"#日期转换的问题\" class=\"headerlink\" title=\"日期转换的问题\"></a>日期转换的问题</h3><h5 id=\"问题提出\"><a href=\"#问题提出\" class=\"headerlink\" title=\"问题提出\"></a>问题提出</h5><p>下面代码在运行时，由于 SimpleDateFormat 不是线程安全的</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sdf<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1951-04-21\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 替换为JDK8的新日期格式化对象 DateTimeFormatter</span>\n<span class=\"token class-name\">DateTimeFormatter</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"不可变设计\"><a href=\"#不可变设计\" class=\"headerlink\" title=\"不可变设计\"></a>不可变设计</h3><p> String 就是一个例子</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-16 下午10.37.39.png\" alt=\"截屏2021-10-16下午10.37.39\" style=\"zoom:50%;\" />\n\n<h4 id=\"final-的使用\"><a href=\"#final-的使用\" class=\"headerlink\" title=\"final 的使用\"></a>final 的使用</h4><p>发现该类、类中所有属性都是 final 的</p>\n<ul>\n<li>属性用 final 修饰保证了该属性是只读的，不能修改</li>\n<li>类用 final 修饰保证了该类中的方法不能覆盖，防止子类无意间破坏不可变性</li>\n</ul>\n<h4 id=\"保护性拷贝\"><a href=\"#保护性拷贝\" class=\"headerlink\" title=\"保护性拷贝\"></a>保护性拷贝</h4><p>通过创建副本对象来避免共享的手段称之为【保护性拷贝】（defensive copy）</p>\n<h3 id=\"享元模式-Flyweight-Pattern\"><a href=\"#享元模式-Flyweight-Pattern\" class=\"headerlink\" title=\"享元模式 Flyweight Pattern\"></a>享元模式 Flyweight Pattern</h3><p>当需要重用数量有限的同一类对象时</p>\n<h4 id=\"体现\"><a href=\"#体现\" class=\"headerlink\" title=\"体现\"></a>体现</h4><p>在JDK中 Boolean、Byte、short、Integer、Long、Character 等包装类提供了 valueOf( )方法，例如Long的valueOf会缓存-128~127之间的Long对象，在这个范围之间会重用对象，大于这个范围，才会创建新的Long对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">128</span> <span class=\"token operator\">&amp;&amp;</span> l <span class=\"token operator\">&lt;=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// will cache</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">LongCache</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>l <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意：</strong></p>\n<ul>\n<li>Btye、Short、Long 缓存范围都是-128~127</li>\n<li>Character 缓存范围是 0~127</li>\n<li>Integer 默认范围是 -128~127，最小值不能变，最大值可以通过调整虚拟机参数 <code>-Djava.lang.Integer.IntegerCache.high</code> 来改变</li>\n<li>Boolean 缓存了 TRUE 和 FALSE</li>\n</ul>\n<h4 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h4><p>例如：一个线上商城应用，QPS达到数千，如果每次都重新创建和关闭数据库连接，性能会受到极大影响。这时预先创建好一批连接，放入连接池。一次请求到达后，从连接池获取连接，使用完毕后再还回连接池，这样既节约了连接的创建和关闭时间，也实现了连接的重用，不至于让庞大的连接数压跨数据库。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Pool</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                pool<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.Pool\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pool</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1. 连接池大小</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> poolSize<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 连接对象数组</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Connection</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> connections<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3. 连接状态数组 0 表示空闲， 1 表示繁忙</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicIntegerArray</span> states<span class=\"token punctuation\">;</span>\n  \n  \t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4. 构造方法初始化</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Pool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> poolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>semaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span>poolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>poolSize <span class=\"token operator\">=</span> poolSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connections <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Connection</span><span class=\"token punctuation\">[</span>poolSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>states <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicIntegerArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>poolSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> poolSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            connections<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 5. 借连接</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> poolSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 获取空闲连接</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"borrow &#123;&#125;\"</span><span class=\"token punctuation\">,</span> connections<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> connections<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 如果没有空闲连接，当前线程进入等待</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 6. 归还连接</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> poolSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connections<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                states<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"free &#123;&#125;\"</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上实现没有考虑：</p>\n<ul>\n<li>连接的动态增长和收缩</li>\n<li>连接保活（可用性检测）</li>\n<li>等待超时处理</li>\n<li>分布式 hash</li>\n</ul>\n<p>对于关系型数据库，有比较成熟的连接池实现，如C3P0、Druid等<br>对于更通用的对象池，可以考虑使用Apache common pool，例如Redis连接池可以参考 jedis 中关于连接池的实现</p>\n<h4 id=\"无状态\"><a href=\"#无状态\" class=\"headerlink\" title=\"无状态\"></a>无状态</h4><p>在web阶段学习时，设计Servlet时为了保证其线程安全，都会有这样的建议，不要为Servlet设置成员变量，<strong>这种没有任何成员变量的类是线程安全的</strong>：因为成员变量保存的数据称为状态信息，因此没有成员变量就称之为【无状态】</p>\n<h3 id=\"final-原理\"><a href=\"#final-原理\" class=\"headerlink\" title=\"final 原理\"></a>final 原理</h3><p><strong>设置 final 变量</strong></p>\n<p>理解了 volatile ，再对比 final 的实现就比较简单了</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestFinal</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>字节码</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-17 上午10.55.10.png\" alt=\"截屏2021-10-17上午10.55.10\" style=\"zoom:50%;\" />\n\n<p>发现 fianl 变量的赋值也会通过 putfield 指令来完成，同样在这条指令之后也会加入写屏障，保证在其他线程读到他的值时不会出现为0的情况</p>\n<h3 id=\"本章小结-3\"><a href=\"#本章小结-3\" class=\"headerlink\" title=\"本章小结\"></a>本章小结</h3><ul>\n<li>不可变类的使用</li>\n<li>不可变类的设计</li>\n<li>原理方面<ul>\n<li>final</li>\n</ul>\n</li>\n<li>模式方面<ul>\n<li>享元模式</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"-\"></a>-</h3><h3 id=\"共享模型之工具\"><a href=\"#共享模型之工具\" class=\"headerlink\" title=\"共享模型之工具\"></a>共享模型之工具</h3><h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><h4 id=\"自定义线程池\"><a href=\"#自定义线程池\" class=\"headerlink\" title=\"自定义线程池\"></a>自定义线程池</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-18 上午8.28.21.png\" alt=\"截屏2021-10-18上午8.28.21\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.TestPool\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestPool</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ThreadPool</span> threadPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 1. 死等</span>\n<span class=\"token comment\">//            queue.put(task);</span>\n            <span class=\"token comment\">// 2) 带超时等待</span>\n<span class=\"token comment\">//            queue.offer(task, 1500, TimeUnit.MILLISECONDS);</span>\n            <span class=\"token comment\">// 3) 让调用者放弃任务执行</span>\n<span class=\"token comment\">//            log.debug(\"放弃&#123;&#125;\", task);</span>\n            <span class=\"token comment\">// 4) 让调用者抛出异常</span>\n<span class=\"token comment\">//            throw new RuntimeException(\"任务执行失败 \" + task);</span>\n            <span class=\"token comment\">// 5) 让调用者自己执行任务</span>\n            task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@FunctionalInterface</span> <span class=\"token comment\">// 拒绝策略</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">RejectPolicy</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.ThreadPool\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPool</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 任务队列</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> taskQueue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 线程集合</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">></span></span> workers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 核心线程数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> coreSize<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取任务时的超时时间</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TimeUnit</span> timeUnit<span class=\"token punctuation\">;</span>\n  \n\t\t<span class=\"token comment\">// 拒绝策略</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RejectPolicy</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> rejectPolicy<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 执行任务</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当任务数没有超过 coreSize 时，直接交给 worker 对象执行</span>\n        <span class=\"token comment\">// 如果任务数超过 coreSize 时，加入任务队列暂存</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>workers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>workers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> coreSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Worker</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新增 worker&#123;&#125;, &#123;&#125;\"</span><span class=\"token punctuation\">,</span> worker<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                workers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                worker<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//                taskQueue.put(task);</span>\n                <span class=\"token comment\">// 1) 死等</span>\n                <span class=\"token comment\">// 2) 带超时等待</span>\n                <span class=\"token comment\">// 3) 让调用者放弃任务执行</span>\n                <span class=\"token comment\">// 4) 让调用者抛出异常</span>\n                <span class=\"token comment\">// 5) 让调用者自己执行任务</span>\n                taskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">tryPut</span><span class=\"token punctuation\">(</span>rejectPolicy<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> coreSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> timeUnit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> queueCapcity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RejectPolicy</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> rejectPolicy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>coreSize <span class=\"token operator\">=</span> coreSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> timeout<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeUnit <span class=\"token operator\">=</span> timeUnit<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>queueCapcity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rejectPolicy <span class=\"token operator\">=</span> rejectPolicy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>task <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 执行任务</span>\n            <span class=\"token comment\">// 1) 当 task 不为空，执行任务</span>\n            <span class=\"token comment\">// 2) 当 task 执行完毕，再接着从任务队列获取任务并执行</span>\n<span class=\"token comment\">//            while(task != null || (task = taskQueue.take()) != null) &#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>task <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">=</span> taskQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">,</span> timeUnit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在执行...&#123;&#125;\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                    task <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>workers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker 被移除&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                workers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"c.BlockingQueue\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1. 任务队列</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2. 锁</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 3. 生产者条件变量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Condition</span> fullWaitSet <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 4. 消费者条件变量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Condition</span> emptyWaitSet <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 5. 容量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capcity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capcity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capcity <span class=\"token operator\">=</span> capcity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 带超时阻塞获取</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 将 timeout 统一转换为 纳秒</span>\n            <span class=\"token keyword\">long</span> nanos <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 返回值是剩余时间</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                  \t<span class=\"token comment\">// nanos每次唤醒后减少->虚假唤醒</span>\n                    nanos <span class=\"token operator\">=</span> emptyWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span>nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">T</span> t <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fullWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 阻塞获取</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    emptyWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">T</span> t <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fullWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 阻塞添加</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> capcity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待加入任务队列 &#123;&#125; ...\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    fullWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加入任务队列 &#123;&#125;\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            emptyWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 带超时时间阻塞添加</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> task<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> timeUnit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">long</span> nanos <span class=\"token operator\">=</span> timeUnit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> capcity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待加入任务队列 &#123;&#125; ...\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    nanos <span class=\"token operator\">=</span> fullWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span>nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加入任务队列 &#123;&#125;\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            emptyWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">tryPut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RejectPolicy</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> rejectPolicy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 判断队列是否满</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> capcity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rejectPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 有空闲</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加入任务队列 &#123;&#125;\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                emptyWaitSet<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"ThreadPoolExcutor\"><a href=\"#ThreadPoolExcutor\" class=\"headerlink\" title=\"ThreadPoolExcutor\"></a>ThreadPoolExcutor</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-18 上午8.39.54.png\" alt=\"截屏2021-10-18上午8.39.54\" style=\"zoom:50%;\" />\n\n<h5 id=\"线程池状态\"><a href=\"#线程池状态\" class=\"headerlink\" title=\"线程池状态\"></a>线程池状态</h5><p>ThreadPoolExcutor 使用 int 的高3位来表示线程池状态，低29位表示线程数量</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">状态名</th>\n<th align=\"center\">高3位</th>\n<th align=\"center\">接收新任务</th>\n<th align=\"center\">处理阻塞队列任务</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">RUNNING</td>\n<td align=\"center\">111</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">SHUTDOWN</td>\n<td align=\"center\">000</td>\n<td align=\"center\">N</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">不会接收新任务，但会处理阻塞队列剩余任务</td>\n</tr>\n<tr>\n<td align=\"center\">STOP</td>\n<td align=\"center\">001</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n<td align=\"center\">会中断正在进行的任务，并抛弃阻塞队列任务</td>\n</tr>\n<tr>\n<td align=\"center\">TIDYING</td>\n<td align=\"center\">010</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">任务全部执行完毕，活动线程为0即将进入中介</td>\n</tr>\n<tr>\n<td align=\"center\">TERMINATED</td>\n<td align=\"center\">001</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">终结状态</td>\n</tr>\n</tbody></table>\n<p>从数字上比较：TERMINATED&gt;TIDYING&gt;STOP&gt;SHUTDOWN&gt;RUNNING</p>\n<p>这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作进行赋值</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-18 上午8.57.38.png\" alt=\"截屏2021-10-18上午8.57.38\" style=\"zoom:50%;\" />\n\n\n\n<h5 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExcutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corPooSize<span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">int</span> maximumPooSize<span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span>\n                        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span>\n                        <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span>\n                        <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span>\n                        <span class=\"token class-name\">RejectedExcutionHandler</span> handler<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>corePoolSize：核心线程数目（最多保留的线程数）</li>\n<li>maximumPoolSize：最大线程数目</li>\n<li>keepAliveTime：生存时间-针对救急线程</li>\n<li>unit：时间单位-针对救急线程</li>\n<li>workQueue：阻塞队列</li>\n<li>threadFactory：线程工厂-可以为线程创建时起个好名字</li>\n<li>handler：拒绝策略</li>\n</ul>\n<p>工作方式：</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-18 上午9.02.14.png\" alt=\"截屏2021-10-18上午9.02.14\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/466603-20200526122234291-1910596320-20220715144359042.png\" alt=\"纠正一个错误\" style=\"zoom: 67%;\" />\n\n<ul>\n<li>如果线程到达 maximumPoolSize 仍然有新任务，这时会执行拒绝策略。JDK提供了四种实现，其他著名框架也提供了实现。<ul>\n<li>AbortPolicy 让调用者抛出 RejectedExecutionException 异常，默认</li>\n<li>CallerRunsPolicy 让调用者运行任务</li>\n<li>DiscardPolicy 放弃本次任务</li>\n<li>DiscardOldestPolicy 放弃队列中最早的任务，本任务取而代之</li>\n<li>Dubbo实现：在抛出 RejectedExecutionException 异常之前会记录日志，并 dump 线程栈信息，方便定位问题。</li>\n<li>Netty实现：创建一个新线程执行任务</li>\n<li>ActiveMQ实现：带超时等待（60s）尝试放入队列</li>\n<li>PinPoint实现：拒绝策略链</li>\n</ul>\n</li>\n<li>当高峰过去后，超过 corePoolSize 的救急线程如果一段时间没有任务做，需要结束节省资源，这个时间由 keepAliveTime 和 unit 来控制。</li>\n</ul>\n<p>根据这个构造方法，JDK Executors 类中提供了众多的工厂方法来创建各种用途的线程池</p>\n<h5 id=\"newFixedThreadPool\"><a href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"></a>newFixedThreadPool</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nThreads<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>nThreads<span class=\"token punctuation\">,</span> nThreads<span class=\"token punctuation\">,</span>\n                                <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                threadFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>核心线程数 &#x3D; 最大线程数（没有救急线程），因此无需超时时间</li>\n<li>阻塞队列是无界的，可以放任意数量的任务</li>\n<li>适用于任务量已知，相对耗时的任务</li>\n</ul>\n<h5 id=\"newCachedThreadPool\"><a href=\"#newCachedThreadPool\" class=\"headerlink\" title=\"newCachedThreadPool\"></a>newCachedThreadPool</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>核心线程数是0，最大线程数是Integer.MAX_VALUE，救急线程的空闲生存时间是60s，意味着：<ul>\n<li>全部线程都是救急线程（60s回收）</li>\n<li>就几线程可以无限创建</li>\n</ul>\n</li>\n<li>队列采用了 SynchronousQueue ，其特点是：没有容量，没有线程来取是放不进去的（放的线程会阻塞）</li>\n<li>整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲1分钟后释放线程。</li>\n<li>适合任务数比较密集，但每个任务执行时间较短的情况</li>\n</ul>\n<h5 id=\"newSingleThreadExecutor\"><a href=\"#newSingleThreadExecutor\" class=\"headerlink\" title=\"newSingleThreadExecutor\"></a>newSingleThreadExecutor</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizableDelegatedExecutorService</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>自己创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而线程池还会创建一个线程，保证池的正常工作</li>\n<li>Executors.newSingleThreadExecutor( )线程个数始终为1，不能修改<ul>\n<li>FinalizableDelegatedExecutorService 应用的是装饰器模式，只对外暴露了 ExecutorService 接口，因此不能调用 ThreadPoolExecutor 中特有的方法</li>\n</ul>\n</li>\n<li>Executors.newFixedThreadPool(1)初始时为1，以后还可以修改<ul>\n<li>对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorepoolSize 等方法进行修改</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"提交任务\"><a href=\"#提交任务\" class=\"headerlink\" title=\"提交任务\"></a>提交任务</h5><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-18 上午10.05.36.png\" alt=\"截屏2021-10-18上午10.05.36\" style=\"zoom:50%;\" />\n\n\n\n<h5 id=\"关闭线程池\"><a href=\"#关闭线程池\" class=\"headerlink\" title=\"关闭线程池\"></a>关闭线程池</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n\t线程池状态变为 SHUTDOWN\n\t- 不会接收新任务\n\t- 但已提交任务会执行完\n\t- 此方法不会阻塞调用线程的执行\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-18 上午10.38.51.png\" alt=\"截屏2021-10-18上午10.38.51\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n\t线程池状态变为 STOP\n\t- 不会接收新任务\n\t- 会将队列中的任务返回\n\t- 并用 interrupt 的方式中断正在执行的任务\n*/</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">shutdownNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 不在RUNNING状态的线程池，此方法就返回true</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 线程池状态是否是 TERMINATED</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isTerminated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 调用 shutdown 后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池 TERMINATED 后做些事情，可以调用此方法等待</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"异步模式之工作线程\"><a href=\"#异步模式之工作线程\" class=\"headerlink\" title=\"异步模式之工作线程\"></a>异步模式之工作线程</h5><h6 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h6><p>让有限的工作线程（Worker Thread）来轮流异步处理无限多的任务。也可以将其归类为分工模式，它的典型实现就是线程池，也体现了经典设计模式中的享元模式。</p>\n<p>注意，不同任务类型应该使用不同的线程池，这样能够避免饥饿，能提升效率</p>\n<h6 id=\"饥饿-1\"><a href=\"#饥饿-1\" class=\"headerlink\" title=\"饥饿\"></a>饥饿</h6><p>固定大小线程池会有饥饿现象</p>\n<ul>\n<li>两个工人是同一个线程池中的两个线程</li>\n<li>他们要做的事情是：为客人点餐和到后厨做菜，这是两个阶段的工作<ul>\n<li>客人点餐：必须先点完餐，等菜做好，上菜，在此期间处理点餐的工人必须等待</li>\n<li>后厨做菜：没啥说的，做就对了</li>\n</ul>\n</li>\n<li>比如工人A处理了点餐任务，接着工人B把菜做好，然后上菜，他们配合挺好</li>\n<li>但现在同时来了两个客人，这时候工人A和B都去处理点餐了，这时没人做饭了-&gt;“死锁”</li>\n</ul>\n<h6 id=\"创建多少线程池合适\"><a href=\"#创建多少线程池合适\" class=\"headerlink\" title=\"创建多少线程池合适\"></a>创建多少线程池合适</h6><ul>\n<li>过小会导致程序不能充分地利用系统资源、容易导致饥饿</li>\n<li>过大会导致更多的线程上下文切换，占用更多内存</li>\n</ul>\n<p><strong>CPU 密集型运算</strong></p>\n<p>通常采用 CPU 核数 + 1 能够实现最优的CPU利用率， +1 是保证当前线程由于页缺失故障（操作系统）或其它原因导致暂停时，额外的这个线程就能顶上去，保证CPU时钟周期不被浪费</p>\n<p><strong>I&#x2F;O 密集型运算</strong></p>\n<p>CPU 不总是处于繁忙状态，例如，当你执行业务计算时，这时候会使用CPU资源，但执行IO操作、远程RPC调用时、数据库操作时，这时候CPU就闲下来了，可以利用多线程提高它的利用率。</p>\n<p>经验公式如下：</p>\n<p><strong>线程数 &#x3D; 核数 * 期望 CPU利用率 * 总时间（CPU计算时间+等待时间）&#x2F; CPU计算时间</strong></p>\n<p>例如4核CPu计算时间是50%，其它等待时间是50%，期望CPU被100%利用，套用公式： 4*100%*100%&#x2F;50%&#x3D;8</p>\n<p>4核CPu计算时间是10%，其它等待时间是90%，期望CPU被100%利用，套用公式：</p>\n<h4 id=\"ScheduledExecutorService\"><a href=\"#ScheduledExecutorService\" class=\"headerlink\" title=\"ScheduledExecutorService\"></a>ScheduledExecutorService</h4><p>在【任务调度线程池】功能加入之前，可以使用 <strong>java.util.Timer</strong> 来实现定时功能，Timer 的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个任务的延迟或异常都将影响到之后的任务。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ScheduledExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h5><ul>\n<li>try - catch</li>\n<li>Future<T> - get( )获取结果（封装有异常信息）</li>\n</ul>\n<h5 id=\"具体应用\"><a href=\"#具体应用\" class=\"headerlink\" title=\"具体应用\"></a>具体应用</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 如何让每周四18:00:00定时执行任务？</span>\n<span class=\"token class-name\">ScheduledExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LocalDateTime</span> p <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">withHour</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withSecond</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withNano</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DayOfWeek</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THURSDAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">plusWeeks</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">long</span> initialDelay <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> period <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\npool<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> initialDelay<span class=\"token punctuation\">,</span> period<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"Tomcat-线程池\"><a href=\"#Tomcat-线程池\" class=\"headerlink\" title=\"Tomcat 线程池\"></a>Tomcat 线程池</h5><p>Tomcat 在哪里用到了线程池呢？</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 上午11.22.34.png\" alt=\"截屏2021-10-19上午11.22.34\" style=\"zoom:50%;\" />\n\n<ul>\n<li>LimitLatch：用来限流，可以控制最大连接个数，类似于JUC中的 Semaphore</li>\n<li>Acceptor：负责【接受新的Socket连接】</li>\n<li>Poller：只负责监听 SocketChannel 是否有【可读的IO事件】<ul>\n<li>一旦可读，封装一个任务对象（SocketProcessor），提交给Executor线程池处理</li>\n</ul>\n</li>\n<li>Executor：线程池中的工作线程最终负责【处理请求】</li>\n</ul>\n<p>Tomcat 线程池扩展了 ThreadPoolExecutor，行为稍有不同</p>\n<ul>\n<li>如果线程总数达到 maximumPoolSize<ul>\n<li>这时不会立刻抛出 RejectedExecutionException 异常</li>\n<li>而是再次尝试将任务放入队列，如果仍然失败，才抛出 RejectedExecutionException</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"Connector-配置\"><a href=\"#Connector-配置\" class=\"headerlink\" title=\"Connector 配置\"></a><strong>Connector 配置</strong></h6><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">默认值</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">acceptorThreadCount</td>\n<td align=\"center\">1</td>\n<td align=\"center\">acceptor 线程数量</td>\n</tr>\n<tr>\n<td align=\"center\">pollerThreadCount</td>\n<td align=\"center\">1</td>\n<td align=\"center\">poller 线程数量</td>\n</tr>\n<tr>\n<td align=\"center\">minSpareThreads</td>\n<td align=\"center\">10</td>\n<td align=\"center\">核心线程数，即 corePoolSize</td>\n</tr>\n<tr>\n<td align=\"center\">maxThreads</td>\n<td align=\"center\">200</td>\n<td align=\"center\">最大线程数，即 maximumPoolSize</td>\n</tr>\n<tr>\n<td align=\"center\">executor</td>\n<td align=\"center\">-</td>\n<td align=\"center\">Executor 名称，用来引用下面的 Executor</td>\n</tr>\n</tbody></table>\n<h6 id=\"Executor-线程配置（优先级更高）\"><a href=\"#Executor-线程配置（优先级更高）\" class=\"headerlink\" title=\"Executor 线程配置（优先级更高）\"></a><strong>Executor 线程配置（优先级更高）</strong></h6><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">默认值</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">threadPriority</td>\n<td align=\"center\">5</td>\n<td align=\"center\">线程优先级</td>\n</tr>\n<tr>\n<td align=\"center\">daemon</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否守护线程</td>\n</tr>\n<tr>\n<td align=\"center\">minSpareThreads</td>\n<td align=\"center\">25</td>\n<td align=\"center\">核心线程数，即 corePoolSize</td>\n</tr>\n<tr>\n<td align=\"center\">maxThreads</td>\n<td align=\"center\">200</td>\n<td align=\"center\">最大线程数，即 maximumPoolSize</td>\n</tr>\n<tr>\n<td align=\"center\">maxIdleTime</td>\n<td align=\"center\">60000</td>\n<td align=\"center\">线程生存时间，单位是毫秒，默认值1分钟</td>\n</tr>\n<tr>\n<td align=\"center\">maxQueueSize</td>\n<td align=\"center\">Integer.MAX_VALUE</td>\n<td align=\"center\">队列长度</td>\n</tr>\n<tr>\n<td align=\"center\">prestartminSpareThreads</td>\n<td align=\"center\">false</td>\n<td align=\"center\">核心线程是否在服务器启动时启动</td>\n</tr>\n</tbody></table>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 上午11.45.18.png\" alt=\"截屏2021-10-19上午11.45.18\" style=\"zoom:50%;\" />\n\n\n\n\n\n<h4 id=\"Fork-x2F-Join\"><a href=\"#Fork-x2F-Join\" class=\"headerlink\" title=\"Fork&#x2F;Join\"></a>Fork&#x2F;Join</h4><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>Fork&#x2F;Join 是JDK1.7加入的新的线程池实现，它体现的是一种分治思想，适用于能够进行任务拆分的CPU密集型运算</p>\n<p>所谓任务拆分，是将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计算，如归并排序，斐波那契数列、都可以用分值思想进行求解</p>\n<p>Fork&#x2F;Join 在分支的基础上加入了多线程，可以把每个人物的分解和合并交给不同的线程来完成，进一步提升了运算效率</p>\n<p>Fork&#x2F;Join 默认会创建与CPU核心数相同的线程池</p>\n<h5 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>提交给 Fork&#x2F;Join 线程池的任务需要继承 RecursiveTask（有返回值）或 RecusiveAction（没有返回值）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// begin - end 求和</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> begin<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> begin <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> end <span class=\"token operator\">+</span> begin<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">+</span> begin<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">MyTask009</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask009</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">MyTask009</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask009</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t2<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"J-U-C\"><a href=\"#J-U-C\" class=\"headerlink\" title=\"J.U.C\"></a>J.U.C</h3><h4 id=\"AQS原理\"><a href=\"#AQS原理\" class=\"headerlink\" title=\"AQS原理\"></a>AQS原理</h4><h5 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>全称 AbstractQueuedSynchronizer，是阻塞式锁和同步器工具的框架</p>\n<p>特点：</p>\n<ul>\n<li>用 stat 属性来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁<ul>\n<li>getState - 获取 state 状态</li>\n<li>setState - 设置 state 状态</li>\n<li>compareAndSetState - 乐观锁机制设置 state 状态</li>\n<li>独占模式只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源</li>\n</ul>\n</li>\n<li>提供了基于FIFO的等待队列，类似于 Monitor 的 EntryList</li>\n<li>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet</li>\n</ul>\n<p>子类主要实现这样一些方法（默认抛出UnsupportedOperationException）</p>\n<ul>\n<li>tryAcquire</li>\n<li>tryRelease</li>\n<li>tryAcquireShared</li>\n<li>tryReleaseShared</li>\n<li>isHeldExclusively</li>\n</ul>\n<h4 id=\"ReentrantLock-原理\"><a href=\"#ReentrantLock-原理\" class=\"headerlink\" title=\"ReentrantLock 原理\"></a>ReentrantLock 原理</h4><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午4.37.49.png\" alt=\"截屏2021-10-19下午4.37.49\" style=\"zoom:50%;\" />\n\n<h5 id=\"非公平锁实现原理\"><a href=\"#非公平锁实现原理\" class=\"headerlink\" title=\"非公平锁实现原理\"></a>非公平锁实现原理</h5><h6 id=\"加锁解锁流程\"><a href=\"#加锁解锁流程\" class=\"headerlink\" title=\"加锁解锁流程\"></a>加锁解锁流程</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token comment\">// NonfairSync 继承自 AQS</span>\n\t  sync <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>没有竞争时</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午4.39.33.png\" alt=\"截屏2021-10-19下午4.39.33\" style=\"zoom:50%;\" />\n\n<p><strong>第一个竞争出现时</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午4.41.58.png\" alt=\"截屏2021-10-19下午4.41.58\" style=\"zoom:50%;\" />\n\n<p>Thread - 1 执行了：</p>\n<ol>\n<li>CAS 尝试将 state 由 0 改为 1 ，结果失败</li>\n<li>进入 tryAcquire( ) 逻辑，这时 state 已经是1，结果仍然失败</li>\n<li>接下来进入 addWaiter 逻辑，构造 Node 队列<ul>\n<li>图中黄色三角表示该 Node 的 WaitStatus 状态，其中0为默认正常状态</li>\n<li>Node的创建是懒惰的</li>\n<li>其中第一个Node称为Dummy（哑元）或哨兵，用来占位，并不关联线程</li>\n</ul>\n</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午4.46.36.png\" alt=\"截屏2021-10-19下午4.46.36\" style=\"zoom:50%;\" />\n\n<p>当前线程进入acquireQueued逻辑（会在一个死循环中不断尝试获得锁，失败后进入 park 阻塞）</p>\n<ol>\n<li>如果自己是紧邻着 head（第二个Node），那么再次 tryAcquire 尝试获得锁，当然这时 state 仍未1，失败</li>\n<li>进入 shouldParkAfterFailedAcquire 逻辑，将前驱 node，即 head 的waitStatus改为-1，这次返回false</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午4.56.52.png\" alt=\"截屏2021-10-19下午4.56.52\" style=\"zoom:50%;\" />\n\n<ol start=\"4\">\n<li>shouldParkAfterFailedAcquire 执行完毕回到 acquireQueued，再次 tryAcquire 尝试获得锁，当然这时 state 仍为 1，失败</li>\n<li>当再次进入 shouldParkAfterFailedAcquire 时，这时因为其前驱node的WaitStatus已经是-1，这次返回true</li>\n<li>进入 parkAndCheckInterrupt，Thread-1 park（灰色表示）</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午4.59.16.png\" alt=\"截屏2021-10-19下午4.59.16\" style=\"zoom:50%;\" />\n\n<p>再次有多个线程经历上述过程竞争失败，变成这个样子 ↓</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午5.07.05.png\" alt=\"截屏2021-10-19下午5.07.05\" style=\"zoom:50%;\" />\n\n<p>Thread - 0 释放锁，进入 tryRelaese 流程，如果成功</p>\n<ul>\n<li>设置 exclusiveOwnerThread 为 null</li>\n<li>state &#x3D; 0</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午5.08.22.png\" alt=\"截屏2021-10-19下午5.08.22\" style=\"zoom:50%;\" />\n\n<p>当前队列不为 null，并且 head 的 WaitStatus &#x3D; -1，进入 unparkSuccessor 流程</p>\n<p>找到队列中离 head 最近的一个 Node（没取消的），unpark 恢复其运行，本例中即为 Thread-1</p>\n<p>回到 Thread-1 的 acquireQueued 流程</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午5.14.06.png\" alt=\"截屏2021-10-19下午5.14.06\" style=\"zoom:50%;\" />\n\n<p>如果加锁成功（没有竞争），会设置</p>\n<ul>\n<li>exclusiveOwnerThread 为 Thread-1，state &#x3D; 1</li>\n<li>head 指向刚刚 Thread-1 所在的 Node，该 Node 清空 Thread</li>\n<li>原本的 head 因为从链表断开，从而可被垃圾回收</li>\n</ul>\n<p>如果此时有其他线程来竞争（非公平的体现），例如这时有Thread-4来了</p>\n<p><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019173056437.png\" alt=\"image-20211019173056437\"></p>\n<p>如果不巧又被Thread-4占了先</p>\n<ul>\n<li>Thread-4 被设置为 exclusiveOwnerThread，state &#x3D; 1</li>\n<li>Thread-1 再次进入 acquireQueued 流程，获取锁失败，重新进入 park 阻塞</li>\n</ul>\n<h5 id=\"可重入原理\"><a href=\"#可重入原理\" class=\"headerlink\" title=\"可重入原理\"></a>可重入原理</h5><p><a href=\"https://www.bilibili.com/video/BV16J411h7Rd?p=242\">https://www.bilibili.com/video/BV16J411h7Rd?p=242</a></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019200547471.png\" alt=\"image-20211019200547471\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午8.04.42.png\" alt=\"截屏2021-10-19下午8.04.42\" style=\"zoom:50%;\" />\n\n\n\n<h5 id=\"可打断原理\"><a href=\"#可打断原理\" class=\"headerlink\" title=\"可打断原理\"></a>可打断原理</h5><h6 id=\"不可打断模式\"><a href=\"#不可打断模式\" class=\"headerlink\" title=\"不可打断模式\"></a>不可打断模式</h6><p>在此模式下，即使它被打断，仍会驻留在AQS队列中，等获得锁后方能继续运行（是继续运行！只是打断标记被设置为 true）</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019201117115.png\" alt=\"image-20211019201117115\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019201409718.png\" alt=\"image-20211019201409718\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019201426543.png\" alt=\"image-20211019201426543\" style=\"zoom:50%;\" />\n\n<h6 id=\"可打断模式\"><a href=\"#可打断模式\" class=\"headerlink\" title=\"可打断模式\"></a>可打断模式</h6><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019202147783.png\" alt=\"image-20211019202147783\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019202217540.png\" alt=\"image-20211019202217540\" style=\"zoom:50%;\" />\n\n<h5 id=\"公平锁实现原理\"><a href=\"#公平锁实现原理\" class=\"headerlink\" title=\"公平锁实现原理\"></a>公平锁实现原理</h5><p><strong>非公平</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019205441375.png\" alt=\"image-20211019205441375\" style=\"zoom:50%;\" />\n\n<p><strong>公平</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午8.58.04.png\" alt=\"截屏2021-10-19下午8.58.04\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/截屏2021-10-19 下午8.58.47.png\" alt=\"截屏2021-10-19下午8.58.47\" style=\"zoom:50%;\" />\n\n\n\n<h5 id=\"条件变量实现原理\"><a href=\"#条件变量实现原理\" class=\"headerlink\" title=\"条件变量实现原理\"></a>条件变量实现原理</h5><p>每个条件变量其实就对应着一个等待队列，其实现类是 ConditionObject</p>\n<h6 id=\"await-流程\"><a href=\"#await-流程\" class=\"headerlink\" title=\"await 流程\"></a>await 流程</h6><p>开始 Thread-0 持有锁，进入 ConditionObject 的 addConditionWaiter 流程，创建新的 Node 状态为 -2（Node.CONDITION)，关联 Thread-0，加入等待队列尾部</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019210144268.png\" alt=\"image-20211019210144268\" style=\"zoom:50%;\" />\n\n<p>接下来进入 AQS 的 fullyRelease 流程，<strong>释放同步器上的锁</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019210407570.png\" alt=\"image-20211019210407570\" style=\"zoom:50%;\" />\n\n<p>unpark AQS 队列中的下一个节点，竞争锁，假设没有其他竞争线程，那么 Thread-1 竞争成功</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019210726921.png\" alt=\"image-20211019210726921\" style=\"zoom:50%;\" />\n\n<p>park 阻塞 Thread-0</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019210851953.png\" alt=\"image-20211019210851953\" style=\"zoom:50%;\" />\n\n<h6 id=\"signal-流程\"><a href=\"#signal-流程\" class=\"headerlink\" title=\"signal 流程\"></a>signal 流程</h6><p>假设 Thread-1 要来唤醒 Thread-0</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019211017726.png\" alt=\"image-20211019211017726\" style=\"zoom:50%;\" />\n\n<p>进入 ConditionObject 的 doSignal 流程，取得等待队列中第一个 Node，即 Thread-0 所在Node</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019211234082.png\" alt=\"image-20211019211234082\" style=\"zoom:50%;\" />\n\n<p>执行 transferForSignal 流程，将该 Node 加入 AQS 队列尾部，将 Thread-0 的 waitStatus 改为0，Thread-3的 waitStatus 改为 -1</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019211639290.png\" alt=\"image-20211019211639290\" style=\"zoom:50%;\" />\n\n<p>Thread-1 释放锁，进入 unlock 流程，略</p>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><h5 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h5><p>当读操作远远高于写操作时，这时候使用读写锁让读-读可以并发，提高性能。类似于数据库中的 select … from … lock in share mode</p>\n<p>提供一个数据容器类内部分别使用读锁保护数据的 read( ) 方法，写锁保护数据的 write( ) 方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ReentrantReadWriteLock</span> rw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantReadWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ReentrantReadWriteLock<span class=\"token punctuation\">.</span>ReadLock</span> readLock <span class=\"token operator\">=</span> rw<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ReentrantReadWriteLock<span class=\"token punctuation\">.</span>WriteLock</span> writeLock <span class=\"token operator\">=</span> rw<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>读锁不支持条件变量</li>\n<li><strong>重入时升级不支持：即持有读锁的情况下区获取写锁，会导致获取写锁永久等待</strong></li>\n<li>重入时降级支持：即持有写锁的情况下去获取读锁</li>\n</ul>\n<h5 id=\"应用之缓存\"><a href=\"#应用之缓存\" class=\"headerlink\" title=\"应用之缓存\"></a>应用之缓存</h5><h6 id=\"缓存更新策略\"><a href=\"#缓存更新策略\" class=\"headerlink\" title=\"缓存更新策略\"></a>缓存更新策略</h6><p><strong>先清缓存</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019214943284.png\" alt=\"image-20211019214943284\" style=\"zoom:50%;\" />\n\n<p><strong>先更新数据库</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211019215149280.png\" alt=\"image-20211019215149280\" style=\"zoom:50%;\" />\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestGenericDao</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">GenericDao</span> dao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericDaoCached</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============> 查询\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from emp where empno = ?\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> empno <span class=\"token operator\">=</span> <span class=\"token number\">7369</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Emp</span> emp <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">queryOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> empno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emp <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">queryOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> empno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emp <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">queryOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> empno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============> 更新\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update emp set sal = ? where empno = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> empno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emp <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">queryOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> empno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericDaoCached</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericDao</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">GenericDao</span> dao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SqlPair</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantReadWriteLock</span> rw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantReadWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">queryList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">queryList</span><span class=\"token punctuation\">(</span>beanClass<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">queryOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 先从缓存中找，找到直接返回</span>\n        <span class=\"token class-name\">SqlPair</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlPair</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        rw<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">T</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            rw<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        rw<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 唯一线程进入</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 解锁后，多个线程进入</span>\n            <span class=\"token class-name\">T</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 缓存中没有，查询数据库</span>\n                value <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">queryOne</span><span class=\"token punctuation\">(</span>beanClass<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            rw<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        rw<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 先更新库</span>\n            <span class=\"token keyword\">int</span> update <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 清空缓存</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> update<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            rw<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">SqlPair</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlPair</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sql <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">SqlPair</span> sqlPair <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SqlPair</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> sqlPair<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> sqlPair<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意：</strong></p>\n<ul>\n<li>以上实现体现的是读写锁的应用，保证缓存和数据库的一致性，但下面的问题没有考虑<ul>\n<li>适合读多写少，如果写操作比较频繁，以上实现性能低</li>\n<li>没有考虑缓存容量</li>\n<li>没有考虑缓存过期</li>\n<li>只适合单机</li>\n<li>并发性还是低，目前只会用一把锁</li>\n<li>更新方法太简单粗暴，清空了所有 key</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"读写锁原理\"><a href=\"#读写锁原理\" class=\"headerlink\" title=\"读写锁原理\"></a>读写锁原理</h5><h6 id=\"图解流程\"><a href=\"#图解流程\" class=\"headerlink\" title=\"图解流程\"></a>图解流程</h6><p>读写锁用的是同一个 Sync 同步器，因此等待队列，state 等也是同一个</p>\n<p><strong>t1 w.lock  t2 r.lock</strong></p>\n<ol>\n<li>t1成功上锁，流程与ReentrantLock加锁相比没有特殊之处，不同是写锁状态占了 state 的低 16 位，而读锁使用的是 state 的高16位</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020105641918.png\" alt=\"image-20211020105641918\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020141729564.png\" alt=\"image-20211020141729564\" style=\"zoom:50%;\" />\n\n<ol start=\"2\">\n<li>t2 执行 r.lock，这时进入读锁的 sync.acquireShared(1)流程，首先会进入 tryAcquireShared 流程。如果有写锁占据，那么 tryAcquireShared 返回 -1 表示失败</li>\n</ol>\n<ul>\n<li>-1：失败</li>\n<li>0：成功，但后继节点不会继续唤醒</li>\n<li>正数：成功，数值是几表示有几个后继节点需要唤醒，读锁返回1</li>\n</ul>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020142142624.png\" alt=\"image-20211020142142624\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020142158527.png\" alt=\"image-20211020142158527\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020142247424.png\" alt=\"image-20211020142247424\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020142721168.png\" alt=\"image-20211020142721168\" style=\"zoom:50%;\" />\n\n<ol start=\"3\">\n<li>这时会进入 sync.doAcquireShared(1)流程，首先也是调用 addWaiter 添加节点，不同之处在于节点被设置为 Node.SHARED 模式而非 Node.EXCLUSIVE 模式，注意此时 t2 仍然处于活跃状态</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020143259980.png\" alt=\"image-20211020143259980\" style=\"zoom:50%;\" />\n\n<ol start=\"4\">\n<li>t2 会看看自己的节点是不是老二，如果是，还会在此调用 tryAcquireShared(1) 来尝试获取锁</li>\n<li>如果没有成功，会继续执行，把前驱结点的 WaitStatus 改为 -1（shouldParkAfterFailedAcquire方法，这次返回false，下次true），再 for(;;) 循环一次尝试 tryAcquireShared(1)如果还不成功，那么在 parkAndCheckInterrupt( )处 park</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020145044977.png\" alt=\"image-20211020145044977\" style=\"zoom:50%;\" />\n\n<p><strong>t3 r.lock , t4 w.lock</strong></p>\n<p>在这种情况下，假设又有 t3 加读锁和 t4 加写锁，这期间 t1 仍然持有锁，就变成了下面的样子</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020145240700.png\" alt=\"image-20211020145240700\" style=\"zoom:50%;\" />\n\n<p><strong>t1 w.unlock</strong></p>\n<p>这时会走到写锁的 sync.release(1) 流程，调用 sync.tryRelease(1)成功，变成下面的样子</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020145459298.png\" alt=\"image-20211020145459298\" style=\"zoom:50%;\" />\n\n<p>接下来执行唤醒流程 sync.unparkSuccessor，即让老二恢复运行，这时 t2 在 doacquireShared 内 parkAndCheckInterrupt( ) 处恢复运行</p>\n<p>这回再来一次 for(;;) 执行 tryAcquireShared 成功则让读锁计数加一</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020150125316.png\" alt=\"image-20211020150125316\" style=\"zoom:50%;\" />\n\n<p>这时 t2 已经恢复运行，接下来 t2 调用 setHeadAndPropagate(node, 1)，它原本所在节点被设置为头结点</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020150740597.png\" alt=\"image-20211020150740597\" style=\"zoom:50%;\" />\n\n<p>这回再来一次 for(;;)执行 tryAcquireShared 成功则让读锁计数加一</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020151828283.png\" alt=\"image-20211020151828283\" style=\"zoom:50%;\" />\n\n<p>这时 t3 已经恢复运行，接下来 t3 调用 setHeadAndPropagate(node, 1)，它原本所在节点被设置为头结点</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020151955135.png\" alt=\"image-20211020151955135\" style=\"zoom:50%;\" />\n\n<p>下一个节点已经不是 Shared 状态了</p>\n<p><strong>t2 r.unlock, t3 r.unlock</strong></p>\n<p>t2 进入 sync.releaseShared(1)中，调用 tryReleaseShared(1)让计数减一，但由于计数还不为零</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020152243879.png\" alt=\"image-20211020152243879\" style=\"zoom:50%;\" />\n\n<p>t3 进入了 sync.releaseShared(1) 中，调用 tryReleaseShared(1)让计数减一，这回计数为零了，进入 doReleaseShared( )将头结点从 -1 改为 0 并唤醒老二，即</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020152522964.png\" alt=\"image-20211020152522964\" style=\"zoom:50%;\" />\n\n<p>之后 t4 在 acquireQuqued 中 parkAndCheckInterrupt 处 恢复运行，再次 for(;;)这次自己是老二，并且没有其他竞争，tryAcquire(1)成功，修改投机诶单，流程结束</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020152832961.png\" alt=\"image-20211020152832961\" style=\"zoom:50%;\" />\n\n\n\n<h5 id=\"StampedLock\"><a href=\"#StampedLock\" class=\"headerlink\" title=\"StampedLock\"></a>StampedLock</h5><p>Since JDK 8，是为了进一步优化读性能，它的特点是在使用读锁，写锁时都必须配合【戳】使用</p>\n<p>加解读锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlock<span class=\"token punctuation\">.</span><span class=\"token function\">unlockRead</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>加解写锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlock<span class=\"token punctuation\">.</span><span class=\"token function\">unlockWrite</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>乐观锁，StampedLock 支持 tryOptimisticRead( )方法（乐观读），读取完毕后需要做一次<strong>戳校验</strong>如果校验通过，表示这期间确实没有写操作，数据可以安全使用，如果校验没通过，需要重新获取读锁，保证数据安全。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryOptimisticRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 验戳</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 锁升级</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>StampedLock 不支持条件变量</li>\n<li>StampedLock 不支持可重入</li>\n</ul>\n<h4 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h4><p>信号量，用来限制能同时访问共享资源的线程上限。</p>\n<h5 id=\"应用-1\"><a href=\"#应用-1\" class=\"headerlink\" title=\"应用\"></a>应用</h5><ul>\n<li>使用 Semaphore 限流，在访问高峰期，让请求线程阻塞，高峰期过去再释放许可，当然它只适合限制单机线程数量，并且仅是限制线程数，而不是限制资源数（例如连接数，请对比 Tomcat LimitLatch 的实现）</li>\n<li>用 Semaphore 实现简单连接池，对比【享元模式】下的实现（用 wait notify），性能和可读性显然更好，注意下面的实现中线程数和数据库连接池数是相等的</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 5. 借连接</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取许可</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有许可的线程，在此等待</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> poolSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取空闲连接</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"borrow &#123;&#125;\"</span><span class=\"token punctuation\">,</span> connections<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> connections<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 不会执行到这里</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 6. 归还连接</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> poolSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connections<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            states<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"free &#123;&#125;\"</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>Semaphore 有点像一个停车场，permits 就好像停车位数量，当线程获得了 permits 就像是获得了停车位，然后停车场显示空余车位减一</p>\n<p>刚开始，permits( state ) 为3，这时5个线程来获取资源</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020194818174.png\" alt=\"image-20211020194818174\" style=\"zoom:50%;\" />  \n\n<p>假设其中 Thread-1, Thread-2, Thread-4 cas 竞争成功，而 Thread-0 和 Thread-3 竞争失败，进入AQS队列park阻塞</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020195853030.png\" alt=\"image-20211020195853030\" style=\"zoom:50%;\" />\n\n<p>这时 Thread-4 释放了 permits，状态如下</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020200149982.png\" alt=\"image-20211020200149982\" style=\"zoom:50%;\" />\n\n<p>接下来 Thread-0 竞争成功，permits 再次设置为0，设置自己为 head 节点，断开原来的 head 节点，unpark 接下来的 Thread-3 节点，但由于 permits 是0，因此 Thread-3 在尝试不成功后再次进入 park 状态</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020200656457.png\" alt=\"image-20211020200656457\" style=\"zoom:50%;\" />\n\n\n\n\n\n<h4 id=\"CountdownLatch\"><a href=\"#CountdownLatch\" class=\"headerlink\" title=\"CountdownLatch\"></a>CountdownLatch</h4><p>用来进行线程同步协作，等待所有线程完成倒计时</p>\n<p>其中构造参数用来初始化等待计数值，await( )用来等待计数归零，countDown( )用来让计数减一</p>\n<h5 id=\"应用之同步等待多线程准备完毕\"><a href=\"#应用之同步等待多线程准备完毕\" class=\"headerlink\" title=\"* 应用之同步等待多线程准备完毕\"></a>* 应用之同步等待多线程准备完毕</h5><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020205910554.png\" alt=\"image-20211020205910554\" style=\"zoom:50%;\" />\n\n<h5 id=\"应用之同步等待多个远程调用结束\"><a href=\"#应用之同步等待多个远程调用结束\" class=\"headerlink\" title=\"* 应用之同步等待多个远程调用结束\"></a>* 应用之同步等待多个远程调用结束</h5><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020210009490.png\" alt=\"image-20211020210009490\" style=\"zoom:50%;\" />\n\n<center>↓改进↓</center>\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020210431933.png\" alt=\"image-20211020210431933\" style=\"zoom:50%;\" />\n\n<center>↓改进↓</center>\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020210822956.png\" alt=\"image-20211020210822956\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h4><p>循环栅栏，用来进行线程协作，等待线程满足某个计数。构造时设置【计数个数】，<strong>每个线程执行到某个需要“同步”的时刻调用await( )方法进行等待，当等待的线程数满足【计数个数】时，继续执行</strong></p>\n<p><strong>注意：</strong></p>\n<p><strong>【线程池线程数】需要与【计数个数】相同</strong></p>\n<h4 id=\"线程安全集合类概述\"><a href=\"#线程安全集合类概述\" class=\"headerlink\" title=\"线程安全集合类概述\"></a>线程安全集合类概述</h4><p><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211020214407452.png\" alt=\"image-20211020214407452\"></p>\n<p>线程安全集合可以分为三大类：</p>\n<ul>\n<li>遗留的线程安全集合如 Hashtable，Vector</li>\n<li>使用 Collections 装饰的线程安全集合（Synchronized版本），如：<ul>\n<li>Collections.syncrhonizedCollection</li>\n<li>Collections.synchronizedList</li>\n<li>Collections.synchronizedMap</li>\n<li>Collections.synchronizedSet</li>\n<li>Collections.synchronizedNavigableMap</li>\n<li>Collections.synchronizedNavigableSet</li>\n<li>Collections.synchronizedSortedMap</li>\n<li>Collections.synchronizedSortedSet</li>\n</ul>\n</li>\n<li>java.util.concurrent.*</li>\n</ul>\n<p>重点介绍 java.util.concurrent.* 下的线程安全集合类，可以发现他们有规律，里面包含三类关键词 Blocking、CopyOnWrite、Concurrent</p>\n<ul>\n<li><strong>Blocking 大部实现基于锁，并提供用来阻塞的方法</strong></li>\n<li><strong>CopyOnWrite 之类容器修改开销相对较重</strong></li>\n<li><strong>Concurrent 类型的容器</strong><ul>\n<li>内部很多操作使用 cas 优化，一般可以提供较高吞吐量</li>\n<li>弱一致性<ul>\n<li>遍历时弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍历，这是内容是旧的</li>\n<li>求大小弱一致性，size 操作未必是100%准确</li>\n<li>读取弱一致性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>遍历时如果发生了修改，对于非安全容器来讲，使用 fail-fast 机制也就是让遍历立刻失效，抛出 ConcurrentModificationException，不再继续遍历</p>\n<h5 id=\"ConcurrenthashMap-JDK8\"><a href=\"#ConcurrenthashMap-JDK8\" class=\"headerlink\" title=\"ConcurrenthashMap JDK8\"></a>ConcurrenthashMap JDK8</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestWordCount</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>\n                <span class=\"token comment\">// 创建 map 集合</span>\n                <span class=\"token comment\">// 创建 ConcurrentHashMap 对不对？</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LongAdder</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.75f</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n                <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">// 如果缺少一个 key，则计算生成一个 value , 然后将  key value 放入 map</span>\n                        <span class=\"token comment\">//                  a      0</span>\n                        <span class=\"token class-name\">LongAdder</span> value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> key <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LongAdder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 执行累加,初始值为0</span>\n                        value<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n                        <span class=\"token comment\">/*// 检查 key 有没有\n                        Integer counter = map.get(word);\n                        int newValue = counter == null ? 1 : counter + 1;\n                        // 没有 则 put\n                        map.put(word, newValue);*/</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> supplier<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BiConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> consumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> counterMap <span class=\"token operator\">=</span> supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// key value</span>\n        <span class=\"token comment\">// a   200</span>\n        <span class=\"token comment\">// b   200</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">></span></span> ts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token function\">readFromFile</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>counterMap<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        ts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>counterMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h6 id=\"CurrentHashMap-原理\"><a href=\"#CurrentHashMap-原理\" class=\"headerlink\" title=\"CurrentHashMap 原理\"></a>CurrentHashMap 原理</h6><p><a href=\"https://www.bilibili.com/video/BV15b4y117RJ?p=90&amp;t=1.2\">https://www.bilibili.com/video/BV15b4y117RJ?p=90&amp;t=1.2</a></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220726142507491.png\" alt=\"image-20220726142507491\"></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220417192532020.png\" alt=\"image-20220417192532020\" style=\"zoom:50%;\" />\n\n<p><strong>重要属性和内部类</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 默认为 0</span>\n<span class=\"token comment\">// 当初始化时, 为 -1</span>\n<span class=\"token comment\">// 当扩容时, 为 -(1 + 扩容线程数)</span>\n<span class=\"token comment\">// 当初始化或扩容完成后，为 下一次的扩容的阈值大小</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> sizeCtl<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 整个 ConcurrentHashMap 就是一个 Node[]</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// hash 表</span>\n<span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 扩容时的 新 hash 表</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nextTable<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 扩容时如果某个 bin 迁移完毕, 用 ForwardingNode 作为旧 table bin 的头结点</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForwardingNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 用在 compute 以及 computeIfAbsent 时, 用来占位, 计算完成后替换为普通 Node</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReservationNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 作为 treebin 的头节点, 存储 root 和 first</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeBin</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 作为 treebin 的节点, 存储 parent, left, right</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>重要方法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取 Node[] 中第 i 个 Node</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tabAt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// cas 修改 Node[] 中第 i 个 Node 的值, c 为旧值, v 为新值</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">casTabAt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> v<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 直接修改 Node[] 中第 i 个 Node 的值, v 为新值</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTabAt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> v<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>构造器分析</strong></p>\n<p>可以看到实现了懒惰初始化，在构造方法中仅仅计算了 table 的大小，以后在第一次使用时才会真正创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> concurrencyLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">></span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> concurrencyLevel <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> concurrencyLevel<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Use at least as many bins</span>\n      initialCapacity <span class=\"token operator\">=</span> concurrencyLevel<span class=\"token punctuation\">;</span> <span class=\"token comment\">// as estimated threads</span>\n  <span class=\"token keyword\">long</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>initialCapacity <span class=\"token operator\">/</span> loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// tableSizeFor 仍然是保证计算的大小是 2^n, 即 16,32,64 ... </span>\n  <span class=\"token keyword\">int</span> cap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">:</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sizeCtl <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>get 流程</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021160148102.png\" alt=\"image-20211021160148102\" style=\"zoom:50%;\" />\n\n<p><strong>put 流程</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220419164751428.png\" alt=\"image-20220419164751428\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220419164827808.png\" alt=\"image-20220419164827808\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220419164851511.png\" alt=\"image-20220419164851511\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220419164621905.png\" alt=\"image-20220419164621905\" style=\"zoom:50%;\" />\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220419164639558.png\" alt=\"image-20220419164639558\" style=\"zoom:50%;\" />\n\n<p><strong>size 计算流程</strong></p>\n<p>siez 计算实际发生在 <strong>put，remove 改变集合元素的操作之中</strong>，注意：计算结果仍然有误差</p>\n<ul>\n<li>没有竞争发生，向 baseCount 累加计数</li>\n<li>有竞争发生，新建 counterCells，向其中一个 cell 累加计数<ul>\n<li>counterCells 初始化有两个 cell</li>\n<li>如果计数竞争比较激烈，会创建新的cell来累加计数</li>\n</ul>\n</li>\n</ul>\n<p><strong>transfer 流程</strong></p>\n<p><a href=\"https://www.bilibili.com/video/BV16J411h7Rd?p=289&amp;t=36.5\">https://www.bilibili.com/video/BV16J411h7Rd?p=289&amp;t=36.5</a></p>\n<h5 id=\"ConcurrenthashMap-JDK7\"><a href=\"#ConcurrenthashMap-JDK7\" class=\"headerlink\" title=\"ConcurrenthashMap JDK7\"></a>ConcurrenthashMap JDK7</h5><p>它维护了一个 segment 数组，每个 segment 对应一把锁</p>\n<ul>\n<li>优点：如果多个线程访问不同的 segment，实际是没有冲突的，这与JDK8中是类似的</li>\n<li>缺点：Segments 数组默认大小为16，这个是固定不可变的，并且不是懒惰初始化</li>\n</ul>\n<p>在JDK1.7版本中，ConcurrentHashMap的数据结构是<strong>由一个Segment数组和多个HashEntry组成</strong>，如下图所示：</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021205013105.png\" alt=\"image-20211021205013105\" style=\"zoom:50%;\" />\n\n<p><strong>构造器分析</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> concurrencyLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> concurrencyLevel <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>concurrencyLevel <span class=\"token operator\">></span> <span class=\"token constant\">MAX_SEGMENTS</span><span class=\"token punctuation\">)</span>\n            concurrencyLevel <span class=\"token operator\">=</span> <span class=\"token constant\">MAX_SEGMENTS</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ssize 必须是 2^n, 即 2, 4, 8, 16 ... 表示了 segments 数组的大小</span>\n        <span class=\"token keyword\">int</span> sshift <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ssize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ssize <span class=\"token operator\">&lt;</span> concurrencyLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">++</span>sshift<span class=\"token punctuation\">;</span>\n            ssize <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// segmentShift 默认是 32 - 4 = 28</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>segmentShift <span class=\"token operator\">=</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> sshift<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// segmentMask 默认是 15 即 0000 0000 0000 1111</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>segmentMask <span class=\"token operator\">=</span> ssize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span>\n            initialCapacity <span class=\"token operator\">=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> initialCapacity <span class=\"token operator\">/</span> ssize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span> ssize <span class=\"token operator\">&lt;</span> initialCapacity<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">++</span>c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cap <span class=\"token operator\">=</span> <span class=\"token constant\">MIN_SEGMENT_TABLE_CAPACITY</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cap <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span>\n            cap <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建 segments and segments[0]</span>\n        <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> s0 <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>cap <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token punctuation\">[</span>cap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Segment</span><span class=\"token punctuation\">[</span>ssize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">putOrderedObject</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">,</span> <span class=\"token constant\">SBASE</span><span class=\"token punctuation\">,</span> s0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ordered write of segments[0]</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>segments <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>put 流程</strong></p>\n<p>put操作的步骤：</p>\n<ul>\n<li>首先，计算key的hash值</li>\n<li>其次，根据hash值找到需要操作的Segment的数组位置</li>\n<li>Segment为空，调用ensureSegment()方法；否则，直接调用查询到的Segment的put方法插入值</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// concurrentHashMap不允许key/value为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 计算出 segment 下标</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">>>></span> segmentShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> segmentMask<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获得 segment 对象, 判断是否为 null, 是则创建该 segment</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span>getObject\n            <span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">SSHIFT</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">SBASE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 这时不能确定是否真的为 null, 因为其它线程也发现该 segment 为 null,</span>\n        <span class=\"token comment\">// 因此在 ensureSegment 里用 cas 方式保证该 segment 安全性</span>\n        s <span class=\"token operator\">=</span> <span class=\"token function\">ensureSegment</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 进入 segment 的put 流程</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>segment 继承了可重入所（ReentrantLock），其put方法如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 尝试加锁</span>\n    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node <span class=\"token operator\">=</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 如果不成功, 进入 scanAndLockForPut 流程</span>\n            <span class=\"token comment\">// 如果是多核 cpu 最多 tryLock 64 次, 进入 lock 流程</span>\n            <span class=\"token comment\">// 在尝试期间, 还可以顺便看该节点在链表中有没有, 如果没有顺便创建出来</span>\n            <span class=\"token function\">scanAndLockForPut</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 执行到这里 segment 已经被成功加锁, 可以安全执行</span>\n    <span class=\"token class-name\">V</span> oldValue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 再利用 hash 值，求应该放置的数组下标</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 返回数组中对应位置的元素（链表头部）</span>\n        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> first <span class=\"token operator\">=</span> <span class=\"token function\">entryAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 如果已经存在值，覆盖旧值</span>\n                <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 新增</span>\n                <span class=\"token comment\">// 1) 之前等待锁时, node 已经被创建, next 指向链表头</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 非空，则表示为新创建的值</span>\n                    node<span class=\"token punctuation\">.</span><span class=\"token function\">setNext</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token comment\">// 2) 创建新 node</span>\n                    node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 3) 如果超过了该 segment 的阈值，这个 segment 需要扩容</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> threshold <span class=\"token operator\">&amp;&amp;</span> tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token comment\">// 将 node 作为链表头，头插法</span>\n                    <span class=\"token function\">setEntryAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n                oldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最终释放锁</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>rehash 流程（扩容方法）</strong></p>\n<p>发生在 put 中，因为此时已经获得了锁，所以不需要考虑线程安全</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTable <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> oldTable<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        threshold <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTable <span class=\"token operator\">=</span>\n                <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token punctuation\">[</span>newCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sizeMask <span class=\"token operator\">=</span> newCapacity <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> oldCapacity<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> oldTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> sizeMask<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Single node on list</span>\n                    newTable<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Reuse consecutive sequence at same slot</span>\n                    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> lastRun <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                    北京市昌平区建材城西路金燕龙办公楼一层 电话：<span class=\"token number\">400</span> <span class=\"token operator\">-</span> <span class=\"token number\">618</span> <span class=\"token operator\">-</span> <span class=\"token number\">9090</span>\n                    <span class=\"token keyword\">int</span> lastIdx <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 过一遍链表, 尽可能把 rehash 后 idx 不变的节点重用</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> last <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n                         last <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                         last <span class=\"token operator\">=</span> last<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> last<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> sizeMask<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">!=</span> lastIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            lastIdx <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n                            lastRun <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    newTable<span class=\"token punctuation\">[</span>lastIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lastRun<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 剩余节点需要新建</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> lastRun<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">V</span> v <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> h <span class=\"token operator\">&amp;</span> sizeMask<span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> n <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        newTable<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 扩容完成, 才加入新的节点</span>\n        <span class=\"token keyword\">int</span> nodeIndex <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> sizeMask<span class=\"token punctuation\">;</span> <span class=\"token comment\">// add the new node</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">setNext</span><span class=\"token punctuation\">(</span>newTable<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newTable<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 替换为新的 HashEntry table</span>\n        table <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>get 流程</strong></p>\n<p>get 时并未加锁，用了UNSAFE方法保证了可见性，扩容过程中，get 先发生就从旧表取内容，get后发生就从新表取内容</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// manually integrate access methods to reduce overhead</span>\n    <span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1. hash 值</span>\n    <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> u <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> segmentShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> segmentMask<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">SSHIFT</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">SBASE</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 根据 hash 找到对应的 segment</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObjectVolatile</span><span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 3. 找到segment 内部数组相应位置的链表，遍历</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span>getObjectVolatile\n                 <span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">TSHIFT</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">TBASE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> h <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>size 计算流程</strong></p>\n<ul>\n<li>计算元素个数前，先不加锁计算两次，如果前后结果一样，认为个数正确返回</li>\n<li>如果不一样，进行重试，次数超过3，将所有 segment 锁住，重新计算个数返回</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// Try a few times to get accurate count. On failure due to</span>\n<span class=\"token comment\">// continuous async changes in table, resort to locking.</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> segments <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> overflow<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true if size overflows 32 bits</span>\n        <span class=\"token keyword\">long</span> sum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// sum of modCounts</span>\n        <span class=\"token keyword\">long</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// previous sum</span>\n        <span class=\"token keyword\">int</span> retries <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// first iteration isn't retry</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retries<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> <span class=\"token constant\">RETRIES_BEFORE_LOCK</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 超过重试次数, 需要创建所有 segment 并加锁</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> segments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">ensureSegment</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// force creation</span>\n                <span class=\"token punctuation\">&#125;</span>\n                sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n                size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                overflow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> segments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Segment</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> seg <span class=\"token operator\">=</span> <span class=\"token function\">segmentAt</span><span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seg <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        sum <span class=\"token operator\">+=</span> seg<span class=\"token punctuation\">.</span>modCount<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> seg<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                            overflow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> last<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                last <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retries <span class=\"token operator\">></span> <span class=\"token constant\">RETRIES_BEFORE_LOCK</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> segments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">segmentAt</span><span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> overflow <span class=\"token operator\">?</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">:</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h5 id=\"LinkedBlockingQueue\"><a href=\"#LinkedBlockingQueue\" class=\"headerlink\" title=\"LinkedBlockingQueue\"></a>LinkedBlockingQueue</h5><h6 id=\"基本的入队出队\"><a href=\"#基本的入队出队\" class=\"headerlink\" title=\"基本的入队出队\"></a><strong>基本的入队出队</strong></h6><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>入队</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">E</span> item<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/**\n             * 下列三种情况之一\n             * - 真正的后继节点\n             * - 自己, 发生在出队时\n             * - null, 表示是没有后继节点, 是最后了\n             */</span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                item <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>初始化链表 last &#x3D; head &#x3D; new Node<E>(null); Dummy 节点用来占位，item为null</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021210339215.png\" alt=\"image-20211021210339215\" style=\"zoom:50%;\" />\n\n<p>当一个节点入队 last &#x3D; last.next &#x3D; node;</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021210415975.png\" alt=\"image-20211021210415975\" style=\"zoom:50%;\" />\n\n<p>再来一个节点入队 last &#x3D; last.next &#x3D; node;</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021210546605.png\" alt=\"image-20211021210546605\" style=\"zoom:50%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>出队</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> h <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> first <span class=\"token operator\">=</span> h<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> h<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span>\nhead <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span> <span class=\"token class-name\">E</span> x <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>h &#x3D; head</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021210640163.png\" alt=\"image-20211021210640163\" style=\"zoom:50%;\" />\n\n<p>first &#x3D; h.next</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021210658309.png\" alt=\"image-20211021210658309\" style=\"zoom:50%;\" />\n\n<p>h.next &#x3D; h</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021210844010.png\" alt=\"image-20211021210844010\" style=\"zoom:50%;\" />\n\n<p>head &#x3D; first</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021210913926.png\" alt=\"image-20211021210913926\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">E</span> x <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021211016422.png\" alt=\"image-20211021211016422\" style=\"zoom:50%;\" />\n\n\n\n<h6 id=\"加锁分析\"><a href=\"#加锁分析\" class=\"headerlink\" title=\"加锁分析\"></a><strong>加锁分析</strong></h6><p>高明之处在于<strong>用了两把锁和 dummy 节点</strong></p>\n<ul>\n<li>同一把锁，同一时刻，最多只允许有一个线程（生产者或消费者，二选一）执行</li>\n<li>用两把锁，同一时刻，可以允许两个线程同时运行（一个生产者与一个消费者）运行<ul>\n<li>消费者与消费者线程仍然串行</li>\n<li>生产者与生产者线程仍然串行</li>\n</ul>\n</li>\n</ul>\n<p>线程安全分析</p>\n<ul>\n<li>当节点总数大于 2 时（包括 dummy 节点），putLock 保证的是 last 节点的线程安全，takeLock保证的是 head 节点的线程安全。两把锁保证了入队和出队没有竞争</li>\n<li>当节点总数等于 2 时（即一个 dummy 节点，一个正常节点），这时候，仍然是两把锁锁两个对象，不会竞争</li>\n<li>当节点总数等于 1 时（就一个 dummy 节点）这时 take 线程会被 notEmpty 条件阻塞，有竞争，有阻塞</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 用于 put（阻塞） offer（非阻塞）</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> putLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 用户 take（阻塞） poll（非阻塞）</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> takeLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>put 操作</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> putLock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>putLock<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// count 用来维护元素计数</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicInteger</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n        putLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 满了等待</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t<span class=\"token comment\">// 倒过来读就好: 等待 notFull</span>\n                notFull<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 有空位, 入队且计数加一</span>\n            <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token comment\">// 除了自己 put 以外, 队列还有空位, 由自己叫醒其他 put 线程</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> capacity<span class=\"token punctuation\">)</span>\n                notFull<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            putLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token comment\">// 如果队列中有一个元素, 叫醒 take 线程</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token comment\">// 这里调用的是 notEmpty.signal() 而不是 notEmpty.signalAll() 是为了减少竞争</span>\n            <span class=\"token function\">signalNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>take 操作</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">E</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicInteger</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> takeLock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>takeLock<span class=\"token punctuation\">;</span>\n        takeLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                notEmpty<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x <span class=\"token operator\">=</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">getAndDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                notEmpty<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            takeLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 如果队列中只有一个空位时, 叫醒 put 线程</span>\n<span class=\"token comment\">// 如果有多个线程进行出队, 第一个线程满足 c == capacity, 但后续线程 c &lt; capacity</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> capacity<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 这里调用的是 notFull.signal() 而不是 notFull.signalAll() 是为了减少竞争</span>\n            <span class=\"token function\">signalNotFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>性能比较</strong></p>\n<p>主要列举LinkedBlockingQueue 与 ArrayBlockingQueue 的性能比较</p>\n<ul>\n<li>Linked 支持有界，Array 强制有界</li>\n<li>Linked 链表实现，Array 数组实现</li>\n<li>Linked 是懒惰的，而 Array 需要提前初始化 Node 数组</li>\n<li>Linked 每次入队会生成新的 Node，而 Array 的Node是提前创建好的</li>\n<li>Linked 两把锁，Array一把锁</li>\n</ul>\n<h5 id=\"ConcurrentLinkedQuque\"><a href=\"#ConcurrentLinkedQuque\" class=\"headerlink\" title=\"ConcurrentLinkedQuque\"></a>ConcurrentLinkedQuque</h5><p>ConcurrentLinkedQueue 的设计与 LinkedBlockingQueue 非常像，也是</p>\n<ul>\n<li>两把【锁】，同一时刻，可以允许两个线程同时（一个生产者与一个消费者）执行</li>\n<li>dummy 节点的引入让两把【锁】将来锁住的是不同对象，避免竞争</li>\n<li>只是【锁】使用了CAS来实现</li>\n</ul>\n<p>事实上，ConcurrentLinkedQueue 应用还是非常广泛的</p>\n<p>例如之前的 Tomcat 的 Connector 结构，Acceptor 作为生产者向 Poller 消费者传递事件信息时，正是采用了 ConcurrentLinkedQueue 将 SocketChannel 给 Poller 使用</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021212907059.png\" alt=\"image-20211021212907059\" style=\"zoom:50%;\" />\n\n\n\n\n\n<h5 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h5><p>CopyOnWriteArraySet 是它的马甲</p>\n<p>底层实现采用了<strong>写入时拷贝</strong>的思想，<strong>增删改</strong>操作底层会将数组拷贝一份，更改操作在新数组上执行，这时不影响其他的线程<strong>读并发，读写分离</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021213108203.png\" alt=\"image-20211021213108203\" style=\"zoom:50%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上源码是JDK11，在JDK8中使用的是可重入锁而不是 synchronized</p></blockquote>\n<p>其它读操作并未加锁</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021213314903.png\" alt=\"image-20211021213314903\" style=\"zoom:50%;\" />\n\n<p>适合【读多写少】的应用场景</p>\n<p><strong>get 弱一致性</strong></p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20211021213524434.png\" alt=\"image-20211021213524434\" style=\"zoom:50%;\" />\n\n<p>弱一致性并非完全不好</p>\n<ul>\n<li>数据库的MVCC都是弱一致性的表现</li>\n<li>并发高和一致性是矛盾的，需要权衡</li>\n</ul>\n<h4 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h4><h5 id=\"ThreadLocal、Thread、ThreadLocalMap联系\"><a href=\"#ThreadLocal、Thread、ThreadLocalMap联系\" class=\"headerlink\" title=\"ThreadLocal、Thread、ThreadLocalMap联系\"></a>ThreadLocal、Thread、ThreadLocalMap联系</h5><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220720232029705.png\" alt=\"image-20220720232029705\" style=\"zoom:67%;\" />\n\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220726152618312.png\" alt=\"image-20220726152618312\"></p>\n","text":"JUC并发编程进程与线程进程 程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的 当一个程序被运行，从磁盘加载这个程序的代码至内存，这是就开启了一个进...","link":"","photos":[],"count_time":{"symbolsCount":"102k","symbolsTime":"1:32"},"categories":[],"tags":[{"name":"JUC","slug":"JUC","count":1,"path":"api/tags/JUC.json"},{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">JUC并发编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">进程与线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">进程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B-vs-%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">进程 vs 线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C\"><span class=\"toc-text\">并发与并行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">Java线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">创建和运行线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E4%B9%8BThread%E4%B8%8ERunnable%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">原理之Thread与Runnable的关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%9E%BB%EF%BC%9A%E7%AC%AC%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">前瞻：第三种创建线程方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">查看进程线程的方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E4%B9%8B%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">原理之线程运行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%EF%BC%88Thread-Context-Switch%EF%BC%89\"><span class=\"toc-text\">线程上下文切换（Thread Context Switch）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">常见方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#start-%E4%B8%8E-run\"><span class=\"toc-text\">start 与 run</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sleep-%E4%B8%8E-yield\"><span class=\"toc-text\">sleep 与 yield</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#sleep\"><span class=\"toc-text\">sleep</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#yield\"><span class=\"toc-text\">yield</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">线程优先级</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%EF%BC%9A%E9%98%B2%E6%AD%A2CPU%E5%8D%A0%E7%94%A8100\"><span class=\"toc-text\">案例：防止CPU占用100%</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#join\"><span class=\"toc-text\">join</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#interrupt\"><span class=\"toc-text\">interrupt</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%A4%E9%98%B6%E6%AE%B5%E7%BB%88%E6%AD%A2\"><span class=\"toc-text\">模式之两阶段终止</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%93%E6%96%AD-park-%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">打断 park 线程</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">不推荐使用的方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%B8%BB%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">守护线程与主线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">线程状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">小结案例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">本章小结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E7%AE%A1%E7%A8%8B\"><span class=\"toc-text\">共享模型之管程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">共享带来的问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%B4%E7%95%8C%E5%8C%BA-Critical-Section\"><span class=\"toc-text\">临界区 Critical Section</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6-Race-Condition\"><span class=\"toc-text\">竞态条件 Race Condition</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#synchronized-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">synchronized 解决方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E4%B9%8B%E4%BA%92%E6%96%A5\"><span class=\"toc-text\">应用之互斥</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83\"><span class=\"toc-text\">思考</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%80%E8%B0%93%E2%80%9C%E7%BA%BF%E7%A8%8B%E5%85%AB%E9%94%81%E2%80%9D%EF%BC%88%E4%B9%A0%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">所谓“线程八锁”（习题）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90\"><span class=\"toc-text\">变量的线程安全分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%EF%BC%9F\"><span class=\"toc-text\">成员变量和静态变量是否线程安全？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%EF%BC%9F\"><span class=\"toc-text\">局部变量是否线程安全？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%B1%BB\"><span class=\"toc-text\">常见的线程安全类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E7%BB%84%E5%90%88\"><span class=\"toc-text\">线程安全类方法的组合</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%9E%8B\"><span class=\"toc-text\">不可变类线程安全型</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">实例分析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B9%A0%E9%A2%98\"><span class=\"toc-text\">习题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Monitor-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">Monitor 概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Java-%E5%AF%B9%E8%B1%A1%E5%A4%B4\"><span class=\"toc-text\">Java 对象头</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Monitor%EF%BC%88%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%EF%BC%89\"><span class=\"toc-text\">Monitor（重量级锁）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#synchronized-%E5%AD%97%E8%8A%82%E7%A0%81\"><span class=\"toc-text\">synchronized 字节码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#synchronized-%E5%8E%9F%E7%90%86-%E2%80%BB\"><span class=\"toc-text\">synchronized 原理 ※</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81\"><span class=\"toc-text\">轻量级锁</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%94%81%E8%86%A8%E8%83%80\"><span class=\"toc-text\">锁膨胀</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%87%AA%E6%97%8B%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">自旋优化</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%81%8F%E5%90%91%E9%94%81\"><span class=\"toc-text\">偏向锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%81%8F%E5%90%91%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">偏向状态</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8F%E9%87%8D%E5%81%8F%E5%90%91\"><span class=\"toc-text\">批量重偏向</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8F%E6%92%A4%E9%94%80\"><span class=\"toc-text\">批量撤销</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%81%E6%B6%88%E9%99%A4\"><span class=\"toc-text\">锁消除</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#wait-notify\"><span class=\"toc-text\">wait  notify</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E4%B9%8B-wait-x2F-notify\"><span class=\"toc-text\">原理之 wait&#x2F;notify</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#API-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">API 介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF\"><span class=\"toc-text\">正确使用姿势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BF%9D%E6%8A%A4%E6%80%A7%E6%9A%82%E5%81%9C%EF%BC%88Guarded-Suspension%EF%BC%89\"><span class=\"toc-text\">同步模式之保护性暂停（Guarded Suspension）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-x2F-%E6%B6%88%E8%B4%B9%E8%80%85\"><span class=\"toc-text\">异步模式之生产者 &#x2F; 消费者</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#park-amp-unpark\"><span class=\"toc-text\">park &amp; unpark</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">重新理解线程状态转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%8A%8A%E9%94%81\"><span class=\"toc-text\">多把锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B4%BB%E8%B7%83%E6%80%A7\"><span class=\"toc-text\">活跃性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">死锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8D%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">定位死锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B4%BB%E9%94%81\"><span class=\"toc-text\">活锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A5%A5%E9%A5%BF\"><span class=\"toc-text\">饥饿</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ReentrantLock\"><span class=\"toc-text\">ReentrantLock</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E9%87%8D%E5%85%A5\"><span class=\"toc-text\">可重入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E6%89%93%E6%96%AD\"><span class=\"toc-text\">可打断</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%81%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">锁超时</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%93%B2%E5%AD%A6%E5%AE%B6%E9%97%AE%E9%A2%98%E7%9A%84%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">* 哲学家问题的改进</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AC%E5%B9%B3%E9%94%81\"><span class=\"toc-text\">公平锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">条件变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">同步模式之顺序控制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%86%85%E5%AD%98\"><span class=\"toc-text\">共享模型之内存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">Java 内存模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%A7%81%E6%80%A7\"><span class=\"toc-text\">可见性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%80%E4%B8%8D%E5%87%BA%E7%9A%84%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">退不出的循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%A7%81%E6%80%A7-vs-%E5%8E%9F%E5%AD%90%E6%80%A7\"><span class=\"toc-text\">可见性 vs 原子性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%88%E6%AD%A2%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%A4%E9%98%B6%E6%AE%B5%E7%BB%88%E6%AD%A2%E6%A8%A1%E5%BC%8F-%E6%94%B9%E8%BF%9B-amp-%E7%8A%B9%E8%B1%AB%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">终止模式之两阶段终止模式 - 改进 &amp; 犹豫模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Balking-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">Balking 应用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%BA%8F%E6%80%A7\"><span class=\"toc-text\">有序性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E4%B9%8B-volatile\"><span class=\"toc-text\">原理之 volatile</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E8%A7%81%E6%80%A7\"><span class=\"toc-text\">如何保证可见性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Double-check-locking-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Double-check locking 问题</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">解决办法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hanppens-before\"><span class=\"toc-text\">hanppens-before</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B9%A0%E9%A2%98-1\"><span class=\"toc-text\">习题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#balking-%E6%A8%A1%E5%BC%8F%E4%B9%A0%E9%A2%98\"><span class=\"toc-text\">balking 模式习题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%8D%95%E4%BE%8B%E4%B9%A0%E9%A2%98\"><span class=\"toc-text\">线程安全单例习题</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93-1\"><span class=\"toc-text\">本章小结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E6%97%A0%E9%94%81\"><span class=\"toc-text\">共享模型之无锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CAS-%E4%B8%8E-volatile\"><span class=\"toc-text\">CAS 与 volatile</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#volatile\"><span class=\"toc-text\">volatile</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%97%A0%E9%94%81%E6%95%88%E7%8E%87%E9%AB%98\"><span class=\"toc-text\">为什么无锁效率高</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CAS-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">CAS 特点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%AD%90%E6%95%B4%E6%95%B0\"><span class=\"toc-text\">原子整数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%AD%90%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">原子引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AtomicStampedReference\"><span class=\"toc-text\">AtomicStampedReference</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AtomicMarkableReference\"><span class=\"toc-text\">AtomicMarkableReference</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%AD%90%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">原子数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E6%AE%B5%E6%9B%B4%E6%96%B0%E5%99%A8\"><span class=\"toc-text\">字段更新器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%AD%90%E7%B4%AF%E5%8A%A0%E5%99%A8\"><span class=\"toc-text\">原子累加器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E4%B9%8B-LongAdder\"><span class=\"toc-text\">* 源码之 LongAdder</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E4%B9%8B%E4%BC%AA%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">*  原理之伪共享</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LongAdder-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">LongAdder 源码解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Unsafe\"><span class=\"toc-text\">Unsafe</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Unsafe-CAS-%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Unsafe CAS 操作</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93-2\"><span class=\"toc-text\">本章小结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">-</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E4%B9%8B%E4%B8%8D%E5%8F%AF%E5%8F%98\"><span class=\"toc-text\">共享变量之不可变</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">日期转换的问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%90%E5%87%BA\"><span class=\"toc-text\">问题提出</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">解决</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%8F%AF%E5%8F%98%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">不可变设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#final-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">final 的使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E6%8A%A4%E6%80%A7%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">保护性拷贝</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F-Flyweight-Pattern\"><span class=\"toc-text\">享元模式 Flyweight Pattern</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%93%E7%8E%B0\"><span class=\"toc-text\">体现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">简单实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A0%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">无状态</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#final-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">final 原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93-3\"><span class=\"toc-text\">本章小结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\">-</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">共享模型之工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">线程池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">自定义线程池</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ThreadPoolExcutor\"><span class=\"toc-text\">ThreadPoolExcutor</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">线程池状态</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">构造方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#newFixedThreadPool\"><span class=\"toc-text\">newFixedThreadPool</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#newCachedThreadPool\"><span class=\"toc-text\">newCachedThreadPool</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#newSingleThreadExecutor\"><span class=\"toc-text\">newSingleThreadExecutor</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">提交任务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%97%AD%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">关闭线程池</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">异步模式之工作线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%A5%A5%E9%A5%BF-1\"><span class=\"toc-text\">饥饿</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B0%91%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%88%E9%80%82\"><span class=\"toc-text\">创建多少线程池合适</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ScheduledExecutorService\"><span class=\"toc-text\">ScheduledExecutorService</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">捕获异常</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">具体应用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Tomcat-%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">Tomcat 线程池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Connector-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Connector 配置</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Executor-%E7%BA%BF%E7%A8%8B%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BC%98%E5%85%88%E7%BA%A7%E6%9B%B4%E9%AB%98%EF%BC%89\"><span class=\"toc-text\">Executor 线程配置（优先级更高）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Fork-x2F-Join\"><span class=\"toc-text\">Fork&#x2F;Join</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-1\"><span class=\"toc-text\">使用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#J-U-C\"><span class=\"toc-text\">J.U.C</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AQS%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">AQS原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ReentrantLock-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">ReentrantLock 原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">非公平锁实现原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E9%94%81%E8%A7%A3%E9%94%81%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">加锁解锁流程</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E9%87%8D%E5%85%A5%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">可重入原理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E6%89%93%E6%96%AD%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">可打断原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%8F%AF%E6%89%93%E6%96%AD%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">不可打断模式</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E6%89%93%E6%96%AD%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">可打断模式</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%AC%E5%B9%B3%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">公平锁实现原理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">条件变量实现原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#await-%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">await 流程</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#signal-%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">signal 流程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%86%99%E9%94%81\"><span class=\"toc-text\">读写锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ReentrantReadWriteLock\"><span class=\"toc-text\">ReentrantReadWriteLock</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">应用之缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">缓存更新策略</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%86%99%E9%94%81%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">读写锁原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E8%A7%A3%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">图解流程</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#StampedLock\"><span class=\"toc-text\">StampedLock</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Semaphore\"><span class=\"toc-text\">Semaphore</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8-1\"><span class=\"toc-text\">应用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CountdownLatch\"><span class=\"toc-text\">CountdownLatch</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E4%B9%8B%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%87%86%E5%A4%87%E5%AE%8C%E6%AF%95\"><span class=\"toc-text\">* 应用之同步等待多线程准备完毕</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E4%B9%8B%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%BB%93%E6%9D%9F\"><span class=\"toc-text\">* 应用之同步等待多个远程调用结束</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CyclicBarrier\"><span class=\"toc-text\">CyclicBarrier</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%9B%86%E5%90%88%E7%B1%BB%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">线程安全集合类概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ConcurrenthashMap-JDK8\"><span class=\"toc-text\">ConcurrenthashMap JDK8</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#CurrentHashMap-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">CurrentHashMap 原理</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ConcurrenthashMap-JDK7\"><span class=\"toc-text\">ConcurrenthashMap JDK7</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#LinkedBlockingQueue\"><span class=\"toc-text\">LinkedBlockingQueue</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%85%A5%E9%98%9F%E5%87%BA%E9%98%9F\"><span class=\"toc-text\">基本的入队出队</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">加锁分析</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ConcurrentLinkedQuque\"><span class=\"toc-text\">ConcurrentLinkedQuque</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#CopyOnWriteArrayList\"><span class=\"toc-text\">CopyOnWriteArrayList</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ThreadLocal\"><span class=\"toc-text\">ThreadLocal</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ThreadLocal%E3%80%81Thread%E3%80%81ThreadLocalMap%E8%81%94%E7%B3%BB\"><span class=\"toc-text\">ThreadLocal、Thread、ThreadLocalMap联系</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"},"baidu":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/JuneQ"}}}},"mapped":true,"prev_post":{"title":"Kafka入门","uid":"99aa4407a60ebb936774d228acd49096","slug":"Kafka入门","date":"2022-09-30T09:39:05.000Z","updated":"2022-09-30T09:42:53.809Z","comments":true,"path":"api/articles/Kafka入门.json","keywords":null,"cover":[],"text":"1. 环境搭建 主机名 IP ubuntu1 192.168.150.100 ubuntu2 192.168.150.101 ubuntu3 192.168.150.102 注意，以下均为Kraft方式搭建，官方不建议生产环境这么做 截止2022.8.17 1.1 三节点原生集群...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"MQ","slug":"MQ","count":1,"path":"api/tags/MQ.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"},"baidu":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/JuneQ"}}}}},"next_post":{"title":"JVM调优入门","uid":"d286e43e20ffc8862d83a0fa7399e8da","slug":"JVM调优入门","date":"2022-09-30T09:38:43.000Z","updated":"2022-09-30T09:49:53.506Z","comments":true,"path":"api/articles/JVM调优入门.json","keywords":null,"cover":[],"text":"性能监控与调优第一章-概述大厂面试题 背景说明生产环境的问题 生产环境发生内存溢出如何处理？ 生产环境应该给服务器分配多少内存合适？ 如何应对垃圾回收器的性能调优？ 生产环境CPU负载飙高如何处理？ 生产环境应该给分配多少线程合适？ 不加log，如何确定请求是否执行了某一代码？ ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"},"baidu":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/JuneQ"}}}}}}