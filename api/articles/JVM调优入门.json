{"title":"JVM调优入门","uid":"d286e43e20ffc8862d83a0fa7399e8da","slug":"JVM调优入门","date":"2022-09-30T09:38:43.000Z","updated":"2022-09-30T09:49:53.506Z","comments":true,"path":"api/articles/JVM调优入门.json","keywords":null,"cover":[],"content":"<h1 id=\"性能监控与调优\"><a href=\"#性能监控与调优\" class=\"headerlink\" title=\"性能监控与调优\"></a>性能监控与调优</h1><h2 id=\"第一章-概述\"><a href=\"#第一章-概述\" class=\"headerlink\" title=\"第一章-概述\"></a>第一章-概述</h2><h3 id=\"大厂面试题\"><a href=\"#大厂面试题\" class=\"headerlink\" title=\"大厂面试题\"></a>大厂面试题</h3><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211006-shang-wu101320.png\" alt=\"截屏2021-10-06上午10.13.20\" style=\"zoom:50%;\" />\n\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211006-shang-wu101516.png\" alt=\"截屏2021-10-06上午10.15.16\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"背景说明\"><a href=\"#背景说明\" class=\"headerlink\" title=\"背景说明\"></a>背景说明</h3><p><strong>生产环境的问题</strong></p>\n<ul>\n<li>生产环境发生内存溢出如何处理？</li>\n<li>生产环境应该给服务器分配多少内存合适？</li>\n<li>如何应对垃圾回收器的性能调优？</li>\n<li>生产环境CPU负载飙高如何处理？</li>\n<li>生产环境应该给分配多少线程合适？</li>\n<li>不加log，如何确定请求是否执行了某一代码？</li>\n<li>不加log，如何实时查看某个方法的入参与返回值？</li>\n</ul>\n<p><strong>调优目的</strong></p>\n<ul>\n<li>防止出现OOM</li>\n<li>解决OOM</li>\n<li>减少Full GC出现概率</li>\n</ul>\n<h3 id=\"性能优化的步骤\"><a href=\"#性能优化的步骤\" class=\"headerlink\" title=\"性能优化的步骤\"></a>性能优化的步骤</h3><h4 id=\"第一步（发现问题）：性能监控\"><a href=\"#第一步（发现问题）：性能监控\" class=\"headerlink\" title=\"第一步（发现问题）：性能监控\"></a>第一步（发现问题）：性能监控</h4><p>一种以非强行或者入侵方式收集或查看应用运营性数据的活动。</p>\n<p>监控通常是指一种在生产、质量评估或者开发环境下实施的带有预防或主动性的活动。</p>\n<p>当应用相关干系人提出性能问题却没有足够多的线索时，首先我们需要进行性能监控，其次是性能分析。</p>\n<h4 id=\"第二步（排查问题）：性能分析\"><a href=\"#第二步（排查问题）：性能分析\" class=\"headerlink\" title=\"第二步（排查问题）：性能分析\"></a>第二步（排查问题）：性能分析</h4><p>一种以侵入方式收集运行性能数据的活动，它会影响应用的吞吐量或者响应性。</p>\n<p>性能分析是针对性能问题的答复结果，关注的范围通常比性能监控更加集中。</p>\n<p>性能分析很少在生产环境下进行，通常是在质量评估、系统测试或者开发环境下进行，是性能监控之后的步骤。</p>\n<h4 id=\"第三步（解决问题）：性能调优\"><a href=\"#第三步（解决问题）：性能调优\" class=\"headerlink\" title=\"第三步（解决问题）：性能调优\"></a>第三步（解决问题）：性能调优</h4><p>一种为改善应用响应性或吞吐量而更改参数、源代码、属性配置的活动，性能调优是在性能监控、性能分析之后的活动。</p>\n<h3 id=\"性能测评指标\"><a href=\"#性能测评指标\" class=\"headerlink\" title=\"性能测评指标\"></a>性能测评指标</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>停顿时间（响应时间)</p></blockquote>\n<p>提交请求和返回请求的响应之间使用的时间，一般比较关注平均响应时间</p>\n<p>常用操作的响应时间表：</p>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211006-shang-wu103606.png\" alt=\"截屏2021-10-06上午10.36.06\" style=\"zoom:50%;\" />\n\n<p>在垃圾回收环节中：</p>\n<p>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。<br><code>-XX:MaxGCPauseMillis</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>吞吐量 </p></blockquote>\n<p>在GC中：运行用户代码的时间占总运行时间的比例（总运行时间：程序的运行时间 + 内存回收时间）；吞吐量为 1 - 1&#x2F;(1+n)<br><code>-XX:GCTimeRatio=n</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>并发数</p></blockquote>\n<p>同一时刻，对服务器有实际交互的请求数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>内存占用</p></blockquote>\n<p>Java堆区所占的内存大小</p>\n<h2 id=\"第二章-JVM监控及诊断工具（命令行篇）\"><a href=\"#第二章-JVM监控及诊断工具（命令行篇）\" class=\"headerlink\" title=\"第二章-JVM监控及诊断工具（命令行篇）\"></a>第二章-JVM监控及诊断工具（命令行篇）</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>性能诊断是软件工程师在日常工作中需要经常面对和解决的问题，在用户体验至上的今天，解决好应用的性能问题能带来巨大的收益。</p>\n<h3 id=\"jps：查看正在运行的-Java-进程-pid\"><a href=\"#jps：查看正在运行的-Java-进程-pid\" class=\"headerlink\" title=\"jps：查看正在运行的 Java 进程 pid\"></a>jps：查看正在运行的 Java 进程 pid</h3><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211006-shang-wu110455.png\" alt=\"截屏2021-10-06上午11.04.55\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"jstat：查看JVM统计信息\"><a href=\"#jstat：查看JVM统计信息\" class=\"headerlink\" title=\"jstat：查看JVM统计信息\"></a>jstat：查看JVM统计信息</h3><p><code>jstat -&lt;option&gt; [-t][-h&lt;lines&gt;]&lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</code></p>\n<p><strong>option参数</strong></p>\n<ul>\n<li>垃圾回收相关<ul>\n<li>-gc：显示GC相关的堆信息。包括Eden区、两个Survivor区、老年代、永久代等的容量、已用空间、GC时间合计等信息。</li>\n<li>-gccapacity：显示内容与-gc基本相同，但输出主要关注Java堆各个区域用到的最大、最小空间</li>\n<li>-gcutil：显示内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</li>\n<li>-gccause：与上面功能一样，但是会额外输出导致最后一次或当前正在发生的GC产生的原因。</li>\n<li>-gcnew：显示新生代GC状况</li>\n<li>-gcnewcapacity：显示内容与上面基本相同，输出主要关注使用到的最大、最小空间</li>\n<li>-geold：显示老年代GC状况</li>\n<li>-gcoldcapacity：显示内容与-gcold基本相同，输出主要关注使用到的最大、最小空间</li>\n<li>-gcpermcapacity：显示永久代使用到的最大、最下空间</li>\n</ul>\n</li>\n<li>JIT相关<ul>\n<li>-compiler：显示JIT编译器编译过的方法、耗时等信息</li>\n<li>-printcompilation：输出已经被JIT编译的方法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jinfo：实时查看和修改JVM配置参数\"><a href=\"#jinfo：实时查看和修改JVM配置参数\" class=\"headerlink\" title=\"jinfo：实时查看和修改JVM配置参数\"></a>jinfo：实时查看和修改JVM配置参数</h3><ul>\n<li>jinfo -flag 具体参数 PID   查看某个java进程的具体参数的值</li>\n<li>jinfo -floag [+|-]具体参数  PID       修改该参数的值，针对boolean类型</li>\n<li>jinfo -floag 具体参数&#x3D;n  PID        修改该参数的值，针对数值类型</li>\n<li>java -XX:+PrintFlagsInitial    查看所有JVM参数启动的初始值</li>\n<li>java -XX:+PrintFlagsFinal     查看所有JVM参数的最终值</li>\n</ul>\n<h3 id=\"jmap：导出内存映像文件-amp-内存使用情况\"><a href=\"#jmap：导出内存映像文件-amp-内存使用情况\" class=\"headerlink\" title=\"jmap：导出内存映像文件&amp;内存使用情况\"></a>jmap：导出内存映像文件&amp;内存使用情况</h3><ul>\n<li><p><strong>-dump</strong>：生成Java堆转储快照-dump文件，-dump:live 只保存堆中存活的对象</p>\n</li>\n<li><p><strong>-heap</strong>：输出整个堆空间的详细信息，包括GC的使用、堆配置信息，以及内存的使用信息等，-heap:live 只保存堆中存活的对象</p>\n</li>\n<li><p><strong>-histo</strong>：输出堆中对象的统计信息，包括类、实例数量和合计容量</p>\n</li>\n<li><p>-permstat：以ClassLoader为统计口径输出永久代的内存状况信息（仅linux&#x2F;solaris）</p>\n</li>\n<li><p>-finalizerinfo：显示在F-Queue中等带Finalizer线程执行finalize方法的对象（仅linux&#x2F;solaris）</p>\n</li>\n<li><p>-F：当虚拟机进程对-dump选项没有任何响应时，可以使用此选项强制生成dump文件（仅linux&#x2F;solaris）</p>\n</li>\n<li><p>-h | -help：jmap工具使用帮助命令</p>\n</li>\n<li><p>-J <flag> ：传递参数给jmap启动的jvm</p>\n</li>\n<li><p>手动生成：</p>\n<ul>\n<li>jmap -dump:live,format&#x3D;b,file&#x3D;<path>  <pid></li>\n</ul>\n</li>\n<li><p>自动生成</p>\n<ul>\n<li>-XX:+HeapDumpOnOutOfMemoryError     设置开启</li>\n<li>-XX:+HeapDumpPath&#x3D;&lt;filename.hrof&gt;      指定位置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jhat：JDK自带堆分析工具\"><a href=\"#jhat：JDK自带堆分析工具\" class=\"headerlink\" title=\"jhat：JDK自带堆分析工具\"></a>jhat：JDK自带堆分析工具</h3><p>略。请使用图形化分析工具</p>\n<h3 id=\"jstack：打印JVM中线程快照\"><a href=\"#jstack：打印JVM中线程快照\" class=\"headerlink\" title=\"jstack：打印JVM中线程快照\"></a>jstack：打印JVM中线程快照</h3><p><code>jstack option pid</code></p>\n<ul>\n<li>-F：当正常输出的请求不被响应时，强制输出线程堆栈</li>\n<li>-l：除堆栈外，显示关于锁的附加信息</li>\n<li>-m：如果调用到本地方法的话，可以显示C&#x2F;C++的堆栈</li>\n<li>-h：帮助操作</li>\n</ul>\n<h3 id=\"jcmd：多功能命令行\"><a href=\"#jcmd：多功能命令行\" class=\"headerlink\" title=\"jcmd：多功能命令行\"></a>jcmd：多功能命令行</h3><ul>\n<li>jcm -l：列出所有JVM进程</li>\n<li>jcmd pid help：针对指定的进程，列出支持的所有命令</li>\n<li>jcmd pid 具体命令：显示指定进程的指令命令的数据</li>\n</ul>\n<h2 id=\"第三章-JVM监控及诊断工具（图形界面）\"><a href=\"#第三章-JVM监控及诊断工具（图形界面）\" class=\"headerlink\" title=\"第三章-JVM监控及诊断工具（图形界面）\"></a>第三章-JVM监控及诊断工具（图形界面）</h2><h3 id=\"Visual-VM\"><a href=\"#Visual-VM\" class=\"headerlink\" title=\"Visual VM\"></a>Visual VM</h3><p><strong>远程连接</strong></p>\n<ol>\n<li>确定远程服务器的ip地址</li>\n<li>添加JMX（通过JMX技术具体监控远端服务器的哪个Java进程）</li>\n<li>修改 bin&#x2F;catalina.sh 文件，连接远程的tomcat</li>\n<li>在 ..&#x2F;conf 中添加jmxremote.access 和 jmxremote.password 文件</li>\n<li>将服务器地址改为公网ip地址</li>\n<li>设置阿里云安全策略和防火墙策略</li>\n<li>启动tomcat，查看tomcat启动日志和端口监听</li>\n<li>JMX中输出端口号、用户名、密码登录</li>\n</ol>\n<h3 id=\"补充：内存泄漏案例\"><a href=\"#补充：内存泄漏案例\" class=\"headerlink\" title=\"补充：内存泄漏案例\"></a>补充：内存泄漏案例</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>静态集合类</li>\n</ol></blockquote>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211007-shang-wu103113.png\" alt=\"截屏2021-10-07上午10.31.13\" style=\"zoom:50%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol start=\"2\">\n<li>单例模式</li>\n</ol></blockquote>\n<p>单例模式，和静态集合导致内存泄漏的原因类似，因为单例的静态特性，其生命周期和JVM生命周期一样长，所以如果单例对象持有外部对象的引用，那么这个对象不会被回收，造成内存泄漏。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>3-内部类持有外部类</p></blockquote>\n<p>内部类持有外部类，如果一个外部类的实例对象方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持有外部类的实例对象，这个外部类对象不会被垃圾回收，造成内存泄漏。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>4-各种连接，如数据库连接、网络连接和IO连接</p></blockquote>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211007-shang-wu103613.png\" alt=\"截屏2021-10-07上午10.36.13\" style=\"zoom:50%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>5-变量（对象）不合理的作用域</p></blockquote>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211007-shang-wu103741.png\" alt=\"截屏2021-10-07上午10.37.41\" style=\"zoom:50%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>6-改变哈希值</p></blockquote>\n<p>当一个对象被存储进HashSet集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了。否则，对象修改后的哈希值与最初存储进HashSet集合时的哈希值就不同了，在这种情况下，即使在contains方法使用该对象的当前引用作为的参数去HashSet集合中检索对象，也将返回找不到对象的结果这也会导致无法从HashSet集合中单独删除当前对象，造成内存泄漏。</p>\n<p>这也是String为什么被设置成了不可变类型，我们可以放心地把String存入HashSet，或者把String当做HashMap的key值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>7-缓存泄漏</p></blockquote>\n<p>内存泄漏的另外一个常见来源是缓存，一旦把对象引用放到缓存中，就很容易遗忘。对于这个问题，可以使用WeakHashMap代表缓存，此种Map的特点是，当除了自身有对key的引用外，此key没有其他引用那么此map会自动丢弃此值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>8-监听器和回调</p></blockquote>\n<p>内存泄漏第三个常见来源是监听器和其他回调，如果客户端在你实现的API中注册回调，却没有显式地取消，那么就会聚集。</p>\n<p>需要确保回调即被当做垃圾回收的最佳方法是只保存它的弱引用，例如将它们保存为 WeakHashMap 中的键。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211007-shang-wu110707.png\" alt=\"截屏2021-10-07上午11.07.07\"></p>\n<h2 id=\"第四章-分析GC日志\"><a href=\"#第四章-分析GC日志\" class=\"headerlink\" title=\"第四章-分析GC日志\"></a>第四章-分析GC日志</h2><h3 id=\"01-GC日志参数\"><a href=\"#01-GC日志参数\" class=\"headerlink\" title=\"01-GC日志参数\"></a>01-GC日志参数</h3><p> 见附录</p>\n<h3 id=\"02-GC日志格式\"><a href=\"#02-GC日志格式\" class=\"headerlink\" title=\"02-GC日志格式\"></a>02-GC日志格式</h3><h4 id=\"复习：GC分类\"><a href=\"#复习：GC分类\" class=\"headerlink\" title=\"复习：GC分类\"></a>复习：GC分类</h4><p>针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC）</p>\n<ul>\n<li>部分收集：不是完整收集整个Java堆的垃圾。其中又分为：<ul>\n<li>新生代收集（Minor GC &#x2F; Young GC）：只是新生代（Eden\\S1,S1）的垃圾收集</li>\n<li>老年代收集（Major GC &#x2F; Old GC）：只是老代的垃圾收集<ul>\n<li>目前，只有CMS GC会有单独收集老年代的行为。</li>\n<li>注意，很多时候Major GC 和 Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收</li>\n</ul>\n</li>\n<li>混合收集（Mixed GC）：收集整个新生代以及老年代的垃圾。<ul>\n<li>目前，只有G1 GC会有这种行为</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>整堆收集（Full GC）：收集整个java堆和方法区的垃圾</li>\n</ul>\n<h4 id=\"GC日志分类\"><a href=\"#GC日志分类\" class=\"headerlink\" title=\"GC日志分类\"></a>GC日志分类</h4><p><strong>MinorGC</strong></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/20210217184224387.png\" alt=\"20210217184224387\"></p>\n<p><strong>FullGC</strong></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/20210217184232633.png\" alt=\"20210217184232633\"></p>\n<h3 id=\"03-GC日志分析工具\"><a href=\"#03-GC日志分析工具\" class=\"headerlink\" title=\"03-GC日志分析工具\"></a>03-GC日志分析工具</h3><h4 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h4><ul>\n<li>Serial -&gt; Default   New  Generation  -&gt; [DefNew]</li>\n<li>ParNew -&gt; Parallel New Generation -&gt; [ParNew] </li>\n<li>Parallel Scavenge -&gt; [PSYoungGen]</li>\n<li>Parallel Old Generation -&gt; [ParOldGen]</li>\n<li>G1 -&gt; garabage-first heap</li>\n<li>Allocation Failure -&gt; 表名本次引起GC的原因是年轻代中没有足够的空间能够存储新的数据了</li>\n</ul>\n<h4 id=\"GC前后情况\"><a href=\"#GC前后情况\" class=\"headerlink\" title=\"GC前后情况\"></a>GC前后情况</h4><p>通过图示，我们可以发现GC日志的规律一般都是：<br>GC前内存占用 -&gt; GC后内存占用（该区域内存总大小）</p>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211008-xia-wu125807.png\" alt=\"截屏2021-10-08下午12.58.07\" style=\"zoom:50%;\" />\n\n<p>中括号内：GC回收前年轻代堆大小，回收后大小，（年轻代堆总大小）<br>括号外：GC回收前年轻代和老年代的大小，回收后大小，（年轻大和老年代总大小）</p>\n<h4 id=\"GC时间\"><a href=\"#GC时间\" class=\"headerlink\" title=\"GC时间\"></a>GC时间</h4><p>GC日志中有三个时间：user、sys、real</p>\n<ul>\n<li>user - 进程执行用户态代码（核心之外）所使用的时间。<strong>这是执行此进程所使用的实际CPU时间</strong>，其他进程和此进程阻塞的时间并不包括在内。在垃圾收集的情况下，表示GC线程执行所使用的CPU总时间。</li>\n<li>sys - 进程在内核态消耗的CPU时间，即 <strong>在内核执行系统调用或等待系统事件所使用的的CPU时间</strong></li>\n<li>real - 程序从开始到结束所使用的时钟时间。这个时间包括其他进程使用的时间片和进程阻塞的时间（比如等带 I&#x2F;O 完成）。对于并行GC，这个数字应该接近（用户时间 + 系统时间）除以垃圾收集器使用的线程数。</li>\n</ul>\n<p>由于多核的原因，一般的GC事件中，real time要小于 sys+user 的，因为一般是多个线程并发的去做GC，所以real time是要小于sys + user的。如果 real &gt; sys + user 的话，则你的应用可能存在以下问题：IO负载非常重或者CPU不够用。</p>\n","text":"性能监控与调优第一章-概述大厂面试题 背景说明生产环境的问题 生产环境发生内存溢出如何处理？ 生产环境应该给服务器分配多少内存合适？ 如何应对垃圾回收器的性能调优？ 生产环境CPU负载飙高如何处理？ 生产环境应该给分配多少线程合适？ 不加log，如何确定请求是否执行了某一代码？ ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"},{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">性能监控与调优</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">第一章-概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E9%A2%98\"><span class=\"toc-text\">大厂面试题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">背景说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">性能优化的步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%88%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98%EF%BC%89%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7\"><span class=\"toc-text\">第一步（发现问题）：性能监控</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%88%E6%8E%92%E6%9F%A5%E9%97%AE%E9%A2%98%EF%BC%89%EF%BC%9A%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90\"><span class=\"toc-text\">第二步（排查问题）：性能分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%88%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%EF%BC%89%EF%BC%9A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">第三步（解决问题）：性能调优</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%84%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">性能测评指标</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0-JVM%E7%9B%91%E6%8E%A7%E5%8F%8A%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7%EF%BC%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AF%87%EF%BC%89\"><span class=\"toc-text\">第二章-JVM监控及诊断工具（命令行篇）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jps%EF%BC%9A%E6%9F%A5%E7%9C%8B%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84-Java-%E8%BF%9B%E7%A8%8B-pid\"><span class=\"toc-text\">jps：查看正在运行的 Java 进程 pid</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jstat%EF%BC%9A%E6%9F%A5%E7%9C%8BJVM%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">jstat：查看JVM统计信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jinfo%EF%BC%9A%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E5%92%8C%E4%BF%AE%E6%94%B9JVM%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">jinfo：实时查看和修改JVM配置参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jmap%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%86%85%E5%AD%98%E6%98%A0%E5%83%8F%E6%96%87%E4%BB%B6-amp-%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">jmap：导出内存映像文件&amp;内存使用情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jhat%EF%BC%9AJDK%E8%87%AA%E5%B8%A6%E5%A0%86%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">jhat：JDK自带堆分析工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jstack%EF%BC%9A%E6%89%93%E5%8D%B0JVM%E4%B8%AD%E7%BA%BF%E7%A8%8B%E5%BF%AB%E7%85%A7\"><span class=\"toc-text\">jstack：打印JVM中线程快照</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jcmd%EF%BC%9A%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%91%BD%E4%BB%A4%E8%A1%8C\"><span class=\"toc-text\">jcmd：多功能命令行</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0-JVM%E7%9B%91%E6%8E%A7%E5%8F%8A%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7%EF%BC%88%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%EF%BC%89\"><span class=\"toc-text\">第三章-JVM监控及诊断工具（图形界面）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Visual-VM\"><span class=\"toc-text\">Visual VM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%EF%BC%9A%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">补充：内存泄漏案例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%88%86%E6%9E%90GC%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">第四章-分析GC日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#01-GC%E6%97%A5%E5%BF%97%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">01-GC日志参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#02-GC%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">02-GC日志格式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E4%B9%A0%EF%BC%9AGC%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">复习：GC分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#GC%E6%97%A5%E5%BF%97%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">GC日志分类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#03-GC%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">03-GC日志分析工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8\"><span class=\"toc-text\">垃圾收集器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#GC%E5%89%8D%E5%90%8E%E6%83%85%E5%86%B5\"><span class=\"toc-text\">GC前后情况</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#GC%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">GC时间</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"}}}},"mapped":true,"prev_post":{"title":"JUC并发编程","uid":"75cf46e9ea7d77c8be442b61749fec6f","slug":"JUC并发编程","date":"2022-09-30T09:38:55.000Z","updated":"2022-09-30T09:43:41.709Z","comments":true,"path":"api/articles/JUC并发编程.json","keywords":null,"cover":[],"text":"JUC并发编程进程与线程进程 程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的 当一个程序被运行，从磁盘加载这个程序的代码至内存，这是就开启了一个进...","link":"","photos":[],"count_time":{"symbolsCount":"102k","symbolsTime":"1:32"},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"JUC","slug":"JUC","count":1,"path":"api/tags/JUC.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"}}}}},"next_post":{"title":"JVM运行时参数","uid":"1f9dc448d62e7f280399f2b271c23383","slug":"JVM运行时参数","date":"2022-09-30T09:38:36.000Z","updated":"2022-09-30T09:42:12.603Z","comments":true,"path":"api/articles/JVM运行时参数.json","keywords":null,"cover":[],"text":"JVM运行时参数01-JVM 参数选项类型类型一：标准参数选项 特点 以 - 开头 比较稳定，以后基本不会变化 可以用 java 或 java -help 看到可选项 类型二：-X参数选项 特点 非标准化参数 功能比较稳定 以 -X 开头 JVM 的 JIT 编译模式的选项 可以...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"},{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"}}}}}}