{"title":"Redis基础","uid":"b6845422ba4775a7cab0c414606e3ecd","slug":"Redis基础","date":"2022-09-30T09:26:18.000Z","updated":"2022-09-30T09:28:56.369Z","comments":true,"path":"api/articles/Redis基础.json","keywords":null,"cover":[],"content":"<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220101105817502.png\" alt=\"image-20220101105817502\"></p>\n<h2 id=\"Linux-基础环境配置\"><a href=\"#Linux-基础环境配置\" class=\"headerlink\" title=\"Linux 基础环境配置\"></a>Linux 基础环境配置</h2><ol>\n<li>配置gcc</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 检查是否安装</span>\ngcc <span class=\"token parameter variable\">--version</span>\n<span class=\"token comment\"># 未安装的话</span>\nyum <span class=\"token function\">install</span> centos-release-scl scl-utils-build\nyum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> devtoolset-8-toolchain\nscl <span class=\"token builtin class-name\">enable</span> devtoolset-8 <span class=\"token function\">bash</span>\n<span class=\"token comment\"># 再次测试</span>\ngcc <span class=\"token parameter variable\">--version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>压缩编译redis</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 解压缩</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> redis-6.2.6.tar.gz\n<span class=\"token comment\"># 编译</span>\n<span class=\"token builtin class-name\">cd</span> redis-6.2.6\n<span class=\"token function\">make</span> \n<span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>后台启动</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看是否成功安装</span>\n<span class=\"token builtin class-name\">cd</span> /usr/local/bin\n<span class=\"token comment\"># 后台启动</span>\nredis-server /opt/redis-6.2.6/redis.conf\n<span class=\"token comment\"># 检验端口</span>\n<span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>关闭</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis-cli <span class=\"token function\">shutdown</span>\n<span class=\"token comment\"># 或</span>\n<span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> pid\n<span class=\"token comment\"># 多实例关闭</span>\nredis-cli <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span> <span class=\"token function\">shutdown</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Redis-基础知识\"><a href=\"#Redis-基础知识\" class=\"headerlink\" title=\"Redis 基础知识\"></a>Redis 基础知识</h2><ol>\n<li>默认16个数据库，类似数组下标从0开始，初始默认使用0号</li>\n<li>使用命令 <code>select &lt;dbid&gt;</code> 来切换数据库，如 <code>select 8</code></li>\n<li>统一密码管理，所有库使用同样的密码</li>\n<li><code>dbsize</code> 查看当前数据库的 key 数量</li>\n<li><code>flushdb</code>  清空当前库</li>\n<li><code>flushall</code>  通杀全部库</li>\n</ol>\n<h3 id=\"五大数据类型\"><a href=\"#五大数据类型\" class=\"headerlink\" title=\"五大数据类型\"></a>五大数据类型</h3><p><a href=\"https://zhuanlan.zhihu.com/p/531323771\">Redis基本数据结构及底层实现原理 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/148562122\">最详细的Redis五种数据结构详解（理论+实战），建议收藏。 - 知乎 (zhihu.com)</a></p>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><ul>\n<li>Redis最基本的类型，一个key对应一个value；</li>\n<li>String 类型是二进制安全的，意味着Redis的 string 可以包含任何数据，比如 jpg 图片或者序列化对象；</li>\n<li>value 最大值为 512M</li>\n</ul>\n<h5 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> key value   \t<span class=\"token comment\"># 设置键值，也可用与更改</span>\nget key\t\t\t\t\t\t<span class=\"token comment\"># 获取值</span>\nappend key value  <span class=\"token comment\"># 为 key 追加值</span>\nstrlen key\t\t\t\t<span class=\"token comment\"># 获取 key 长度</span>\nsetnx key value   <span class=\"token comment\"># 只有 key 不存在时，才设置 key 值</span>\n\nincr key \t\t\t\t\t<span class=\"token comment\"># 将 key 中存储的【数字字符串】+1，如果为空，则新值为1</span>\ndecr key \t\t\t\t\t<span class=\"token comment\"># 同上，值减一</span>\n\nmset key1 value1 key2 value2 <span class=\"token punctuation\">..</span>. <span class=\"token comment\"># 同时设置一个或多个 key-value 对</span>\nmget key1 key2 <span class=\"token punctuation\">..</span>. <span class=\"token comment\"># 同时获取多个 key-value对</span>\nmsetnx key1 value1 key2 value2  <span class=\"token comment\"># 设置多个值【有一个失败则都失败】</span>\n\ngetrange key fromIndex toIndex  <span class=\"token comment\"># 切割 value -> []</span>\nsetrange key fromIndex  value   <span class=\"token comment\"># 设置 key</span>\nsetex key expireTime value  \t\t<span class=\"token comment\"># 设置 key-value 和过期时间</span>\ngetset key value\t\t\t\t\t\t\t\t<span class=\"token comment\"># 设置了新值同时获得旧值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h5><p>String 的数据结构为简单动态字符串（Simple Dynamic String，缩写SDS）。是可以修改的字符串，内部结构实现上类似Java的ArrayList，采用<strong>预分配冗余空间</strong>的方式来减少内存的频繁分配。</p>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220101130921655.png\" alt=\"image-20220101130921655\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><ul>\n<li>单值多键；</li>\n<li>Redis 列表是简单的字符串列表，按照插入顺序排序。可以头插或者尾插；</li>\n<li>它的底层实际上是个双向链表，对两端操作性能很高，通过索引下标操作性能会比较差</li>\n</ul>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220101132831023.png\" alt=\"image-20220101132831023\" style=\"zoom:50%;\" />\n\n<h5 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lpush/rpush  key value1 value2 <span class=\"token punctuation\">..</span>.  <span class=\"token comment\"># 头插/尾插</span>\nlrange  key fromInded toIndex  <span class=\"token comment\"># 范围 get，包括首位 [0,-1]查所有 可以使用负数，表示倒数</span>\nlpop/rpop  key \t\t   <span class=\"token comment\"># 删除且获取值</span>\nbrpop k <span class=\"token function\">v</span> <span class=\"token comment\"># 阻塞式获取值</span>\nrpoplpush list_from list_to <span class=\"token comment\"># 移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</span>\n\nlindex key index \t\t <span class=\"token comment\"># 按照索引下标获取元素</span>\nllen key \t\t\t\t\t\t <span class=\"token comment\"># 获得列表长度</span>\nlinsert key before value newvalue  <span class=\"token comment\"># 在 value 后面都插入 newvalue 插入值</span>\nlrem key count value\t\t <span class=\"token comment\"># 从左到右删除 count 个指定 value  count=0移除所有  count&lt;0取绝对值</span>\nlset key index value <span class=\"token comment\"># 将列表 key 下标为 index 的值替换成 value</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"数据结构-1\"><a href=\"#数据结构-1\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h5><ul>\n<li>Redis中的列表在3.2之前的版本是使用<code>ziplist</code>和<code>linkedlist</code>进行实现的。在3.2之后的版本就是引入了<code>quicklist</code>。</li>\n<li>quicklist就是把一个个的ziplist串成双向链表的形式</li>\n</ul>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><ul>\n<li>Set对外提供功能与list类似，特殊之处在于set是可以<strong>自动排重</strong>的。</li>\n<li>Set是string类型的无序集合。他底层其实是一个 value 为 null 和 hash表，所以添加、删除、查找的复杂度都是O(1)</li>\n<li>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</li>\n</ul>\n<h5 id=\"常用命令-2\"><a href=\"#常用命令-2\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sadd key value1 value2  <span class=\"token comment\"># 将一个或多个元素加入到 key 中，忽略已存在的</span>\nsmembers key \t\t\t\t\t\t<span class=\"token comment\"># 取出该集合的所有值</span>\nsismember key value  \t\t<span class=\"token comment\"># 判断集合 key 是否含有 value，返回0 - 1</span>\nscard key\t\t\t\t\t\t\t\t<span class=\"token comment\"># 返回该集合的元素个数</span>\nsrem key value1 value2\t<span class=\"token comment\"># 删除集合中的某个元素</span>\nspop key\t\t\t\t\t\t\t\t<span class=\"token comment\"># 随机 pop 一个值</span>\nsrandmember key n       <span class=\"token comment\"># 随即从该集合中取出 n 个值，不会删除元素</span>\nsmove src dst value \t\t<span class=\"token comment\"># 把集合中一个值从一个集合移动到另外一个集合</span>\nsinter key1 key2        <span class=\"token comment\"># 返回两个集合【交集】</span>\nsunion key1 key2        <span class=\"token comment\"># 返回两个集合【并集】</span>\n<span class=\"token function\">sdiff</span>  key1 key2        <span class=\"token comment\"># 返回两个集合【差集】（key1-key2)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"数据结构-2\"><a href=\"#数据结构-2\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h5><ul>\n<li><strong>intset || hashtable</strong></li>\n<li>当集合对象保存的元素都是整数，并且个数不超过512个时，使用<strong>intset</strong>编码，否则使用<strong>hashtable</strong>编码。</li>\n</ul>\n<h4 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h4><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220101171506153.png\" alt=\"image-20220101171506153\" style=\"zoom:50%;\" />\n\n<h5 id=\"常用命令-3\"><a href=\"#常用命令-3\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hset  key   field value \t\t<span class=\"token comment\"># 简单添加</span>\nhget  key   field  \t\t\t\t\t<span class=\"token comment\"># 简单获取</span>\nhmset key  f1 v1 f2 v2 <span class=\"token punctuation\">..</span>.  <span class=\"token comment\"># 批量添加</span>\nhexists key1  field \t\t\t\t<span class=\"token comment\"># 检查 field 是否存在</span>\nhkeys  key                  <span class=\"token comment\"># 列出该 hash 集合的所有 field</span>\nhvals  key\t\t\t\t\t\t\t\t\t<span class=\"token comment\"># 列出该 hash 集合的所有 value</span>\nhincrby key field n \t\t\t\t<span class=\"token comment\"># 为哈希表 key 中的域 field 值+n</span>\nhsetnx key field value      <span class=\"token comment\"># 不存在 field - value时，添加值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"数据结构-3\"><a href=\"#数据结构-3\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h5><ul>\n<li><strong>ziplist || hashtable</strong></li>\n<li>哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节并且保存的键值对数量小于 512 个，使用<strong>ziplist</strong> 编码；否则使用<strong>hashtable</strong>；</li>\n</ul>\n<h4 id=\"Zset\"><a href=\"#Zset\" class=\"headerlink\" title=\"Zset\"></a>Zset</h4><ul>\n<li>Redis<strong>有序集合</strong>zset与普通集合set非常相似，<strong>都没有重复元素</strong></li>\n<li>Zset 每个成员都关联了一个评分（score），这个评分（score）被用来按照从低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但评分可以重复。</li>\n<li>可以根据评分（score）或次序（position）来获取一个范围的元素</li>\n<li>访问有序集合的中间元素也是非常快的，因此能够使用有序集合作为一个没有重复成员的只能列表</li>\n</ul>\n<h5 id=\"常用命令-4\"><a href=\"#常用命令-4\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">zadd key score1 value1 score2 value2 <span class=\"token punctuation\">..</span>.  <span class=\"token comment\"># 将一个或多个元素添加到 key 中</span>\nzrange key fromIndex toIndex <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 返回下标在之间的元素，带WITHSCORES，可以让分数和值一起返回</span>\nzrangebyscore key min max <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>limit offset count<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 返回有序集合 key 中，所有 min &lt;= score &lt;= max 的成员，返回结果按score从小到大排序</span>\nzscore <span class=\"token builtin class-name\">set</span> value <span class=\"token comment\"># 获取set中value的分值</span>\nzrevrangebyscore key max min <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>limit offset count<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 同上，改为从大到小排列</span>\nzincrby key n value   <span class=\"token comment\"># key 中的 value 加上增量 n</span>\nzrem key value \t\t\t\t<span class=\"token comment\"># 删除指定元素</span>\nzcount key min max    <span class=\"token comment\"># 统计该集合，分数区间内的元素个数</span>\nzrank key value\t\t\t\t<span class=\"token comment\"># 返回该集合在集合中的排名，从0开始</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"数据结构-4\"><a href=\"#数据结构-4\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h5><ul>\n<li><p>有序集合的编码可以是ziplist或者skiplist。</p>\n</li>\n<li><p>当有序集合保存的元素个数小于128个，且所有元素成员长度都小于64字节时，使用ziplist编码，否则，使用skiplist编码。</p>\n</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/v258799bceef062c08b18d6c092525c8051440w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/v2cf193c3801410ca94c3fe61c1edb91581440w.jpg\" alt=\"img\"></p>\n<h4 id=\"数据结构汇总\"><a href=\"#数据结构汇总\" class=\"headerlink\" title=\"数据结构汇总\"></a>数据结构汇总</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/v2fc8e2a11644c48b023e4fa974d9bba041440w.jpg\" alt=\"img\"></p>\n<ul>\n<li><strong>String</strong><ul>\n<li><strong>int</strong>：只有整数时</li>\n<li>（SDS之一）<strong>raw</strong>：字符串长度大于32个字节</li>\n<li>（SDS之二）<strong>embstr</strong>：字符串长度小于等于32个字节</li>\n</ul>\n</li>\n<li><strong>List</strong><ul>\n<li>（3.2之前）<strong>ziplist</strong></li>\n<li>（3.2之前）<strong>linkedlist</strong>：双向链表</li>\n<li>（3.2之后）<strong>quicklist</strong>：取代上面两者，quicklist就是把一个个的ziplist串成双向链表的形式</li>\n</ul>\n</li>\n<li><strong>Hash</strong><ul>\n<li><strong>ziplist</strong>：key和value字符串长度都小于 64 字节并且保存的键值对数量小于 512 </li>\n<li><strong>hashtable</strong>：上面的反例</li>\n</ul>\n</li>\n<li><strong>Set</strong><ul>\n<li><strong>intset</strong>：元素都是整数，并且个数不超过512个</li>\n<li><strong>hashtable</strong>：上面的反例</li>\n</ul>\n</li>\n<li><strong>ZSet</strong><ul>\n<li><strong>ziplist</strong>：元素个数小于128个，且所有元素成员长度都小于64字节</li>\n<li><strong>skiplist+ht</strong>：上面的反例</li>\n</ul>\n</li>\n</ul>\n<p><strong>注：（7.0之后）redis7把ziplist替换为了listpack</strong></p>\n<ul>\n<li>redis7把ziplist替换为了listpack</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220101135024719.png\" alt=\"image-20220101135024719\"></p>\n<p>原始ziplist结构图：</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/v28fd5104994d92443af483d747d6313901440w.png\" alt=\"img\"></p>\n<p>quicklist结构图：</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/v2ad4928756bc89b47fd2ff17cec1519a5r.jpg\" alt=\"img\"></p>\n<p>单独看这个图会感觉比较眼熟，这里再放下ziplist的结构图示：</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/v208adb57e7fe04de205c2d683dc6e1eder.jpg\" alt=\"img\"></p>\n<p>会发现整体上看，listpack少了一些。其实相比较ziplist，listpack中的优化在于entry中。</p>\n<p>不同于ziplist，listpackEntry中的len记录的是<strong>当前entry的长度，而非上一个entry的长度。</strong>listpackEntry中可存储的为字符串或整型。</p>\n<ul>\n<li>当存储的为字符串，那么lsentry的sval不为空，slen记录大小。</li>\n<li>当存储的为整形，那么lval记录整型，sval字段为空</li>\n</ul>\n<h3 id=\"Bitmaps\"><a href=\"#Bitmaps\" class=\"headerlink\" title=\"Bitmaps\"></a>Bitmaps</h3><p>合理使用操作位能有效地提高内存使用率和开发效率</p>\n<ol>\n<li>Bitmaps 本身不是一种数据类型，实际上它就是字符串（key-value），但是它可以对字符串的位进行操作。</li>\n<li>Bitmaps 单独提供了一套命令，所以在Redis中使用 Bitmaps 和使用字符串的方法不太相同。可以把 Bitmaps 想象成一个以位为单温的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做偏移量。</li>\n</ol>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102114912545.png\" alt=\"image-20220102114912545\" style=\"zoom:50%;\" />\n\n<h4 id=\"常用命令-5\"><a href=\"#常用命令-5\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setbit key offset value \t\t<span class=\"token comment\"># 设置/清除Bitmaps中某个偏移量的值 0/1 from index 0</span>\ngetbit key offset \t\t\t\t\t<span class=\"token comment\"># 获取 Bitmaps 中某个偏移量的值</span>\nbitcount key <span class=\"token punctuation\">[</span>start end<span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 返回1的个数，区间单位是【字节】-> []，可以使用负数</span>\nbitop and/or/not/xor destkey <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>   <span class=\"token comment\"># 交、并、非、异或运算，结果->destkey</span>\nbitpos key bit <span class=\"token punctuation\">[</span>start <span class=\"token punctuation\">[</span>end <span class=\"token punctuation\">[</span>BYTE <span class=\"token operator\">|</span> BIT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 查找指定范围内第一个0或1出现的位置</span>\nbitfield key \n  <span class=\"token operator\">&lt;</span>GET encoding offset <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>OVERFLOW <span class=\"token operator\">&lt;</span>WRAP <span class=\"token operator\">|</span> SAT <span class=\"token operator\">|</span> FAIL<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">&lt;</span>SET encoding offset value <span class=\"token operator\">|</span> INCRBY encoding offset increment<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">[</span>GET encoding offset <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>OVERFLOW <span class=\"token operator\">&lt;</span>WRAP <span class=\"token operator\">|</span> SAT <span class=\"token operator\">|</span> FAIL<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">&lt;</span>SET encoding offset value <span class=\"token operator\">|</span> INCRBY encoding offset increment<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>                               <span class=\"token comment\"># 操作（查、改、自增）bitmap数组中的指定位置的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>统计连续签到天数</li>\n</ol>\n<p>直接遍历每一位</p>\n<ol start=\"2\">\n<li>得到本月到今天为止的所有签到数据</li>\n</ol>\n<p><code>bitfield key GET u[dayOfMonth] 0</code></p>\n<ol start=\"3\">\n<li>从后向前遍历得到每一个bit位</li>\n</ol>\n<p>&amp;1 &gt;&gt;1 &amp;1 &gt;&gt;1 …</p></blockquote>\n<h4 id=\"Bitmaps与set对比\"><a href=\"#Bitmaps与set对比\" class=\"headerlink\" title=\"Bitmaps与set对比\"></a>Bitmaps与set对比</h4><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102122103729.png\" alt=\"image-20220102122103729\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>Hyperloglog（HLL）是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。Redis中的HLL是基于string结构实现的，单个HLL的内存永远小于16kb，但有&lt;&#x3D;0.81%的误差</p>\n<h4 id=\"常用命令-6\"><a href=\"#常用命令-6\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pfadd key element1 element2 <span class=\"token punctuation\">..</span>.\t\t<span class=\"token comment\"># 添加指定元素到 HyperLogLog 中；基数变化返回1</span>\npfcount key1 key2 <span class=\"token punctuation\">..</span>.\t\t\t\t\t\t\t<span class=\"token comment\"># 计算HLL的近似基数，多个key->HLL和</span>\npfmerge\tdst src1 src2 <span class=\"token punctuation\">..</span>.\t\t\t\t\t<span class=\"token comment\"># 将一个或多个HLL合并存储在另一个HLL中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"Geospatial\"><a href=\"#Geospatial\" class=\"headerlink\" title=\"Geospatial\"></a>Geospatial</h3><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 添加地理位置（经度，纬度，名称）</span>\ngeoadd key longitude latitude member <span class=\"token punctuation\">[</span>longtitude latitude member <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 获取指定地区的坐标值</span>\ngeopos key member <span class=\"token punctuation\">[</span>member <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 获取两个位置之间的直线距离，单位可选 m米（默认） km千米，mi英里，ft英尺</span>\ngeodist key member1 member2 <span class=\"token punctuation\">[</span>m<span class=\"token operator\">|</span>km<span class=\"token operator\">|</span>ft<span class=\"token operator\">|</span>mi<span class=\"token punctuation\">]</span> \n<span class=\"token comment\"># 以给定的经纬度为中心，找出某一半径内的元素</span>\ngeoradius key longitude latitude radius m<span class=\"token operator\">|</span>km<span class=\"token operator\">|</span>ft<span class=\"token operator\">|</span>mi \n<span class=\"token comment\"># 将指定member的坐标转为hash字符串形式并返回</span>\ngeohash\n<span class=\"token comment\"># 在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以使圆形或矩形 since6.2</span>\nGEOSEARCH key <span class=\"token operator\">&lt;</span>FROMMEMBER member <span class=\"token operator\">|</span> FROMLONLAT longitude latitude<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>BYRADIUS radius <span class=\"token operator\">&lt;</span>M <span class=\"token operator\">|</span> KM <span class=\"token operator\">|</span> FT <span class=\"token operator\">|</span> MI<span class=\"token operator\">></span> <span class=\"token operator\">|</span> BYBOX width height <span class=\"token operator\">&lt;</span>M <span class=\"token operator\">|</span> KM <span class=\"token operator\">|</span> FT <span class=\"token operator\">|</span> MI<span class=\"token operator\">>></span> <span class=\"token punctuation\">[</span>ASC <span class=\"token operator\">|</span> DESC<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>COUNT count <span class=\"token punctuation\">[</span>ANY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>WITHCOORD<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>WITHDIST<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>WITHHASH<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 与上述基本一致，不过可以吧结果存储到一个指定的key since6.2</span>\nGEOSEARCHSTORE destination <span class=\"token builtin class-name\">source</span> <span class=\"token operator\">&lt;</span>FROMMEMBER member <span class=\"token operator\">|</span> FROMLONLAT longitude latitude<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>BYRADIUS radius <span class=\"token operator\">&lt;</span>M <span class=\"token operator\">|</span> KM <span class=\"token operator\">|</span> FT <span class=\"token operator\">|</span> MI<span class=\"token operator\">></span> <span class=\"token operator\">|</span> BYBOX width height <span class=\"token operator\">&lt;</span>M <span class=\"token operator\">|</span> KM <span class=\"token operator\">|</span> FT <span class=\"token operator\">|</span> MI<span class=\"token operator\">>></span> <span class=\"token punctuation\">[</span>ASC <span class=\"token operator\">|</span> DESC<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>COUNT count <span class=\"token punctuation\">[</span>ANY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>STOREDIST<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102141906833.png\" alt=\"image-20220102141906833\"></p>\n<h3 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">XADD key <span class=\"token punctuation\">[</span>NOMKSTREAM<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>MAXLEN <span class=\"token operator\">|</span> MINID<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span> <span class=\"token operator\">|</span> ~<span class=\"token punctuation\">]</span> threshold <span class=\"token punctuation\">[</span>LIMIT count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>* <span class=\"token operator\">|</span> id<span class=\"token operator\">></span> field value <span class=\"token punctuation\">[</span>field value <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\nXREAD <span class=\"token punctuation\">[</span>COUNT count<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>BLOCK milliseconds<span class=\"token punctuation\">]</span> STREAMS key <span class=\"token punctuation\">[</span>key <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token function\">id</span> <span class=\"token punctuation\">[</span>id <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\nXGROUP CREATE key groupName ID <span class=\"token punctuation\">[</span>MKSTREAM<span class=\"token punctuation\">]</span>\nXRANGE key start end <span class=\"token punctuation\">[</span>COUNT count<span class=\"token punctuation\">]</span>\nXACK key group ID <span class=\"token punctuation\">[</span>ID<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n\nxadd q1 * name jack age <span class=\"token number\">21</span>\nxread count <span class=\"token number\">100</span> block <span class=\"token number\">0</span> streams q1 <span class=\"token number\">0</span>\nxlen q1\nxrange  q1 - +  <span class=\"token comment\"># 特殊符号，第一个-，最后一个+</span>\nXRANGE somestream <span class=\"token number\">1526985054069</span>-0 + COUNT <span class=\"token number\">1</span> <span class=\"token comment\"># 获取>=某个指定id的第一个</span>\nXRANGE q1 <span class=\"token punctuation\">(</span><span class=\"token number\">1526985685298</span>-0 + COUNT <span class=\"token number\">2</span>\nxreadgroup group g1 c1 streams q1 <span class=\"token operator\">></span>  <span class=\"token comment\"># 获取未ack</span>\nxack q1 g1 <span class=\"token number\">0</span>\nxpending q1 g1 - + <span class=\"token number\">10</span>  <span class=\"token comment\"># 获取10条g1组中q1stream的未确认消息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220905094906018.png\" alt=\"image-20220905094906018\"></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220905094837620.png\" alt=\"image-20220905094837620\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：</p>\n<ul>\n<li>阻塞时间设置0表示无限等待</li>\n<li>使用$符号作为起始id表示读取命令执行<strong>时间点之后</strong>加入流的数据</li>\n</ul></blockquote>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220905100930317.png\" alt=\"image-20220905100930317\"></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220905101203974.png\" alt=\"image-20220905101203974\"></p>\n<h2 id=\"Redis-基础操作\"><a href=\"#Redis-基础操作\" class=\"headerlink\" title=\"Redis 基础操作\"></a>Redis 基础操作</h2><h3 id=\"Redis-键（Key）\"><a href=\"#Redis-键（Key）\" class=\"headerlink\" title=\"Redis 键（Key）\"></a>Redis 键（Key）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">keys *    \t<span class=\"token comment\"># 查看当前库所有key  keys *num 顺序选取</span>\n<span class=\"token builtin class-name\">set</span> key value   <span class=\"token comment\"># 设置键值</span>\nexists key  <span class=\"token comment\"># 判断某个 key 是否存在</span>\n<span class=\"token builtin class-name\">type</span> key  \t<span class=\"token comment\">#\t判断某个 key 的类型</span>\ndel key \t\t<span class=\"token comment\"># 【直接删除】</span>\nunlink key \t<span class=\"token comment\"># 【异步删除】只是先删除链接，之后再异步删除</span>\nexpire key <span class=\"token number\">10</span> <span class=\"token comment\"># 设置 key 的过期时间，单位s</span>\nttl key  \t\t<span class=\"token comment\"># 查看过期时间</span>\n<span class=\"token keyword\">select</span> \t\t\t<span class=\"token comment\"># 切换数据库</span>\ndbsize\t\t\t<span class=\"token comment\"># 查看当前数据库的 key 数量</span>\nflushdb \t\t<span class=\"token comment\"># 清空当前库</span>\nflushall\t\t<span class=\"token comment\"># 通杀全部库</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"发布和订阅\"><a href=\"#发布和订阅\" class=\"headerlink\" title=\"发布和订阅\"></a>发布和订阅</h3><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102112807781.png\" alt=\"image-20220102112807781\" style=\"zoom:50%;\" />\n\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102112836409.png\" alt=\"image-20220102112836409\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">subscribe channel1 channel2 <span class=\"token punctuation\">..</span>.  <span class=\"token comment\">#订阅一个或多个通道</span>\npublish channel1 message <span class=\"token comment\"># 向通道发布消息</span>\npsubscribe pattern <span class=\"token comment\"># 订阅匹配的所有通道</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<ul>\n<li>不支持数据持久化</li>\n<li>复发避免消息丢失</li>\n<li>消息堆积有上限，超出数据丢失</li>\n</ul></blockquote>\n<h2 id=\"两种Java整合操作\"><a href=\"#两种Java整合操作\" class=\"headerlink\" title=\"两种Java整合操作\"></a>两种Java整合操作</h2><h3 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span>resps<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Tuple</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123.60.108.20\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#123;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1243\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">flushAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 连接测试</span>\n        <span class=\"token class-name\">String</span> ping <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// List</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lpush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> key1 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> key1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Set</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1,2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">smembers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Hash</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"June\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> h1 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hkeys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> h1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// zset</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"countries\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"china\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"countries\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"us\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"countries\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">666d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"uk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple</span><span class=\"token punctuation\">></span></span> countries <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrangeByScoreWithScores</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"countries\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Tuple</span> country <span class=\"token operator\">:</span> countries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"简单案例：验证码\"><a href=\"#简单案例：验证码\" class=\"headerlink\" title=\"简单案例：验证码\"></a>简单案例：验证码</h4><ol>\n<li>输入手机号，点击发送后随机生成6位数字码，2分钟有效。</li>\n<li>输入验证码，点击验证，返回或失败。</li>\n<li>每个手机号每天只能输入3次。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VerificationCode</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">VerificationCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">verifyCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"45678\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getNewCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">verifyCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123.60.108.20\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1243\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> countKey <span class=\"token operator\">=</span> <span class=\"token string\">\"VerificationCode\"</span> <span class=\"token operator\">+</span> phone <span class=\"token operator\">+</span> <span class=\"token string\">\":count\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> codeKey <span class=\"token operator\">=</span> <span class=\"token string\">\"VerificationCode\"</span> <span class=\"token operator\">+</span> phone <span class=\"token operator\">+</span> <span class=\"token string\">\":code\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> count <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超过3次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">incr</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">,</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一天只能发三次</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 验证码过期时间2min</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNewCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"letuuce（SpringDataRedis默认）\"><a href=\"#letuuce（SpringDataRedis默认）\" class=\"headerlink\" title=\"letuuce（SpringDataRedis默认）\"></a>letuuce（SpringDataRedis默认）</h3><ol>\n<li>pom.xml 依赖</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- redis --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- spring2.X集成redis所需common-pool2--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-pool2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.12.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-annotations<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.11.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.11.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>application.properties 配置</li>\n</ol>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\">#Redis服务器地址</span>\n<span class=\"token key attr-name\">spring.redis.host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123.60.108.20</span>\n<span class=\"token comment\">#Redis服务器连接端口</span>\n<span class=\"token key attr-name\">spring.redis.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">6379</span>\n<span class=\"token comment\">#Redis数据库索引（默认为0）</span>\n<span class=\"token key attr-name\">spring.redis.database</span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">0</span>\n<span class=\"token comment\">#连接超时时间（毫秒）</span>\n<span class=\"token key attr-name\">spring.redis.timeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1800000</span>\n<span class=\"token comment\">#连接池最大连接数（使用负值表示没有限制）</span>\n<span class=\"token key attr-name\">spring.redis.lettuce.pool.max-active</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">20</span>\n<span class=\"token comment\">#最大阻塞等待时间(负数表示没限制)</span>\n<span class=\"token key attr-name\">spring.redis.lettuce.pool.max-wait</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-1</span>\n<span class=\"token comment\">#连接池中的最大空闲连接</span>\n<span class=\"token key attr-name\">spring.redis.lettuce.pool.max-idle</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span>\n<span class=\"token comment\">#连接池中的最小空闲连接</span>\n<span class=\"token key attr-name\">spring.redis.lettuce.pool.min-idle</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>Redis 配置类</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableCaching</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CachingConfigurerSupport</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> redisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_FINAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//key序列化方式</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>redisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//value序列化</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//value hashmap序列化</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CacheManager</span> <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> redisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//解决查询缓存转换异常的问题</span>\n        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_FINAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 配置序列化（解决乱码的问题）,过期时间600秒</span>\n        <span class=\"token class-name\">RedisCacheConfiguration</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisCacheConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">entryTtl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">serializeKeysWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializationContext<span class=\"token punctuation\">.</span>SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>redisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">serializeValuesWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializationContext<span class=\"token punctuation\">.</span>SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">disableCachingNullValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RedisCacheManager</span> cacheManager <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisCacheManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">cacheDefaults</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> cacheManager<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>测试</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/redisTest\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisTestController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testRedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//设置值到redis</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//从redis获取值</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h2 id=\"Redis-事务\"><a href=\"#Redis-事务\" class=\"headerlink\" title=\"Redis 事务\"></a>Redis 事务</h2><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>\n<p>Redis 事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队。</p>\n<h3 id=\"Multi、Exec、discard\"><a href=\"#Multi、Exec、discard\" class=\"headerlink\" title=\"Multi、Exec、discard\"></a>Multi、Exec、discard</h3><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。组队的过程中可以通过discard来放弃组队。  </p>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102191747448.png\" alt=\"image-20220102191747448\" style=\"zoom:50%;\" />\n\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102192037349.png\" alt=\"image-20220102192037349\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"事务错误处理\"><a href=\"#事务错误处理\" class=\"headerlink\" title=\"事务错误处理\"></a>事务错误处理</h3><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102192143438.png\" alt=\"image-20220102192143438\" style=\"zoom:50%;\" />\n\n<h3 id=\"事务冲突\"><a href=\"#事务冲突\" class=\"headerlink\" title=\"事务冲突\"></a>事务冲突</h3><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220102215431742.png\" alt=\"image-20220102215431742\" style=\"zoom:50%;\" />\n\n<h4 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h4><p>悲观锁（Pessimistic Lock）, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p>\n<h4 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h4><p>乐观锁（Optimistic Lock），顾名思义，乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多度的应用类型，这样可以提高吞吐量。<strong>Redis就是利用这种 check-and-set 机制实现事务的。</strong></p>\n<h3 id=\"Redis-加锁机制\"><a href=\"#Redis-加锁机制\" class=\"headerlink\" title=\"Redis 加锁机制\"></a>Redis 加锁机制</h3><p><code>WATCH key [ key ... ]</code></p>\n<p>在执行 <code>multi</code> 之前，先执行 watch key1 key2 … ，可以监视一个或多个 key，<strong>如果在事务执行之前这些 key 被其它命令所改动，那么事务将会被打断。</strong></p>\n<p><code>unwatch</code></p>\n<p>取消监视。如果在执行了<code>WATCH</code> 命令之后，<code>EXEC</code>命令<code>DISCARD</code>命令先被执行了，那么就不需要<code>UNWATCH</code>了。</p>\n<h3 id=\"Redis-事务三特性\"><a href=\"#Redis-事务三特性\" class=\"headerlink\" title=\"Redis 事务三特性\"></a>Redis 事务三特性</h3><ul>\n<li><strong>单独的隔离操作</strong><ul>\n<li>事务中的所有命令都会被序列化、按顺序执行。事务在执行过程中，不会被其他客户端发来的命令打断。</li>\n</ul>\n</li>\n<li><strong>没有隔离级别的概念</strong><ul>\n<li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li>\n</ul>\n</li>\n<li><strong>不保证原子性</strong><ul>\n<li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Redis-秒杀实现\"><a href=\"#Redis-秒杀实现\" class=\"headerlink\" title=\"Redis 秒杀实现\"></a>Redis 秒杀实现</h2><h3 id=\"并发测试工具\"><a href=\"#并发测试工具\" class=\"headerlink\" title=\"并发测试工具\"></a>并发测试工具</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> httpd-tools<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"测试模板\"><a href=\"#测试模板\" class=\"headerlink\" title=\"测试模板\"></a>测试模板</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ab <span class=\"token parameter variable\">-n</span> <span class=\"token number\">2000</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">200</span> <span class=\"token parameter variable\">-k</span> <span class=\"token parameter variable\">-p</span> ~/postfile <span class=\"token parameter variable\">-T</span> application/x-www-form-urlencoded http://124.223.14.18:8080/Seckill/doseckill<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Java-代码\"><a href=\"#Java-代码\" class=\"headerlink\" title=\"Java 代码\"></a>Java 代码</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">doSecKill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> uid<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> prodid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 判断非空</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uid <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> prodid <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 连接 redis</span>\n<span class=\"token comment\">//        Jedis jedis = new Jedis(\"123.60.108.20\", 6379);</span>\n        <span class=\"token class-name\">JedisPool</span> jedisPool <span class=\"token operator\">=</span> <span class=\"token class-name\">JedisPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJedisPoolInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 拼接 key</span>\n        <span class=\"token class-name\">String</span> kcKey <span class=\"token operator\">=</span> <span class=\"token string\">\"sk:\"</span> <span class=\"token operator\">+</span> prodid <span class=\"token operator\">+</span> <span class=\"token string\">\":qt\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> userKey <span class=\"token operator\">=</span> <span class=\"token string\">\"sk:\"</span> <span class=\"token operator\">+</span> prodid <span class=\"token operator\">+</span> <span class=\"token string\">\":user\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 监视库存</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>kcKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> kc <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>kcKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>kc <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀未开始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sismember</span><span class=\"token punctuation\">(</span>userKey<span class=\"token punctuation\">,</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已经秒杀成功，不能重复秒杀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>kc<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀已经结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Transaction</span> multi <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">multi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 组队：搭配watch</span>\n        multi<span class=\"token punctuation\">.</span><span class=\"token function\">decr</span><span class=\"token punctuation\">(</span>kcKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 库存--</span>\n        multi<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span>userKey<span class=\"token punctuation\">,</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 成功用户添加至set</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> multi<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取执行结果</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token operator\">||</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀失败..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisPoolUtil</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">JedisPool</span> jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">JedisPoolUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JedisPool</span> <span class=\"token function\">getJedisPoolInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> jedisPool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JedisPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> jedisPool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token class-name\">JedisPoolConfig</span> poolConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setBlockWhenExhausted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setTestOnBorrow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ping  PONG</span>\n             \n               jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>poolConfig<span class=\"token punctuation\">,</span> <span class=\"token string\">\"123.60.108.20\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> jedisPool<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JedisPool</span> jedisPool<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Jedis</span> jedis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> jedis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">returnResource</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"最终实现\"><a href=\"#最终实现\" class=\"headerlink\" title=\"最终实现\"></a>最终实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecKill_redisByScript</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span>Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SecKill_redisByScript</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> secKillScript <span class=\"token operator\">=</span> <span class=\"token string\">\"local userid=KEYS[1];\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"local prodid=KEYS[2];\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"local qtkey='sk:'..prodid..\\\":qt\\\";\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"local usersKey='sk:'..prodid..\\\":usr\\\";\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"local userExists=redis.call(\\\"sismember\\\",usersKey,userid);\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"if tonumber(userExists)==1 then \\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"   return 2;\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"end\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"local num= redis.call(\\\"get\\\" ,qtkey);\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"if tonumber(num)&lt;=0 then \\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"   return 0;\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"else \\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"   redis.call(\\\"decr\\\",qtkey);\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"   redis.call(\\\"sadd\\\",usersKey,userid);\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"end\\r\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"return 1\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> secKillScript2 <span class=\"token operator\">=</span>\n            <span class=\"token string\">\"local userExists=redis.call(\\\"sismember\\\",\\\"&#123;sk&#125;:0101:usr\\\",userid);\\r\\n\"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\" return 1\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">doSecKill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> uid<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> prodid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">JedisPool</span> jedispool <span class=\"token operator\">=</span> <span class=\"token class-name\">JedisPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJedisPoolInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> jedispool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> sha1 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">scriptLoad</span><span class=\"token punctuation\">(</span>secKillScript<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">evalsha</span><span class=\"token punctuation\">(</span>sha1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">,</span> prodid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> reString <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>reString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已抢空！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>reString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抢购成功！！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>reString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该用户已抢过！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抢购异常！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Redis-持久化\"><a href=\"#Redis-持久化\" class=\"headerlink\" title=\"Redis 持久化\"></a>Redis 持久化</h2><p>Redis 提供了2个不同形式的持久化方式。</p>\n<ul>\n<li><strong>RDB（Redis DataBase）</strong></li>\n<li><strong>AOF（Append Of File）</strong></li>\n</ul>\n<h3 id=\"RDB（Redis-Database-Backup-file）\"><a href=\"#RDB（Redis-Database-Backup-file）\" class=\"headerlink\" title=\"RDB（Redis Database Backup file）\"></a>RDB（Redis Database Backup file）</h3><p>[Redis主从复制原理总结 - 老虎死了还有狼 - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/daofaziran/p/10978628.html#:~:text=Redis%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E6%98%AF%E6%8C%87Slave%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E5%BC%80%E5%A7%8B%E6%AD%A3%E5%B8%B8%E5%B7%A5%E4%BD%9C%E6%97%B6%E4%B8%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E7%94%9F%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%E5%90%8C%E6%AD%A5%E5%88%B0%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%87%E7%A8%8B%E3%80%82,%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%BB%E8%A6%81%E6%98%AF%E4%B8%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%AF%8F%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%E5%86%99%E5%91%BD%E4%BB%A4%E5%B0%B1%E4%BC%9A%E5%90%91%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E7%9B%B8%E5%90%8C%E7%9A%84%E5%86%99%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E6%94%B6%E5%B9%B6%E6%89%A7%E8%A1%8C%E6%94%B6%E5%88%B0%E7%9A%84%E5%86%99%E5%91%BD%E4%BB%A4%E3%80%82\">https://www.cnblogs.com/daofaziran/p/10978628.html#:~:text=Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。,增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</a> 主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。)</p>\n<ul>\n<li><p>Redis使用fork函数复制一份当前进程（父进程）的副本（子进程）；</p>\n</li>\n<li><p>父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件；</p>\n</li>\n<li><p>当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。</p>\n</li>\n<li><p>在执行fork的时候操作系统（类Unix操作系统）会使用写时复制（copy-on-write）策略，即fork函数发生的一刻父子进程共享同一内存数据，当父进程要更改其中某片数据时（如执行一个写命令 ），操作系统会将该片数据复制一份以保证子进程的数据不受影响，所以新的RDB文件存储的是执行fork一刻的内存数据。</p>\n<p>  <strong>Redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的</strong>，也就是说任何时候RDB文件都是完整的。这使得我们可以通过定时备份RDB文件来实 现Redis数据库备份。RDB文件是经过压缩（可以配置rdbcompression参数以禁用压缩节省CPU占用）的二进制格式，所以占用的空间会小于内存中的数据大小，更加利于传输。</p>\n<p>  除了自动快照，还可以手动发送SAVE或BGSAVE命令让Redis执行快照，两个命令的区别在于，前者是由主进程进行快照操作，会阻塞住其他请求，后者会通过fork子进程进行快照操作。 Redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。根据数据量大小与结构和服务器性能不同，这个时间也不同。通常将一个记录一千万个字符串类型键、大小为1GB的快照文件载入到内 存中需要花费20～30秒钟。 通过RDB方式实现持久化，一旦Redis异常退出，就会丢失最后一次快照以后更改的所有数据。这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化。</p>\n</li>\n</ul>\n<p><strong>配置以下三项即可开启 RDB</strong></p>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220103190307246.png\" alt=\"image-20220103190307246\" style=\"zoom:50%;\" />\n\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220103190549903.png\" alt=\"image-20220103190549903\" style=\"zoom:50%;\" />\n\n<ul>\n<li><strong>save</strong> ：默认如下配置</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">save <span class=\"token number\">900</span> <span class=\"token number\">1</span>：表示900 秒内如果至少有 <span class=\"token number\">1</span> 个 key 的值变化，则保存\nsave <span class=\"token number\">300</span> <span class=\"token number\">10</span>：表示300 秒内如果至少有 <span class=\"token number\">10</span> 个 key 的值变化，则保存\nsave <span class=\"token number\">60</span> <span class=\"token number\">10000</span>：表示60 秒内如果至少有 <span class=\"token number\">10000</span> 个 key 的值变化，则保存<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>可以通过<code>lastsave</code>命令获取最后一次成功执行快照的时间</p>\n<p>执行<code>flushall</code>命令，也会产生dump.rdb文件，但里面是空的，无意义</p>\n<ul>\n<li><code>stop-writes-on-bgsave-error</code>：默认yes，当启用了 RDB 且最后一次后台保存数据失败，Redis 是否停止接收数据。</li>\n<li><code>rdbcompression</code>：默认yes。对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果yes，redis 会采用LZF算法进行压缩。会产生10%的性能损耗。</li>\n</ul>\n<h4 id=\"触发方式\"><a href=\"#触发方式\" class=\"headerlink\" title=\"触发方式\"></a>触发方式</h4><ol>\n<li>save&#x2F;bgsave 命令主动触发</li>\n<li>配置 save 由redis自动触发</li>\n<li>其他触发方式<ol>\n<li>主从复制时，自动生成 RDB 文件</li>\n<li>Redis中的 debug reload 提供debug级别的重启（不清空内存），此时自动生成 RDB 文件</li>\n<li>shutdown 自动生成 RDB文件</li>\n</ol>\n</li>\n</ol>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220103190238146.png\" alt=\"image-20220103190238146\" style=\"zoom:50%;\" />\n\n<p>动态停止 RDB：<code>config set save &quot; &quot;</code></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220905152033719.png\" alt=\"image-20220905152033719\"></p>\n<h4 id=\"优势-amp-劣势\"><a href=\"#优势-amp-劣势\" class=\"headerlink\" title=\"优势&amp;劣势\"></a>优势&amp;劣势</h4><ul>\n<li>适合大规模数据恢复</li>\n<li>对数据完整性和一致性要求不高更适合使用</li>\n<li>节省磁盘空间</li>\n<li>恢复速度块</li>\n</ul>\n<hr>\n<ul>\n<li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li>\n<li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li>\n<li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li>\n</ul>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220103193419660.png\" alt=\"image-20220103193419660\" style=\"zoom:75%;\" />\n\n\n\n<h3 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h3><p><strong>以日志的形式来记录每个写操作（增量保存）</strong>，将Redis执行过的所有写指令记录下来（读操作不记录）， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>\n<h4 id=\"持久化流程\"><a href=\"#持久化流程\" class=\"headerlink\" title=\"持久化流程\"></a>持久化流程</h4><ol>\n<li>客户端请求<strong>写命令</strong>会被append到AOF缓冲区中；</li>\n<li>AOF缓冲区根据AOF持久化策略[ always, everysec, no ]将 sync 同步到磁盘的AOF文件中；</li>\n<li>AOF文件大小超过重写策略或手动重写时，会对AOF文件 rewrite 重写，压缩 AOF文件容量；</li>\n<li>Redis 服务重启时，会重新 load 加载 AOF 文件中的写操作来恢复数据</li>\n</ol>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220103193801017.png\" alt=\"image-20220103193801017\" style=\"zoom: 10%;\" />\n\n<p>AOF 默认关闭，可以在redis.conf中配置文件名称，默认为 appendonly.aof。AOF文件的保存路径，同RDB的路径一致。</p>\n<h4 id=\"AOF-启动-x2F-修复-x2F-恢复\"><a href=\"#AOF-启动-x2F-修复-x2F-恢复\" class=\"headerlink\" title=\"AOF 启动&#x2F;修复&#x2F;恢复\"></a>AOF 启动&#x2F;修复&#x2F;恢复</h4><ul>\n<li>AOF的备份机制和性能虽然和RDB不同，但是备份和恢复的操作同RDB一样，都是拷贝文件，需要恢复时再拷贝到 Redis 工作目录下，启动系统即加载。</li>\n<li>正常启动&#x2F;恢复<ul>\n<li><strong>修改默认的  appendonly no 改为 yes</strong></li>\n<li>将有数据的 aof 文件复制一份保存到对应目录（ <code>config get dir</code>）</li>\n<li>恢复：重启 redis 然后重新加载</li>\n</ul>\n</li>\n<li>异常恢复<ul>\n<li>修改默认的 appendonly no -&gt; yes</li>\n<li>如遇到 AOF 文件损坏，通过 <code>/usr/local/bin/redis-check-aof --fix appendonly.aof</code> 进行恢复</li>\n<li>备份被写坏的 AOF 文件</li>\n<li>恢复：重启 redis，然后重新加载</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"AOF-同步频率\"><a href=\"#AOF-同步频率\" class=\"headerlink\" title=\"AOF 同步频率\"></a>AOF 同步频率</h4><p><code>appendfsync always</code>：始终同步，每次 Redis 的写入都会立刻计入日志；性能较差但数据完整性较好</p>\n<p><code>appendfsync everysec</code>：每秒同步，存在数据丢失风险</p>\n<p><code>appendfsync no</code>：redis 不主动进行同步，把<strong>同步时机交给操作系统</strong></p>\n<h4 id=\"Rewrite-重写\"><a href=\"#Rewrite-重写\" class=\"headerlink\" title=\"Rewrite 重写\"></a>Rewrite 重写</h4><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集。可以使用命令<code>bgrewriteaof</code>主动重写</p>\n<p>AOF文件持续增长而过大时，会 fork 出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，<strong>就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</strong></p>\n<p><code>no-appendfsync-on-rewrite</code>：如果 yes，那么 aof 文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）；如果 no，还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p>\n<p><a href=\"https://www.cnblogs.com/lyh233/p/13196202.html\">redis中AOF的no-appendfsync-on-rewrite参数详解 - Arbitrary233 - 博客园 (cnblogs.com)</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>何时重写？</p></blockquote>\n<p>Redis 会记录上次重写时的 AOF 大小，默认大小是上次 rewrite 后大小的一倍且文件大于 64M 时触发</p>\n<p><strong>重写虽然可以节省大量磁盘空间，减少恢复时间。但是每次重写还是有一定负担的，因此可以设定 Redis 要满足一定条件才会进行重写。</strong></p>\n<p><code>auto-aof-rewrite-percentage</code>：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p>\n<p><code>auto-aof-rewrite-min-size</code>：设置重写的基准值，最小64M，达到这个值开始重写。</p>\n<p>例如：文件达到70M开始重写，下降到50M，下次则会在100MB时进行重写。</p>\n<p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为 base_size，如果Redis的<strong>AOF当前大小 &gt;&#x3D; base_size + base_size * 100%（默认）且当前大小 &gt;&#x3D; 64MB（默认）情况下</strong>，Redis会对 AOF 进行重写</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>重写流程</p></blockquote>\n<ol>\n<li><code>bgrewriteaof</code>触发重写，判断当前是否有 bgsave 或 <code>bgrewriteaof</code>  在运行，如果有，则等待该命令结束后再继续执行。</li>\n<li>主进程 fork 出子进程执行重写操作，保证主进程不会阻塞。</li>\n<li>子进程遍历 redis 内存中数据到临时文件，客户端的写请求同时写入 aof_buf 缓冲区和 aof_rewrite_buf 重写缓冲区保证原 AOF 文件完整以及新 AOF 文件生成期间的新的数据修改动作不会丢失。</li>\n<li>子进程写完新的 AOF 文件后，向主进程发信号，父进程更新统计信息。主进程把 aof_rewrite_buf 中的数据写入到新的 AOF 文件。</li>\n<li>使用新的 AOF 文件覆盖旧的 AOF 文件，完成AOF重写。</li>\n</ol>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220103200018563.png\" alt=\"image-20220103200018563\" style=\"zoom: 33%;\" />\n\n<h4 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h4><ul>\n<li>备份机制更稳健，丢失数据概率低。</li>\n<li>可读的日志文本，通过操作 AOF 文件，可以处理误操作。</li>\n</ul>\n<h4 id=\"劣势\"><a href=\"#劣势\" class=\"headerlink\" title=\"劣势\"></a>劣势</h4><ul>\n<li>比起 RDB 占用更多的磁盘空间</li>\n<li>恢复备份速度慢</li>\n<li>每次读写都同步的话，有一定的性能压力</li>\n<li>存在个别 Bug，造成不能恢复问题</li>\n</ul>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220103200246800.png\" alt=\"image-20220103200246800\" style=\"zoom:50%;\" />\n\n<h3 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h3><ul>\n<li>官方推荐两个都启用；</li>\n<li>如果对数据不敏感，可以选单独用RDB；</li>\n<li>不建议单独用 AOF，因为可能会出现Bug；</li>\n<li>如果只是做纯内存缓存，可以都不用</li>\n</ul>\n<h3 id=\"性能建议\"><a href=\"#性能建议\" class=\"headerlink\" title=\"性能建议\"></a>性能建议</h3><p>因为<strong>RDB文件只用作后备用途</strong>，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。 如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价，一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。</p>\n<h2 id=\"Redis-主从复制\"><a href=\"#Redis-主从复制\" class=\"headerlink\" title=\"Redis 主从复制\"></a>Redis 主从复制</h2><p><strong>读（Slave）写（Master）分离、性能扩展、容灾恢复</strong></p>\n<h3 id=\"复制原理\"><a href=\"#复制原理\" class=\"headerlink\" title=\"复制原理\"></a>复制原理</h3><p>[Redis主从复制原理总结 - 老虎死了还有狼 - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/daofaziran/p/10978628.html#:~:text=Redis%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E6%98%AF%E6%8C%87Slave%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E5%BC%80%E5%A7%8B%E6%AD%A3%E5%B8%B8%E5%B7%A5%E4%BD%9C%E6%97%B6%E4%B8%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E7%94%9F%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%E5%90%8C%E6%AD%A5%E5%88%B0%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%87%E7%A8%8B%E3%80%82,%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%BB%E8%A6%81%E6%98%AF%E4%B8%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%AF%8F%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%E5%86%99%E5%91%BD%E4%BB%A4%E5%B0%B1%E4%BC%9A%E5%90%91%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E7%9B%B8%E5%90%8C%E7%9A%84%E5%86%99%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E6%94%B6%E5%B9%B6%E6%89%A7%E8%A1%8C%E6%94%B6%E5%88%B0%E7%9A%84%E5%86%99%E5%91%BD%E4%BB%A4%E3%80%82\">https://www.cnblogs.com/daofaziran/p/10978628.html#:~:text=Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。,增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</a> 主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。)</p>\n<h3 id=\"常用三招\"><a href=\"#常用三招\" class=\"headerlink\" title=\"常用三招\"></a>常用三招</h3><h4 id=\"一主二仆\"><a href=\"#一主二仆\" class=\"headerlink\" title=\"一主二仆\"></a>一主二仆</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">############## 一主二从 #################</span>\n<span class=\"token comment\"># 1. 配置统一 redis.conf</span>\ndaemonize <span class=\"token function\">yes</span>\nappendonly no\n<span class=\"token comment\"># 2. 配置单个redis 配置文件</span>\n<span class=\"token function\">mkdir</span> /redisconfs\n<span class=\"token function\">cp</span> /opt/redis-6.2.6/redis.conf /redisconfs/\n\n<span class=\"token function\">vim</span> /redisconfs/redis6379.conf\ni\ninclude /redisconfs/redis.conf\npidfile /var/run/redis_6379.pid\nport <span class=\"token number\">6379</span>\ndbfilename dump6379.rdb\n\n<span class=\"token function\">vim</span> /redisconfs/redis6380.conf\ni\ninclude /redisconfs/redis.conf\npidfile /var/run/redis_6380.pid\nport <span class=\"token number\">6380</span>\ndbfilename dump6380.rdb\n\n<span class=\"token function\">vim</span> /redisconfs/redis6381.conf\ni\ninclude /redisconfs/redis.conf\npidfile /var/run/redis_6381.pid\nport <span class=\"token number\">6381</span>\ndbfilename dump6381.rdb\n\n<span class=\"token comment\"># 3. 启动三台服务器</span>\nredis-server /redisconfs/redis6379.conf\nredis-server /redisconfs/redis6380.conf\nredis-server /redisconfs/redis6381.conf\n\n<span class=\"token comment\"># 4. 查看启动情况</span>\n<span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> redis\n\n<span class=\"token comment\"># 5. 进入redis查看主从</span>\nredis-cli <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>\ninfo replication\n\n<span class=\"token comment\"># 6. 设置从机</span>\nredis-cli <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6380</span>\nslaveof <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span>\n\nredis-cli <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6381</span>\nslaveof <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：</p>\n<ol>\n<li>主服务器挂掉后，从机不会上位，等待主机的重连</li>\n<li>从机挂掉后，再次重连需要重新指定 master</li>\n</ol>\n<h4 id=\"薪火相传\"><a href=\"#薪火相传\" class=\"headerlink\" title=\"薪火相传\"></a>薪火相传</h4><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p>\n<h4 id=\"反客为主\"><a href=\"#反客为主\" class=\"headerlink\" title=\"反客为主\"></a>反客为主</h4><p>当一个 master 宕机后，后面的 slave 可以立刻提升为 master，其后面的 slave 不用做任何修改 </p>\n<p><code>slaveof no one</code> 从 -&gt; 主</p>\n<h3 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h3><p>Redis Sentinel是一个分布式系统，Sentinel运行在有许多Sentinel进程互相合作的环境下，它本身就是这样被设计的。有许多Sentinel进程互相合作的优点如下：</p>\n<ol>\n<li>当多个Sentinel同意一个master不再可用的时候，就执行故障检测。这明显降低了错误概率。</li>\n<li>即使并非全部的Sentinel都在工作，Sentinel也可以正常工作，这种特性，让系统非常的健康</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> /redisconfs/sentinel.conf\nsentinel monitor mymaster <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span> <span class=\"token number\">1</span>\nredis-sentinel /redisconfs/sentinel.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"复制延迟\"><a href=\"#复制延迟\" class=\"headerlink\" title=\"复制延迟\"></a>复制延迟</h4><p>由于所有的写操作都是现在 Master 上操作，所以从 Master 同步到 Slave 及其有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave 机器数量的增加也会使这个问题更加严重。</p>\n<h4 id=\"故障恢复\"><a href=\"#故障恢复\" class=\"headerlink\" title=\"故障恢复\"></a>故障恢复</h4><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220105130333189.png\" alt=\"image-20220105130333189\" style=\"zoom:75%;\" />\n\n<p>优先级在redis.conf中默认：slave-priority 100（新版本中叫 replica-priority），值越小优先级越高</p>\n<p>偏移量是指获得原主机数据最全的</p>\n<p>每个redis实例启动后都会随机生成一个40位的runid</p>\n<h4 id=\"Java-实现\"><a href=\"#Java-实现\" class=\"headerlink\" title=\"Java 实现\"></a>Java 实现</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JedisSentinelPool</span> jedisSentinelPool<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span>  <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedisFromSentinel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>jedisSentinelPool<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sentinelSet<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sentinelSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.11.103:26379\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">JedisPoolConfig</span> jedisPoolConfig <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最大可用连接数</span>\njedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最大闲置连接数</span>\njedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMinIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最小闲置连接数</span>\njedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setBlockWhenExhausted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//连接耗尽是否等待</span>\njedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//等待时间</span>\njedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setTestOnBorrow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//取连接的时候进行一下测试 ping pong</span>\n\njedisSentinelPool<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisSentinelPool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymaster\"</span><span class=\"token punctuation\">,</span>sentinelSet<span class=\"token punctuation\">,</span>jedisPoolConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> jedisSentinelPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> jedisSentinelPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"Redis-集群\"><a href=\"#Redis-集群\" class=\"headerlink\" title=\"Redis 集群\"></a>Redis 集群</h2><pre><code>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。\n\nRedis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。\n</code></pre>\n<h3 id=\"简单搭建Demo\"><a href=\"#简单搭建Demo\" class=\"headerlink\" title=\"简单搭建Demo\"></a>简单搭建Demo</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 删除之前的数据文件 rdb</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span>  /redisconfs/ dump63*\n<span class=\"token comment\"># 2.设置6个节点的配置文件，仅仅是端口号不同</span>\n\ninclude /redisconfs/redis.conf\npidfile <span class=\"token string\">\"/var/run/redis_6379.pid\"</span>\nport <span class=\"token number\">6379</span>\ndbfilename <span class=\"token string\">\"dump6379.rdb\"</span>\ncluster-enabled <span class=\"token function\">yes</span>\ncluster-config-file nodes-6379.conf\ncluster-node-timeout <span class=\"token number\">15000</span>\n<span class=\"token comment\"># :%s/6379/63..  vim中可以替换</span>\n\n<span class=\"token comment\"># 3.依次启动6个服务器</span>\nredis-server /redisconfs/redis6379.conf\nredis-server /redisconfs/redis6380.conf\nredis-server /redisconfs/redis6381.conf\nredis-server /redisconfs/redis6382.conf\nredis-server /redisconfs/redis6383.conf\nredis-server /redisconfs/redis6384.conf\n\n<span class=\"token comment\"># 4.合成集群，注意ip和端口</span>\nredis-cli <span class=\"token parameter variable\">--cluster</span> create --cluster-replicas <span class=\"token number\">1</span> <span class=\"token number\">124.223</span>.14.18:6379 <span class=\"token number\">124.223</span>.14.18:6380 <span class=\"token number\">124.223</span>.14.18:6381 <span class=\"token number\">124.223</span>.14.18:6382 <span class=\"token number\">124.223</span>.14.18:6383 <span class=\"token number\">124.223</span>.14.18:6384\n\n<span class=\"token comment\"># 5.登录查看，任意一个都可以登录到集群</span>\nredis-cli <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"集群命令\"><a href=\"#集群命令\" class=\"headerlink\" title=\"集群命令\"></a>集群命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 多值set必须使用以下形式 &#123;&#125; 组</span>\nmset k1<span class=\"token punctuation\">&#123;</span>user<span class=\"token punctuation\">&#125;</span> v1 k2<span class=\"token punctuation\">&#123;</span>user1<span class=\"token punctuation\">&#125;</span> v2\n<span class=\"token comment\"># 返回 count 个slot槽中的值</span>\ncluster getkeysinslot slot count<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上</li>\n<li>主节点下线，从节点会替补上去，而主节点再次上线会变成从节点。</li>\n<li>集群的主从节点都挂掉，是否继续服务？ <code>cluster-require-full-coverage</code> yes-&gt;挂掉   no-&gt;继续服务</li>\n</ol>\n<h3 id=\"Java集群Jedis\"><a href=\"#Java集群Jedis\" class=\"headerlink\" title=\"Java集群Jedis\"></a>Java集群Jedis</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisClusterTest</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n     <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">></span></span>set <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.31.211\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">JedisCluster</span> jedisCluster<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisCluster</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     jedisCluster<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedisCluster<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"集群利弊\"><a href=\"#集群利弊\" class=\"headerlink\" title=\"集群利弊\"></a>集群利弊</h3><p><strong>利</strong></p>\n<ul>\n<li>实现扩容</li>\n<li>分摊压力</li>\n<li>无中心配置相对简单</li>\n</ul>\n<p><strong>弊</strong></p>\n<ul>\n<li>多键操作不支持</li>\n<li>多键的Redis事务是不被支持的。lua脚本不被支持</li>\n<li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li>\n</ul>\n<h2 id=\"Redis-应用问题\"><a href=\"#Redis-应用问题\" class=\"headerlink\" title=\"Redis 应用问题\"></a>Redis 应用问题</h2><h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220904222931755.png\" alt=\"image-20220904222931755\"></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li><strong>对空值缓存</strong>：如果一个查询返回的数据为空（不管数据是否存在），都对其进行缓存，设置空结果过期时间很短，最长不超过5分钟</li>\n<li><strong>采用布隆过滤器</strong>：它是一个很长的二进制向量和一些列随机映射函数（哈希函数），可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远超过一般的算法，缺点是有一定的误识率和删除困难。将所有可能存在的数据哈希到一个足够大的 bitmaps 中，一个一定不存在的数据会被这个 bitmaps 拦截点，从而避免了对底层存储系统的查询压力。布隆过滤器有假阳性的问题。</li>\n</ol>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><h4 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220904222630457.png\" alt=\"image-20220904222630457\"></p>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220928210125682.png\" alt=\"image-20220928210125682\"></p>\n<ol>\n<li><p><strong>逻辑过期</strong></p>\n</li>\n<li><p><strong>使用锁</strong></p>\n</li>\n</ol>\n<ul>\n<li>缓存失效时（判断拿出来的值为空），不是立刻去 load db</li>\n<li>先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key</li>\n<li>当操作返回成功时，再进行 load db操作，并回设缓存，最后删除 mutex key</li>\n<li>当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间后再重试整个 get 缓存的方法</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220904222555435.png\" alt=\"image-20220904222555435\"></p>\n<h3 id=\"缓存雪崩-1\"><a href=\"#缓存雪崩-1\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><h4 id=\"问题描述-2\"><a href=\"#问题描述-2\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220904222630457.png\" alt=\"image-20220904222630457\"></p>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li><strong>构建多级缓存架构</strong>：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）</li>\n<li><strong>使用锁或者队列</strong>：用加锁或队列的方式保证不会有大量得线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</li>\n<li><strong>设置过期标志更新缓存</strong>：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存</li>\n<li><strong>设置随机过期时间</strong>：比如我们可以在原有的失效时间基础上增加一个随机值，比如 1-5分钟随机，这样每一个缓存的过期时间重复概率就会变低，很难引发集体缓存失效事件。</li>\n</ol>\n<h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><h4 id=\"问题描述-3\"><a href=\"#问题描述-3\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><pre><code>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！\n</code></pre>\n<p>分布式锁的主流解决方案：</p>\n<ol>\n<li>基于数据库实现分布式锁；</li>\n<li>基于缓存（Redis等）；</li>\n<li>基于 Zookeeper</li>\n</ol>\n<p>每一种分布式锁解决方案都有各自的优缺点：</p>\n<ol>\n<li>性能：redis最高</li>\n<li>可靠性：zookeeper 最高</li>\n</ol>\n<h4 id=\"解决方案：Redis-实现分布式锁\"><a href=\"#解决方案：Redis-实现分布式锁\" class=\"headerlink\" title=\"解决方案：Redis 实现分布式锁\"></a>解决方案：Redis 实现分布式锁</h4><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220105203231257.png\" alt=\"image-20220105203231257\" style=\"zoom:33%;\" />\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> key value nx ex n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/ping-mu-jie-tu-20220105-205552.png\" alt=\"屏幕截图 2022-01-05 205552\"  />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testLockLua\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLockLua</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//1 声明一个uuid ,将做为一个value 放入我们的key所对应的值中</span>\n    <span class=\"token class-name\">String</span> uuid <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span>\n    <span class=\"token class-name\">String</span> skuId <span class=\"token operator\">=</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问skuId 为25号的商品 100008348542</span>\n    <span class=\"token class-name\">String</span> locKey <span class=\"token operator\">=</span> <span class=\"token string\">\"lock:\"</span> <span class=\"token operator\">+</span> skuId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁住的是每个商品的数据</span>\n\n    <span class=\"token comment\">// 3 获取锁</span>\n    <span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span>locKey<span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 第一种： lock 与过期时间中间不写任何的代码。</span>\n    <span class=\"token comment\">// redisTemplate.expire(\"lock\",10, TimeUnit.SECONDS);//设置过期时间</span>\n    <span class=\"token comment\">// 如果true</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 执行的业务逻辑开始</span>\n        <span class=\"token comment\">// 获取缓存中的num 数据</span>\n        <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果是空直接返回</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 不是空 如果说在这出现了异常！ 那么delete 就删除失败！ 也就是说锁永远存在！</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 使num 每次+1 放入缓存</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*使用lua脚本来锁*/</span>\n        <span class=\"token comment\">// 定义lua 脚本</span>\n        <span class=\"token class-name\">String</span> script <span class=\"token operator\">=</span> <span class=\"token string\">\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 使用redis执行lua执行</span>\n        <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> redisScript <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setScriptText</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置一下返回值类型 为Long</span>\n        <span class=\"token comment\">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span>\n        <span class=\"token comment\">// 那么返回字符串与0 会有发生错误。</span>\n        redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setResultType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>redisScript<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>locKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 其他线程等待</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 睡眠</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 睡醒了之后，调用方法。</span>\n            <span class=\"token function\">testLockLua</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"Redis6-新功能\"><a href=\"#Redis6-新功能\" class=\"headerlink\" title=\"Redis6 新功能\"></a>Redis6 新功能</h2><h3 id=\"ACL\"><a href=\"#ACL\" class=\"headerlink\" title=\"ACL\"></a>ACL</h3><p>Redis ACL是Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p>\n<p>在Redis 5版本之前，Redis 安全规则只有密码控制 还有通过rename 来调整高危命令比如 <code>flushdb</code> ， <code>keys *</code>， <code>shutdown</code> 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p>\n<p>（1）接入权限:用户名和密码 </p>\n<p>（2）可以执行的命令 </p>\n<p>（3）可以操作的 KEY</p>\n<p>参考官网：<a href=\"https://redis.io/topics/acl\">https://redis.io/topics/acl</a></p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acl list\t\t\t\t<span class=\"token comment\"># 显示用户权限列表</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220105211013192.png\" alt=\"image-20220105211013192\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acl <span class=\"token function\">cat</span> \t\t\t\t<span class=\"token comment\"># 查看添加权限指令类别，加参数类型名可以查看具体命令</span>\nacl <span class=\"token function\">whoami</span>\t\t\t<span class=\"token comment\"># 查看当前用户</span>\naclsetuser\t\t\t<span class=\"token comment\"># 创建和编辑用户ACL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220105211236710.png\" alt=\"image-20220105211236710\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acl setuser username\t\t<span class=\"token comment\"># 创建新用户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220105212247697.png\" alt=\"image-20220105212247697\" style=\"zoom:50%;\" />\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">auth username password <span class=\"token comment\"># 切换用户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"IO-多线程\"><a href=\"#IO-多线程\" class=\"headerlink\" title=\"IO 多线程\"></a>IO 多线程</h3><p>IO多线程其实指客户端交互部分的网络IO交互处理模块多线程，而非执行命令多线程。Redis6执行命令依然是单线程。</p>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220105212524008.png\" alt=\"image-20220105212524008\" style=\"zoom:33%;\" />\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 多线程IO默认关闭，开启：</span>\nio-threads-do-reads <span class=\"token function\">yes</span>\nio-threads <span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"Redis-Lua\"><a href=\"#Redis-Lua\" class=\"headerlink\" title=\"Redis Lua\"></a>Redis Lua</h2><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220904225724018.png\" alt=\"image-20220904225724018\"></p>\n<h3 id=\"查询比较删除\"><a href=\"#查询比较删除\" class=\"headerlink\" title=\"查询比较删除\"></a>查询比较删除</h3><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20220904230035579.png\" alt=\"image-20220904230035579\"></p>\n<h3 id=\"JavaAPI\"><a href=\"#JavaAPI\" class=\"headerlink\" title=\"JavaAPI\"></a>JavaAPI</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">template<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">,</span>keyList<span class=\"token punctuation\">,</span>argsList<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","text":" Linux 基础环境配置 配置gcc # 检查是否安装 gcc --version # 未安装的话 yum install centos-release-scl scl-utils-build yum install -y devtoolset-8-toolchain scl ...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"Redis","slug":"Redis","count":2,"path":"api/tags/Redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Linux-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Linux 基础环境配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">Redis 基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">五大数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#String\"><span class=\"toc-text\">String</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#List\"><span class=\"toc-text\">List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-1\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Set\"><span class=\"toc-text\">Set</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-2\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Hash\"><span class=\"toc-text\">Hash</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-3\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Zset\"><span class=\"toc-text\">Zset</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-4\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-4\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%B1%87%E6%80%BB\"><span class=\"toc-text\">数据结构汇总</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bitmaps\"><span class=\"toc-text\">Bitmaps</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-5\"><span class=\"toc-text\">常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Bitmaps%E4%B8%8Eset%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">Bitmaps与set对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HyperLogLog\"><span class=\"toc-text\">HyperLogLog</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-6\"><span class=\"toc-text\">常用命令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Geospatial\"><span class=\"toc-text\">Geospatial</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Stream\"><span class=\"toc-text\">Stream</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Redis 基础操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis-%E9%94%AE%EF%BC%88Key%EF%BC%89\"><span class=\"toc-text\">Redis 键（Key）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">发布和订阅</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E7%A7%8DJava%E6%95%B4%E5%90%88%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">两种Java整合操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jedis\"><span class=\"toc-text\">Jedis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B%EF%BC%9A%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">简单案例：验证码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#letuuce%EF%BC%88SpringDataRedis%E9%BB%98%E8%AE%A4%EF%BC%89\"><span class=\"toc-text\">letuuce（SpringDataRedis默认）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">Redis 事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Multi%E3%80%81Exec%E3%80%81discard\"><span class=\"toc-text\">Multi、Exec、discard</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">事务错误处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E5%86%B2%E7%AA%81\"><span class=\"toc-text\">事务冲突</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%82%B2%E8%A7%82%E9%94%81\"><span class=\"toc-text\">悲观锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B9%90%E8%A7%82%E9%94%81\"><span class=\"toc-text\">乐观锁</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis-%E5%8A%A0%E9%94%81%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">Redis 加锁机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis-%E4%BA%8B%E5%8A%A1%E4%B8%89%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">Redis 事务三特性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-%E7%A7%92%E6%9D%80%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Redis 秒杀实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">并发测试工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">测试模板</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">Java 代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%BB%88%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">最终实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-%E6%8C%81%E4%B9%85%E5%8C%96\"><span class=\"toc-text\">Redis 持久化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RDB%EF%BC%88Redis-Database-Backup-file%EF%BC%89\"><span class=\"toc-text\">RDB（Redis Database Backup file）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A6%E5%8F%91%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">触发方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8A%BF-amp-%E5%8A%A3%E5%8A%BF\"><span class=\"toc-text\">优势&amp;劣势</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AOF\"><span class=\"toc-text\">AOF</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">持久化流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AOF-%E5%90%AF%E5%8A%A8-x2F-%E4%BF%AE%E5%A4%8D-x2F-%E6%81%A2%E5%A4%8D\"><span class=\"toc-text\">AOF 启动&#x2F;修复&#x2F;恢复</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AOF-%E5%90%8C%E6%AD%A5%E9%A2%91%E7%8E%87\"><span class=\"toc-text\">AOF 同步频率</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Rewrite-%E9%87%8D%E5%86%99\"><span class=\"toc-text\">Rewrite 重写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">优势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A3%E5%8A%BF\"><span class=\"toc-text\">劣势</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">使用建议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">性能建议</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">Redis 主从复制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">复制原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E4%B8%89%E6%8B%9B\"><span class=\"toc-text\">常用三招</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%86\"><span class=\"toc-text\">一主二仆</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%96%AA%E7%81%AB%E7%9B%B8%E4%BC%A0\"><span class=\"toc-text\">薪火相传</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%AE%A2%E4%B8%BA%E4%B8%BB\"><span class=\"toc-text\">反客为主</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">哨兵模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6%E5%BB%B6%E8%BF%9F\"><span class=\"toc-text\">复制延迟</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D\"><span class=\"toc-text\">故障恢复</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Java-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Java 实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">Redis 集群</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BADemo\"><span class=\"toc-text\">简单搭建Demo</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%86%E7%BE%A4%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">集群命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E9%9B%86%E7%BE%A4Jedis\"><span class=\"toc-text\">Java集群Jedis</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%86%E7%BE%A4%E5%88%A9%E5%BC%8A\"><span class=\"toc-text\">集群利弊</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Redis 应用问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F\"><span class=\"toc-text\">缓存穿透</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9\"><span class=\"toc-text\">缓存雪崩</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-1\"><span class=\"toc-text\">解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-1\"><span class=\"toc-text\">缓存雪崩</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0-2\"><span class=\"toc-text\">问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-2\"><span class=\"toc-text\">解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">分布式锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0-3\"><span class=\"toc-text\">问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9ARedis-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">解决方案：Redis 实现分布式锁</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis6-%E6%96%B0%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">Redis6 新功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ACL\"><span class=\"toc-text\">ACL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">命令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IO-%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">IO 多线程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-Lua\"><span class=\"toc-text\">Redis Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E6%AF%94%E8%BE%83%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">查询比较删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JavaAPI\"><span class=\"toc-text\">JavaAPI</span></a></li></ol></li></ol>","author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL基础","uid":"4a207b7e885fdbcca8129599135e5f2e","slug":"MySQL基础","date":"2022-09-30T09:27:41.000Z","updated":"2022-09-30T09:28:44.872Z","comments":true,"path":"api/articles/MySQL基础.json","keywords":null,"cover":[],"text":"MySQL 索引结构 - rickiyang - 博客园 (cnblogs.com) MySQL基础1.基础语法 Null 相关 使用 is null，例如查询哪些员工津贴为null： select empno,ename,sal from emp where comm is n...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"MySQL基础","slug":"MySQL基础","count":1,"path":"api/tags/MySQL基础.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},"next_post":{"title":"浅析HTTP发展历程","uid":"0078db1e0e91966be57f6a3288ece9dc","slug":"浅析HTTP发展历程","date":"2022-09-27T14:15:15.000Z","updated":"2022-09-27T14:16:23.768Z","comments":true,"path":"api/articles/浅析HTTP发展历程.json","keywords":null,"cover":[],"text":"浅析HTTP发展历程HTTP0.9 - 诞生最初版本的 HTTP 协议并没有版本号，后来它的版本号被定位在 0.9 以区分后来的版本。 HTTP&#x2F;0.9 极其简单：请求由单行指令构成，以唯一可用方法GET开头，其后跟目标资源的路径（一旦连接到服务器，协议、服务器、端口号...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}}}