{"title":"Kubernetes入门","uid":"e770f8dee4e3c6fbfdcee5dd8a2fe82a","slug":"Kubernetes入门","date":"2022-09-30T09:46:09.000Z","updated":"2022-09-30T09:57:12.891Z","comments":true,"path":"api/articles/Kubernetes入门.json","keywords":null,"cover":[],"content":"<h1 id=\"1-Kubernetes介绍\"><a href=\"#1-Kubernetes介绍\" class=\"headerlink\" title=\"1. Kubernetes介绍\"></a>1. Kubernetes介绍</h1><h2 id=\"1-1-kubernetes组件\"><a href=\"#1-1-kubernetes组件\" class=\"headerlink\" title=\"1.1 kubernetes组件\"></a>1.1 kubernetes组件</h2><p>一个kubernetes集群主要是由**控制节点(master)<strong>、</strong>工作节点(node)**构成，每个节点上都会安装不同的组件。</p>\n<p><strong>master：集群的控制平面，负责集群的决策 ( 管理 )</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>ApiServer</strong> : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</p>\n<p><strong>Scheduler</strong> : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</p>\n<p><strong>ControllerManager</strong> : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</p>\n<p><strong>Etcd</strong> ：负责存储集群中各种资源对象的信息</p></blockquote>\n<p><strong>node：集群的数据平面，负责为容器提供运行环境 ( 干活 )</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Kubelet</strong> : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</p>\n<p><strong>KubeProxy</strong> : 负责提供集群内部的服务发现和负载均衡</p>\n<p><strong>Docker</strong> : 负责节点上容器的各种操作</p></blockquote>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200406184656917.png\" alt=\"image-20200406184656917\"></p>\n<h2 id=\"1-2-kubernetes概念\"><a href=\"#1-2-kubernetes概念\" class=\"headerlink\" title=\"1.2 kubernetes概念\"></a>1.2 kubernetes概念</h2><p><strong>Pod</strong>：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器</p>\n<p><strong>Controller</strong>：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</p>\n<p><strong>Service</strong>：pod对外服务的统一入口，下面可以维护者同一类的多个pod</p>\n<p><strong>Label</strong>：标签，用于对pod进行分类，同一类pod会拥有相同的标签</p>\n<p><strong>NameSpace</strong>：命名空间，用来隔离pod的运行环境</p>\n<h1 id=\"2-部署\"><a href=\"#2-部署\" class=\"headerlink\" title=\"2. 部署\"></a>2. 部署</h1><p>见 Linux环境部署.md</p>\n<h1 id=\"3-资源管理\"><a href=\"#3-资源管理\" class=\"headerlink\" title=\"3. 资源管理\"></a>3. 资源管理</h1><h2 id=\"3-1-资源管理介绍\"><a href=\"#3-1-资源管理介绍\" class=\"headerlink\" title=\"3.1 资源管理介绍\"></a>3.1 资源管理介绍</h2><p>在kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernetes。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。</p>\n<p>kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在<code>Pod</code>中，而kubernetes一般也不会直接管理Pod，而是通过<code>Pod控制器</code>来管理Pod的。</p>\n<p>Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了<code>Service</code>资源实现这个功能。</p>\n<p>当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种<code>存储</code>系统。</p></blockquote>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200406225334627.png\" alt=\"image-20200406225334627\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>学习kubernetes的核心，就是学习如何对集群上的<code>Pod、Pod控制器、Service、存储</code>等各种资源进行操作</p></blockquote>\n<h2 id=\"3-2-YAML语言介绍\"><a href=\"#3-2-YAML语言介绍\" class=\"headerlink\" title=\"3.2 YAML语言介绍\"></a>3.2 YAML语言介绍</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期</span>\n<span class=\"token comment\"># 1 布尔类型</span>\n<span class=\"token key atrule\">c1</span><span class=\"token punctuation\">:</span> true (或者True)\n<span class=\"token comment\"># 2 整型</span>\n<span class=\"token key atrule\">c2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">234</span>\n<span class=\"token comment\"># 3 浮点型</span>\n<span class=\"token key atrule\">c3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.14</span>\n<span class=\"token comment\"># 4 null类型 </span>\n<span class=\"token key atrule\">c4</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span>  \n<span class=\"token comment\"># 5 日期类型</span>\n<span class=\"token key atrule\">c5</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-02-17</span>    <span class=\"token comment\"># 日期必须使用ISO 8601格式，即yyyy-MM-dd</span>\n<span class=\"token comment\"># 6 时间类型</span>\n<span class=\"token key atrule\">c6</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-02-17T15:02:31+08:00</span>  <span class=\"token comment\"># 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span>\n<span class=\"token comment\"># 7 字符串类型</span>\n<span class=\"token key atrule\">c7</span><span class=\"token punctuation\">:</span> heima     <span class=\"token comment\"># 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 </span>\n<span class=\"token key atrule\">c8</span><span class=\"token punctuation\">:</span> line1\n    line2     <span class=\"token comment\"># 字符串过多的情况可以拆成多行，每一行会被转化成一个空格</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 对象</span>\n<span class=\"token comment\"># 形式一(推荐):</span>\n<span class=\"token key atrule\">heima</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>\n  <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> Beijing\n<span class=\"token comment\"># 形式二(了解):</span>\n<span class=\"token key atrule\">heima</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> Beijing<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 数组</span>\n<span class=\"token comment\"># 形式一(推荐):</span>\n<span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> 顺义\n  <span class=\"token punctuation\">-</span> 昌平  \n<span class=\"token comment\"># 形式二(了解):</span>\n<span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>顺义<span class=\"token punctuation\">,</span>昌平<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://www.json2yaml.com/convert-yaml-to-json\">yaml ↔ json网站</a></p></blockquote>\n<h2 id=\"3-3-资源管理方式\"><a href=\"#3-3-资源管理方式\" class=\"headerlink\" title=\"3.3 资源管理方式\"></a>3.3 资源管理方式</h2><ul>\n<li><p>命令式对象管理：直接使用命令去操作kubernetes资源</p>\n<p><strong><code>kubectl run nginx-pod --image=nginx:1.17.1 --port=80</code></strong></p>\n</li>\n<li><p>命令式对象配置：通过命令配置和配置文件去操作kubernetes资源</p>\n<p><strong><code>kubectl create/patch -f nginx-pod.yaml</code></strong></p>\n</li>\n<li><p>声明式对象配置：通过apply命令和配置文件去操作kubernetes资源</p>\n<p><strong><code>kubectl apply -f nginx-pod.yaml</code></strong></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">操作对象</th>\n<th align=\"left\">适用环境</th>\n<th align=\"left\">优点</th>\n<th align=\"left\">缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">命令式对象管理</td>\n<td align=\"left\">对象</td>\n<td align=\"left\">测试</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">只能操作活动对象，无法审计、跟踪</td>\n</tr>\n<tr>\n<td align=\"left\">命令式对象配置</td>\n<td align=\"left\">文件</td>\n<td align=\"left\">开发</td>\n<td align=\"left\">可以审计、跟踪</td>\n<td align=\"left\">项目大时，配置文件多，操作麻烦</td>\n</tr>\n<tr>\n<td align=\"left\">声明式对象配置</td>\n<td align=\"left\">目录</td>\n<td align=\"left\">开发</td>\n<td align=\"left\">支持目录操作</td>\n<td align=\"left\">意外情况下难以调试</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-3-1-命令式对象管理\"><a href=\"#3-3-1-命令式对象管理\" class=\"headerlink\" title=\"3.3.1 命令式对象管理\"></a>3.3.1 命令式对象管理</h3><p><strong>kubectl命令</strong></p>\n<p>kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl命令的语法如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl [command] [type] [name] [flags]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>comand</strong>：指定要对资源执行的操作，例如create、get、delete</p>\n<p><strong>type</strong>：指定资源类型，比如deployment、pod、service</p>\n<p><strong>name</strong>：指定资源的名称，名称大小写敏感</p>\n<p><strong>flags</strong>：指定额外的可选参数</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看所有pod</span>\nkubectl get pod \n<span class=\"token comment\"># 查看某个pod</span>\nkubectl get pod pod_name\n<span class=\"token comment\"># 查看某个pod,以yaml格式展示结果</span>\nkubectl get pod pod_name <span class=\"token parameter variable\">-o</span> yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>资源类型</strong></p>\n<p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl api-resources<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>经常使用的资源有下面这些：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">资源分类</th>\n<th align=\"center\">资源名称</th>\n<th align=\"center\">缩写</th>\n<th align=\"center\">资源作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">集群级别资源</td>\n<td align=\"center\">nodes</td>\n<td align=\"center\">no</td>\n<td align=\"center\">集群组成部分</td>\n</tr>\n<tr>\n<td align=\"center\">namespaces</td>\n<td align=\"center\">ns</td>\n<td align=\"center\">隔离Pod</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">pod资源</td>\n<td align=\"center\">pods</td>\n<td align=\"center\">po</td>\n<td align=\"center\">装载容器</td>\n</tr>\n<tr>\n<td align=\"center\">pod资源控制器</td>\n<td align=\"center\">replicationcontrollers</td>\n<td align=\"center\">rc</td>\n<td align=\"center\">控制pod资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">replicasets</td>\n<td align=\"center\">rs</td>\n<td align=\"center\">控制pod资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">deployments</td>\n<td align=\"center\">deploy</td>\n<td align=\"center\">控制pod资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">daemonsets</td>\n<td align=\"center\">ds</td>\n<td align=\"center\">控制pod资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">jobs</td>\n<td align=\"center\"></td>\n<td align=\"center\">控制pod资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">cronjobs</td>\n<td align=\"center\">cj</td>\n<td align=\"center\">控制pod资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">horizontalpodautoscalers</td>\n<td align=\"center\">hpa</td>\n<td align=\"center\">控制pod资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">statefulsets</td>\n<td align=\"center\">sts</td>\n<td align=\"center\">控制pod资源</td>\n</tr>\n<tr>\n<td align=\"center\">服务发现资源</td>\n<td align=\"center\">services</td>\n<td align=\"center\">svc</td>\n<td align=\"center\">统一pod对外接口</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">ingress</td>\n<td align=\"center\">ing</td>\n<td align=\"center\">统一pod对外接口</td>\n</tr>\n<tr>\n<td align=\"center\">存储资源</td>\n<td align=\"center\">volumeattachments</td>\n<td align=\"center\"></td>\n<td align=\"center\">存储</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">persistentvolumes</td>\n<td align=\"center\">pv</td>\n<td align=\"center\">存储</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">persistentvolumeclaims</td>\n<td align=\"center\">pvc</td>\n<td align=\"center\">存储</td>\n</tr>\n<tr>\n<td align=\"center\">配置资源</td>\n<td align=\"center\">configmaps</td>\n<td align=\"center\">cm</td>\n<td align=\"center\">配置</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">secrets</td>\n<td align=\"center\"></td>\n<td align=\"center\">配置</td>\n</tr>\n</tbody></table>\n<p><strong>操作</strong></p>\n<p>kubernetes允许对资源进行多种操作，可以通过–help查看详细的操作命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">kubectl --help<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>经常使用的操作有下面这些：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令分类</th>\n<th align=\"center\">命令</th>\n<th align=\"center\">翻译</th>\n<th align=\"center\">命令作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">基本命令</td>\n<td align=\"center\">create</td>\n<td align=\"center\">创建</td>\n<td align=\"center\">创建一个资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">edit</td>\n<td align=\"center\">编辑</td>\n<td align=\"center\">编辑一个资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">get</td>\n<td align=\"center\">获取</td>\n<td align=\"center\">获取一个资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">patch</td>\n<td align=\"center\">更新</td>\n<td align=\"center\">更新一个资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">delete</td>\n<td align=\"center\">删除</td>\n<td align=\"center\">删除一个资源</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">explain</td>\n<td align=\"center\">解释</td>\n<td align=\"center\">展示资源文档</td>\n</tr>\n<tr>\n<td align=\"center\">运行和调试</td>\n<td align=\"center\">run</td>\n<td align=\"center\">运行</td>\n<td align=\"center\">在集群中运行一个指定的镜像</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">expose</td>\n<td align=\"center\">暴露</td>\n<td align=\"center\">暴露资源为Service</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"><strong>describe</strong></td>\n<td align=\"center\">描述</td>\n<td align=\"center\">显示资源内部信息</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">logs</td>\n<td align=\"center\">日志输出容器在 pod 中的日志</td>\n<td align=\"center\">输出容器在 pod 中的日志</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">attach</td>\n<td align=\"center\">缠绕进入运行中的容器</td>\n<td align=\"center\">进入运行中的容器</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">exec</td>\n<td align=\"center\">执行容器中的一个命令</td>\n<td align=\"center\">执行容器中的一个命令</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">cp</td>\n<td align=\"center\">复制</td>\n<td align=\"center\">在Pod内外复制文件</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">rollout</td>\n<td align=\"center\">首次展示</td>\n<td align=\"center\">管理资源的发布</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">scale</td>\n<td align=\"center\">规模</td>\n<td align=\"center\">扩(缩)容Pod的数量</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">autoscale</td>\n<td align=\"center\">自动调整</td>\n<td align=\"center\">自动调整Pod的数量</td>\n</tr>\n<tr>\n<td align=\"center\">高级命令</td>\n<td align=\"center\">apply</td>\n<td align=\"center\">rc</td>\n<td align=\"center\">通过文件对资源进行配置</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">label</td>\n<td align=\"center\">标签</td>\n<td align=\"center\">更新资源上的标签</td>\n</tr>\n<tr>\n<td align=\"center\">其他命令</td>\n<td align=\"center\">cluster-info</td>\n<td align=\"center\">集群信息</td>\n<td align=\"center\">显示集群信息</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">version</td>\n<td align=\"center\">版本</td>\n<td align=\"center\">显示当前Server和Client的版本</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 下面以一个namespace / pod的创建和删除简单演示下命令的使用：</span>\n<span class=\"token comment\"># 创建一个namespace</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create namespace dev</span>\nnamespace/dev created\n\n<span class=\"token comment\"># 获取namespace</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get ns</span>\nNAME              STATUS   AGE\ndefault           Active   21h\ndev               Active   21s\nkube-node-lease   Active   21h\nkube-public       Active   21h\nkube-system       Active   21h\n\n<span class=\"token comment\"># 在此namespace下创建并运行一个nginx的Pod</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl run pod --image=nginx:latest -n dev</span>\nkubectl run <span class=\"token parameter variable\">--generator</span><span class=\"token operator\">=</span>deployment/apps.v1 is DEPRECATED and will be removed <span class=\"token keyword\">in</span> a future version. Use kubectl run <span class=\"token parameter variable\">--generator</span><span class=\"token operator\">=</span>run-pod/v1 or kubectl create instead.\ndeployment.apps/pod created\n\n<span class=\"token comment\"># 查看新创建的pod</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pod -n dev</span>\nNAME  READY   STATUS    RESTARTS   AGE\npod   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          21s\n\n<span class=\"token comment\"># 删除指定的pod</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl delete pod pod-864f9875b9-pcw7x</span>\npod <span class=\"token string\">\"pod\"</span> deleted\n\n<span class=\"token comment\"># 删除指定的namespace</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl delete ns dev</span>\nnamespace <span class=\"token string\">\"dev\"</span> deleted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-3-3-声明式对象配置\"><a href=\"#3-3-3-声明式对象配置\" class=\"headerlink\" title=\"3.3.3 声明式对象配置\"></a>3.3.3 声明式对象配置</h3><ul>\n<li>如果资源不存在，就<strong>创建</strong>，相当于 kubectl create</li>\n<li>如果资源已存在，就<strong>更新</strong>，相当于 kubectl patch</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>扩展：kubectl可以在node节点上运行吗 ?</p></blockquote>\n<p>kubectl的运行是需要进行配置的，它的配置文件是$HOME&#x2F;.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 主节点执行</span>\n<span class=\"token function\">scp</span>  <span class=\"token parameter variable\">-r</span>  ~/.kube   k8s.node2:~/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"4-实战入门\"><a href=\"#4-实战入门\" class=\"headerlink\" title=\"4. 实战入门\"></a>4. 实战入门</h1><h2 id=\"4-1-Namespace\"><a href=\"#4-1-Namespace\" class=\"headerlink\" title=\"4.1 Namespace\"></a>4.1 Namespace</h2><p>Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现<strong>多套环境的资源隔离</strong>或者<strong>多租户的资源隔离</strong>。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200407100850484.png\" alt=\"image-20200407100850484\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 默认创建的namespace</span>\nNAME              STATUS   AGE\ndefault           Active   45h     <span class=\"token comment\">#  所有未指定Namespace的对象都会被分配在default命名空间</span>\nkube-node-lease   Active   45h     <span class=\"token comment\">#  集群节点之间的心跳维护，v1.13开始引入</span>\nkube-public       Active   45h     <span class=\"token comment\">#  此命名空间下的资源可以被所有人访问（包括未认证用户）</span>\nkube-system       Active   45h     <span class=\"token comment\">#  所有由Kubernetes系统创建的资源都处于这个命名空间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>查看</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1 查看所有的ns  命令：kubectl get ns</span>\nkubectl get ns\n<span class=\"token comment\"># 2 查看指定的ns   命令：kubectl get ns ns名称</span>\nkubectl get ns default\n<span class=\"token comment\"># 3 指定输出格式  命令：kubectl get ns ns名称  -o 格式参数</span>\n<span class=\"token comment\"># kubernetes支持的格式有很多，比较常见的是wide、json、yaml</span>\nkubectl get ns default <span class=\"token parameter variable\">-o</span> yaml  \n<span class=\"token comment\"># 4 查看ns详情  命令：kubectl describe ns ns名称</span>\n<span class=\"token function\">sudo</span> kubectl describe ns default\n<span class=\"token comment\"># 5 创建&amp;删除</span>\nkubectl create ns dev\nkubectl delete ns dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>YAML语法</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># ns-dev.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Namespace\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-2-Pod\"><a href=\"#4-2-Pod\" class=\"headerlink\" title=\"4.2 Pod\"></a>4.2 Pod</h2><p>Pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在于Pod中。</p>\n<p>Pod可以认为是容器的封装，一个Pod中可以存在一个或者多个容器。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200407121501907.png\" alt=\"image-20200407121501907\"></p>\n<p><strong>Pod相关命令</strong></p>\n<p>kubernetes没有提供单独运行Pod的命令，都是通过Pod控制器来实现的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看指定名称空间</span>\nkubectl get pod <span class=\"token parameter variable\">-n</span> kube-system\n<span class=\"token comment\"># 创建并运行【这种方式创建了控制器，想要删除还需要删除deployment】</span>\nkubectl run nginx <span class=\"token parameter variable\">--image</span><span class=\"token operator\">=</span>nginx:latest <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">80</span> <span class=\"token parameter variable\">--namespace</span> dev \n<span class=\"token comment\"># 查看Pod基本信息</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看Pod的详细信息 describe  最后的events较为重要，用于拍错</span>\nkubectl describe pod nginx <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 获取podIP</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\">#访问POD</span>\n<span class=\"token function\">curl</span> http://10.244.37.201\n<span class=\"token comment\"># 删除指定Pod</span>\nkubectl delete pod nginx <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查询一下当前namespace下的Pod控制器</span>\nkubectl get deploy <span class=\"token parameter variable\">-n</span>  dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>YAML配置</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-3-Label\"><a href=\"#4-3-Label\" class=\"headerlink\" title=\"4.3 Label\"></a>4.3 Label</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一些常用的Label 示例如下：</p>\n<ul>\n<li>版本标签：”version”:”release”, “version”:”stable”……</li>\n<li>环境标签：”environment”:”dev”，”environment”:”test”，”environment”:”pro”</li>\n<li>架构标签：”tier”:”frontend”，”tier”:”backend”</li>\n</ul></blockquote>\n<p>当前有两种Label Selector：</p>\n<ul>\n<li><p><strong>基于等式的Label Selector</strong></p>\n<p><code>name = slave</code> 选择所有包含Label中key&#x3D;”name”且value&#x3D;”slave”的对象</p>\n<p><code>env != production</code>选择所有包括Label中的key&#x3D;”env”且value不等于”production”的对象</p>\n</li>\n<li><p><strong>基于集合的Label Selector</strong></p>\n<p><code>name in (master, slave)</code> 选择所有包含Label中的key&#x3D;”name”且value&#x3D;”master”或”slave”的对象</p>\n<p><code>name not in (frontend)</code> 选择所有包含Label中的key&#x3D;”name”且value不等于”frontend”的对象</p>\n</li>\n</ul>\n<p>标签的选择条件可以使用多个，此时将多个Label Selector进行组合，使用逗号”,”进行分隔即可。例如：</p>\n<p><code>name=slave,env!=production</code></p>\n<p><code>name not in (frontend),env!=production</code></p>\n<p><strong>Label相关命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 为pod资源打标签</span>\nkubectl label pod nginx-pod <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token number\">1.0</span> <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 为pod资源更新标签</span>\nkubectl label pod nginx-pod <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token number\">2.0</span> <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">--overwrite</span>\n<span class=\"token comment\"># 查看标签</span>\nkubectl get pod nginx-pod  <span class=\"token parameter variable\">-n</span> dev --show-labels\n<span class=\"token comment\"># 筛选标签</span>\nkubectl get pod <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-l</span> <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token number\">2.0</span>  --show-labels\nkubectl get pod <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-l</span> version<span class=\"token operator\">!=</span><span class=\"token number\">2.0</span> --show-labels\n<span class=\"token comment\">#删除标签</span>\nkubectl label pod nginx-pod version- <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>YAML配置</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.0\"</span> \n    <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test\"</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-4-Deployment\"><a href=\"#4-4-Deployment\" class=\"headerlink\" title=\"4.4 Deployment\"></a>4.4 Deployment</h2><p>在kubernetes中，Pod是最小的控制单元，但是kubernetes很少直接控制Pod，一般都是通过Pod控制器来完成的。Pod控制器用于pod的管理，确保pod资源符合预期的状态，当pod的资源出现故障时，会尝试进行重启或重建pod。</p>\n<p>Pod控制器其中的一种是 Deployment</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200408193950807.png\" alt=\"image-20200408193950807\"></p>\n<p><strong>命令操作</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 命令格式: kubectl create deployment 名称  [参数] </span>\n<span class=\"token comment\"># --image  指定pod的镜像</span>\n<span class=\"token comment\"># --port   指定端口</span>\n<span class=\"token comment\"># --replicas  指定创建pod数量</span>\n<span class=\"token comment\"># --namespace  指定namespace</span>\nkubectl create deploy nginx <span class=\"token parameter variable\">--image</span><span class=\"token operator\">=</span>nginx:latest <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">80</span> <span class=\"token parameter variable\">--replicas</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看创建的Pod</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看deployment的信息</span>\n<span class=\"token comment\"># UP-TO-DATE：成功升级的副本数量</span>\n<span class=\"token comment\"># AVAILABLE：可用副本的数量</span>\nkubectl get deploy <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 查看deployment的详细信息</span>\nkubectl describe deploy nginx <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 删除 </span>\nkubectl delete deploy nginx <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>配置操作</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># deploy-nginx.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  \n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> nginx\n      \n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>latest\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n          <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-5-Service\"><a href=\"#4-5-Service\" class=\"headerlink\" title=\"4.5 Service\"></a>4.5 Service</h2><p>Service可以看作是一组同类Pod<strong>对外的访问接口</strong>。借助Service，应用可以方便地实现服务发现和负载均衡。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200408194716912.png\" alt=\"image-20200408194716912\"></p>\n<p><strong>操作一：创建集群内部可访问的Service</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 暴露Service</span>\nkubectl expose deploy nginx <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>svc-nginx1 <span class=\"token parameter variable\">--type</span><span class=\"token operator\">=</span>ClusterIP <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">80</span> --target-port<span class=\"token operator\">=</span><span class=\"token number\">80</span> <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看service</span>\nkubectl get svc  <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 这里产生了一个CLUSTER-IP，这就是service的IP，在Service的生命周期中，这个地址是不会变动的</span>\n<span class=\"token comment\"># 可以通过这个IP访问当前service对应的POD</span>\n<span class=\"token function\">curl</span> <span class=\"token number\">10.109</span>.179.231:80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>操作二：创建集群外部也可访问的Service</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 上面创建的Service的type类型为ClusterIP，这个ip地址只用集群内部可访问</span>\n<span class=\"token comment\"># 如果需要创建外部也可以访问的Service，需要修改type为NodePort</span>\nkubectl expose deploy nginx <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>svc-nginx2 <span class=\"token parameter variable\">--type</span><span class=\"token operator\">=</span>NodePort <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">80</span> --target-port<span class=\"token operator\">=</span><span class=\"token number\">80</span> <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 此时查看，会发现出现了NodePort类型的Service，而且有一对Port（80:31928/TC）</span>\nkubectl get svc  svc-nginx2  <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 接下来就可以通过集群外的主机访问 节点IP:31928访问服务了</span>\n<span class=\"token comment\"># 例如在的电脑主机上通过浏览器访问下面的地址</span>\nhttp://192.168.5.4:31928/\n<span class=\"token comment\">#删除Service</span>\nkubectl delete svc svc-nginx1 <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>配置方式</strong></p>\n<p>创建一个svc-nginx.yaml，内容如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> svc<span class=\"token punctuation\">-</span>nginx\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span> 10.109.179.231 <span class=\"token comment\">#固定svc的内网ip</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"5-Pod详解\"><a href=\"#5-Pod详解\" class=\"headerlink\" title=\"5. Pod详解\"></a>5. Pod详解</h1><h2 id=\"5-1-Pod介绍\"><a href=\"#5-1-Pod介绍\" class=\"headerlink\" title=\"5.1 Pod介绍\"></a>5.1 Pod介绍</h2><h3 id=\"5-1-1-Pod结构\"><a href=\"#5-1-1-Pod结构\" class=\"headerlink\" title=\"5.1.1 Pod结构\"></a>5.1.1 Pod结构</h3><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image202004071215019071626781151898.png\" alt=\"image-20200407121501907\"></p>\n<p>每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类：</p>\n<ul>\n<li><p>用户程序所在的容器，数量可多可少</p>\n</li>\n<li><p>Pause容器，这是每个Pod都会有的一个<strong>根容器</strong>，它的作用有两个：</p>\n<ul>\n<li><p>可以以它为依据，评估整个Pod的健康状态</p>\n</li>\n<li><p>可以在根容器上设置Ip地址，其它容器都此Ip（Pod IP），以实现Pod内部的网路通信</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-1-2-Pod定义\"><a href=\"#5-1-2-Pod定义\" class=\"headerlink\" title=\"5.1.2 Pod定义\"></a>5.1.2 Pod定义</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apiVersion: v1     <span class=\"token comment\">#必选，版本号，例如v1</span>\nkind: Pod       　 <span class=\"token comment\">#必选，资源类型，例如 Pod</span>\nmetadata:       　 <span class=\"token comment\">#必选，元数据</span>\n  name: string     <span class=\"token comment\">#必选，Pod名称</span>\n  namespace: string  <span class=\"token comment\">#Pod所属的命名空间,默认为\"default\"</span>\n  labels:       　　  <span class=\"token comment\">#自定义标签列表</span>\n    - name: string      　          \nspec:  <span class=\"token comment\">#必选，Pod中容器的详细定义</span>\n  containers:  <span class=\"token comment\">#必选，Pod中容器列表</span>\n  - name: string   <span class=\"token comment\">#必选，容器名称</span>\n    image: string  <span class=\"token comment\">#必选，容器的镜像名称</span>\n    imagePullPolicy: <span class=\"token punctuation\">[</span> Always<span class=\"token operator\">|</span>Never<span class=\"token operator\">|</span>IfNotPresent <span class=\"token punctuation\">]</span>  <span class=\"token comment\">#获取镜像的策略 </span>\n    command: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>   <span class=\"token comment\">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span>\n    args: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>      <span class=\"token comment\">#容器的启动命令参数列表</span>\n    workingDir: string  <span class=\"token comment\">#容器的工作目录</span>\n    volumeMounts:       <span class=\"token comment\">#挂载到容器内部的存储卷配置</span>\n    - name: string      <span class=\"token comment\">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span>\n      mountPath: string <span class=\"token comment\">#存储卷在容器内mount的绝对路径，应少于512字符</span>\n      readOnly: boolean <span class=\"token comment\">#是否为只读模式</span>\n    ports: <span class=\"token comment\">#需要暴露的端口库号列表</span>\n    - name: string        <span class=\"token comment\">#端口的名称</span>\n      containerPort: int  <span class=\"token comment\">#容器需要监听的端口号</span>\n      hostPort: int       <span class=\"token comment\">#容器所在主机需要监听的端口号，默认与Container相同</span>\n      protocol: string    <span class=\"token comment\">#端口协议，支持TCP和UDP，默认TCP</span>\n    env:   <span class=\"token comment\">#容器运行前需设置的环境变量列表</span>\n    - name: string  <span class=\"token comment\">#环境变量名称</span>\n      value: string <span class=\"token comment\">#环境变量的值</span>\n    resources: <span class=\"token comment\">#资源限制和请求的设置</span>\n      limits:  <span class=\"token comment\">#资源限制的设置</span>\n        cpu: string     <span class=\"token comment\">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span>\n        memory: string  <span class=\"token comment\">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span>\n      requests: <span class=\"token comment\">#资源请求的设置</span>\n        cpu: string    <span class=\"token comment\">#Cpu请求，容器启动的初始可用数量</span>\n        memory: string <span class=\"token comment\">#内存请求,容器启动的初始可用数量</span>\n    lifecycle: <span class=\"token comment\">#生命周期钩子</span>\n        postStart: <span class=\"token comment\">#容器启动后立即执行此钩子,如果执行失败,会根据重启策略进行重启</span>\n        preStop: <span class=\"token comment\">#容器终止前执行此钩子,无论结果如何,容器都会终止</span>\n    livenessProbe:  <span class=\"token comment\">#对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器</span>\n      exec:       　 <span class=\"token comment\">#对Pod容器内检查方式设置为exec方式</span>\n        command: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>  <span class=\"token comment\">#exec方式需要制定的命令或脚本</span>\n      httpGet:       <span class=\"token comment\">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span>\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     <span class=\"token comment\">#对Pod内个容器健康检查方式设置为tcpSocket方式</span>\n         port: number\n       initialDelaySeconds: <span class=\"token number\">0</span>       <span class=\"token comment\">#容器启动完成后首次探测的时间，单位为秒</span>\n       timeoutSeconds: <span class=\"token number\">0</span>    　　    <span class=\"token comment\">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span>\n       periodSeconds: <span class=\"token number\">0</span>     　　    <span class=\"token comment\">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span>\n       successThreshold: <span class=\"token number\">0</span>\n       failureThreshold: <span class=\"token number\">0</span>\n       securityContext:\n         privileged: <span class=\"token boolean\">false</span>\n  restartPolicy: <span class=\"token punctuation\">[</span>Always <span class=\"token operator\">|</span> Never <span class=\"token operator\">|</span> OnFailure<span class=\"token punctuation\">]</span>  <span class=\"token comment\">#Pod的重启策略</span>\n  nodeName: <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token comment\">#设置NodeName表示将该Pod调度到指定到名称的node节点上</span>\n  nodeSelector: obeject <span class=\"token comment\">#设置NodeSelector表示将该Pod调度到包含这个label的node上</span>\n  imagePullSecrets: <span class=\"token comment\">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span>\n  - name: string\n  hostNetwork: <span class=\"token boolean\">false</span>   <span class=\"token comment\">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span>\n  volumes:   <span class=\"token comment\">#在该pod上定义共享存储卷列表</span>\n  - name: string    <span class=\"token comment\">#共享存储卷名称 （volumes类型有很多种）</span>\n    emptyDir: <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>       <span class=\"token comment\">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span>\n    hostPath: string   <span class=\"token comment\">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span>\n      path: string      　　        <span class=\"token comment\">#Pod所在宿主机的目录，将被用于同期中mount的目录</span>\n    secret:       　　　<span class=\"token comment\">#类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span>\n      scretname: string  \n      items:     \n      - key: string\n        path: string\n    configMap:         <span class=\"token comment\">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span>\n      name: string\n      items:\n      - key: string\n        path: string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#小提示：</span>\n<span class=\"token comment\">#   在这里，可通过一个命令来查看每种资源的可配置项</span>\n<span class=\"token comment\">#   kubectl explain 资源类型         查看某种资源可以配置的一级属性</span>\n<span class=\"token comment\">#   kubectl explain 资源类型.属性     查看属性的子属性</span>\nkubectl explain pod\n<span class=\"token comment\">#   apiVersion   &lt;string></span>\n<span class=\"token comment\">#   kind &lt;string></span>\n<span class=\"token comment\">#   metadata     &lt;Object></span>\n<span class=\"token comment\">#   spec &lt;Object></span>\n<span class=\"token comment\">#   status       &lt;Object></span>\nkubectl explain pod.metadata<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在kubernetes中基本所有资源的一级属性都是一样的，主要包含5部分：</p>\n<ul>\n<li>apiVersion <string> 版本，由kubernetes内部定义，版本号可以用 <code>kubectl api-versions</code> 查询到</li>\n<li>kind <string> 类型，由kubernetes内部定义，版本号可以用 <code>kubectl api-resources</code> 查询到</li>\n<li>metadata <Object> 元数据，主要是资源标识和说明，常用的有name、namespace、labels等</li>\n<li>status <Object> 状态信息，里面的内容不需要定义，由kubernetes自动生成</li>\n<li><strong>spec</strong> <Object> 描述，这是配置中最重要的一部分，里面是对各种资源配置的详细描述</li>\n</ul>\n<p>在上面的属性中，<strong>spec</strong>是接下来研究的重点，常见子属性：</p>\n<ul>\n<li>containers &lt;[]Object&gt; 容器列表，用于定义容器的详细信息</li>\n<li>nodeName <String> 根据nodeName的值将pod调度到指定的Node节点上</li>\n<li>nodeSelector &lt;map[]&gt; 根据NodeSelector中定义的信息选择将该Pod调度到包含这些label的Node 上</li>\n<li>hostNetwork <boolean> 是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</li>\n<li>volumes &lt;[]Object&gt; 存储卷，用于定义Pod上面挂在的存储信息</li>\n<li>restartPolicy <string> 重启策略，表示Pod在遇到故障的时候的处理策略</li>\n</ul>\n<h2 id=\"5-2-Pod配置\"><a href=\"#5-2-Pod配置\" class=\"headerlink\" title=\"5.2 Pod配置\"></a>5.2 Pod配置</h2><p>主要来研究<code>pod.spec.containers</code>属性</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl explain pod.spec.containers\n<span class=\"token comment\"># KIND:     Pod</span>\n<span class=\"token comment\"># VERSION:  v1</span>\n<span class=\"token comment\"># RESOURCE: containers &lt;[]Object>   # 数组，代表可以有多个容器</span>\n<span class=\"token comment\"># FIELDS:</span>\n<span class=\"token comment\">#    name  &lt;string>     # 容器名称</span>\n<span class=\"token comment\">#    image &lt;string>     # 容器需要的镜像地址</span>\n<span class=\"token comment\">#    imagePullPolicy  &lt;string> # 镜像拉取策略 </span>\n<span class=\"token comment\">#    command  &lt;[]string> # 容器的启动命令列表，如不指定，使用打包时使用的启动命令</span>\n<span class=\"token comment\">#    args     &lt;[]string> # 容器的启动命令需要的参数列表</span>\n<span class=\"token comment\">#    env      &lt;[]Object> # 容器环境变量的配置</span>\n<span class=\"token comment\">#    ports    &lt;[]Object>     # 容器需要暴露的端口号列表</span>\n<span class=\"token comment\">#    resources &lt;Object>      # 资源限制和资源请求的设置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-1-基本配置\"><a href=\"#5-2-1-基本配置\" class=\"headerlink\" title=\"5.2.1 基本配置\"></a>5.2.1 基本配置</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-base.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>base\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> heima\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1 <span class=\"token comment\"># 用1.17.1版本的nginx镜像创建，（nginx是一个轻量级web容器）</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span> <span class=\"token comment\"># 用1.30版本的busybox镜像创建，（busybox是一个小巧的linux命令集合）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl apply <span class=\"token parameter variable\">-f</span> pod-base.yaml\nkubectl get pod <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 可以通过describe查看内部的详情</span>\n<span class=\"token comment\"># 此时已经运行起来了一个基本的Pod，虽然它暂时有问题</span>\nkubectl describe pod pod-base <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-2-镜像拉取\"><a href=\"#5-2-2-镜像拉取\" class=\"headerlink\" title=\"5.2.2 镜像拉取\"></a>5.2.2 镜像拉取</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-imagepullpolicy.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>imagepullpolicy\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> Never <span class=\"token comment\"># 用于设置镜像拉取策略</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>imagePullPolicy</strong>，用于设置镜像拉取策略，kubernetes支持配置三种拉取策略：</p>\n<ul>\n<li><strong>Always</strong>：只使用远程</li>\n<li><strong>IfNotPresent</strong>：本地有则使用本地镜像，本地没有则从远程仓库拉取镜像【默认】</li>\n<li><strong>Never</strong>：只使用本地</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-imagepullpolicy.yaml\n<span class=\"token comment\"># 查看Pod详情</span>\n<span class=\"token comment\"># 此时明显可以看到nginx镜像有一步Pulling image \"nginx:1.17.1\"的过程</span>\nkubectl describe pod pod-imagepullpolicy <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-3-启动命令\"><a href=\"#5-2-3-启动命令\" class=\"headerlink\" title=\"5.2.3 启动命令\"></a>5.2.3 启动命令</h3><p><strong>在前面的案例中：busybox并不是一个程序，而是类似于一个工具类的集合，kubernetes集群启动管理后，它会自动关闭。解决方法就是让其一直在运行，这就用到了command配置。command，用于在pod中的容器初始化完毕之后运行一个命令。</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-command.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>command\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"touch /tmp/hello.txt;while true;do /bin/echo $(date +%T) >> /tmp/hello.txt; sleep 3; done;\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>每隔3秒向文件中写入当前时间</p>\n<p>“&#x2F;bin&#x2F;sh”,”-c”, 使用sh执行命令</p>\n<p>touch &#x2F;tmp&#x2F;hello.txt; 创建一个&#x2F;tmp&#x2F;hello.txt 文件</p>\n<p>while true;do &#x2F;bin&#x2F;echo $(date +%T) &gt;&gt; &#x2F;tmp&#x2F;hello.txt; sleep 3; done; </p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 重试</span>\nkubectl create  <span class=\"token parameter variable\">-f</span> pod-command.yaml\nkubectl get pods pod-command <span class=\"token parameter variable\">-n</span> dev\n\n<span class=\"token comment\"># 进入pod中的busybox容器，查看文件内容</span>\n<span class=\"token comment\"># 补充一个命令: kubectl exec  pod名称 -n 命名空间 -it -c 容器名称 /bin/sh  在容器内部执行命令</span>\n<span class=\"token comment\"># 使用这个命令就可以进入某个容器的内部，然后进行相关操作了</span>\n<span class=\"token comment\"># 比如，可以查看txt文件的内容</span>\nkubectl <span class=\"token builtin class-name\">exec</span> pod-command <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-c</span> busybox /bin/sh\n/ <span class=\"token comment\"># tail -f /tmp/hello.txt</span>\n<span class=\"token number\">14</span>:44:19\n<span class=\"token number\">14</span>:44:22\n<span class=\"token number\">14</span>:44:25<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">特别说明：\n    通过上面发现command已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个args选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的command、args两项其实是实现覆盖Dockerfile中ENTRYPOINT的功能。\n 1 如果command和args均没有写，那么用Dockerfile的配置。\n 2 如果command写了，但args没有写，那么Dockerfile默认的配置会被忽略，执行输入的command\n 3 如果command没写，但args写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前args的参数\n 4 如果command和args都写了，那么Dockerfile的配置被忽略，执行command并追加上args参数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-4-环境变量\"><a href=\"#5-2-4-环境变量\" class=\"headerlink\" title=\"5.2.4 环境变量\"></a>5.2.4 环境变量</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-env.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>env\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"while true;do /bin/echo $(date +%T);sleep 60; done;\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 设置环境变量列表</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"username\"</span>\n      <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"admin\"</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"password\"</span>\n      <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"123456\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>env，环境变量，用于在pod中的容器设置环境变量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-env.yaml\n<span class=\"token comment\"># 进入容器，输出环境变量</span>\nkubectl <span class=\"token builtin class-name\">exec</span> pod-env <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-c</span> busybox <span class=\"token parameter variable\">-it</span> /bin/sh\n/ <span class=\"token comment\"># echo $username</span>\nadmin\n/ <span class=\"token comment\"># echo $password</span>\n<span class=\"token number\">123456</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种方式不是很推荐，推荐将这些配置单独存储在配置文件中</p>\n<h3 id=\"5-2-5-端口设置\"><a href=\"#5-2-5-端口设置\" class=\"headerlink\" title=\"5.2.5 端口设置\"></a>5.2.5 端口设置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl explain pod.spec.containers.ports\n<span class=\"token comment\">#KIND:     Pod</span>\n<span class=\"token comment\">#VERSION:  v1</span>\n<span class=\"token comment\">#RESOURCE: ports &lt;[]Object></span>\n<span class=\"token comment\">#FIELDS:</span>\n<span class=\"token comment\">#   name         &lt;string>  # 端口名称，如果指定，必须保证name在pod中是唯一的\t\t</span>\n<span class=\"token comment\">#   containerPort&lt;integer> # 容器要监听的端口(0&lt;x&lt;65536)</span>\n<span class=\"token comment\">#   hostPort     &lt;integer> # 容器要在主机上公开的端口，如果设置，主机上只能运行容器的一个副本(一般省略) </span>\n<span class=\"token comment\">#   hostIP       &lt;string>  # 要将外部端口绑定到的主机IP(一般省略)</span>\n<span class=\"token comment\">#   protocol     &lt;string>  # 端口协议。必须是UDP、TCP或SCTP。默认为“TCP”。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-ports.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>ports\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 设置容器暴露的端口列表</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-ports.yaml\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pod pod-ports <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-6-资源配额\"><a href=\"#5-2-6-资源配额\" class=\"headerlink\" title=\"5.2.6 资源配额\"></a>5.2.6 资源配额</h3><ul>\n<li><strong>limits</strong>：用于限制运行时容器的最大占用资源，当容器占用资源超过limits时会被终止，并进行重启</li>\n<li><strong>requests</strong> ：用于设置容器需要的最小资源，如果环境资源不够，容器将无法启动</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-resources.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>resources\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 资源配额</span>\n      <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 限制资源（上限）</span>\n        <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span> <span class=\"token comment\"># CPU限制，单位是core数【整数||小数】</span>\n        <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10Gi\"</span> <span class=\"token comment\"># 内存限制【Gi、Mi、G、M】</span>\n      <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 请求资源（下限）</span>\n        <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span>  <span class=\"token comment\"># CPU限制，单位是core数【整数||小数】</span>\n        <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10Mi\"</span>  <span class=\"token comment\"># 内存限制【Gi、Mi、G、M】</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-3-Pod生命周期\"><a href=\"#5-3-Pod生命周期\" class=\"headerlink\" title=\"5.3 Pod生命周期\"></a>5.3 Pod生命周期</h2><p>我们一般将pod对象从创建至终的这段时间范围称为pod的生命周期，它主要包含下面的过程：</p>\n<ul>\n<li>pod创建过程</li>\n<li>运行初始化容器（init container）过程</li>\n<li>运行主容器（main container）<ul>\n<li>容器启动后钩子（post start）、容器终止前钩子（pre stop）</li>\n<li>容器的存活性探测（liveness probe）、就绪性探测（readiness probe）</li>\n</ul>\n</li>\n<li>pod终止过程</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image202004121114027061626782188724.png\" alt=\"image-20200412111402706\"></p>\n<p>在整个生命周期中，Pod会出现5种<strong>状态</strong>（<strong>相位</strong>），分别如下：</p>\n<ul>\n<li>挂起（Pending）：apiserver已经创建了pod资源对象，但它尚未被调度完成或者仍处于下载镜像的过程中</li>\n<li>运行中（Running）：pod已经被调度至某节点，并且所有容器都已经被kubelet创建完成</li>\n<li>成功（Succeeded）：pod中的所有容器都已经成功终止并且不会被重启</li>\n<li>失败（Failed）：所有容器都已经终止，但至少有一个容器终止失败，即容器返回了非0值的退出状态</li>\n<li>未知（Unknown）：apiserver无法正常获取到pod对象的状态信息，通常由网络通信失败所导致</li>\n</ul>\n<h3 id=\"5-3-1-创建和终止\"><a href=\"#5-3-1-创建和终止\" class=\"headerlink\" title=\"5.3.1 创建和终止\"></a>5.3.1 创建和终止</h3><p><strong>pod的创建过程</strong></p>\n<ol>\n<li><p>用户通过kubectl或其他api客户端提交需要创建的pod信息给apiServer</p>\n</li>\n<li><p>apiServer开始生成pod对象的信息，并将信息存入etcd，然后返回确认信息至客户端</p>\n</li>\n<li><p>apiServer开始反映etcd中的pod对象的变化，其它组件使用<strong>watch</strong>机制来跟踪检查apiServer上的变动</p>\n</li>\n<li><p>scheduler发现有新的pod对象要创建，开始为Pod分配主机并将结果信息更新至apiServer</p>\n</li>\n<li><p>node节点上的kubelet发现有pod调度过来，尝试调用docker启动容器，并将结果回送至apiServer</p>\n</li>\n<li><p>apiServer将接收到的pod状态信息存入etcd中</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image202004061846569171626782168787.png\" alt=\"image-20200406184656917\"></p>\n</li>\n</ol>\n<p><strong>pod的终止过程</strong></p>\n<ol>\n<li>用户向apiServer发送删除pod对象的命令</li>\n<li>apiServcer中的pod对象信息会随着时间的推移而更新，在宽限期内（默认30s），pod被视为dead</li>\n<li>将pod标记为terminating状态</li>\n<li>kubelet在监控到pod对象转为terminating状态的同时启动pod关闭过程</li>\n<li>端点控制器监控到pod对象的关闭行为时将其从所有匹配到此端点的service资源的端点列表中移除</li>\n<li>如果当前pod对象定义了preStop钩子处理器，则在其标记为terminating后即会以同步的方式启动执行</li>\n<li>pod对象中的容器进程收到停止信号</li>\n<li>宽限期结束后，若pod中还存在仍在运行的进程，那么pod对象会收到立即终止的信号</li>\n<li>kubelet请求apiServer将此pod资源的宽限期设置为0从而完成删除操作，此时pod对于用户已不可见</li>\n</ol>\n<h3 id=\"5-3-2-初始化容器\"><a href=\"#5-3-2-初始化容器\" class=\"headerlink\" title=\"5.3.2 初始化容器\"></a>5.3.2 初始化容器</h3><p>初始化容器是在pod的主容器启动之前要运行的容器，主要是做一些主容器的前置工作，它具有两大特征：</p>\n<ol>\n<li>初始化容器必须运行完成直至结束，若某初始化容器运行失败，那么kubernetes需要重启它直到成功完成</li>\n<li>初始化容器必须按照定义的顺序执行，当且仅当前一个成功之后，后面的一个才能运行</li>\n</ol>\n<p>初始化容器有很多的应用场景，下面列出的是最常见的几个：</p>\n<ul>\n<li>提供主容器镜像中不具备的工具程序或自定义代码</li>\n<li>初始化容器要先于应用容器串行启动并运行完成，因此可用于延后应用容器的启动直至其依赖的条件得到满足</li>\n</ul>\n<p>接下来做一个案例，模拟下面这个需求：</p>\n<p>假设要以主容器来运行nginx，但是要求在运行nginx之前先要能够连接上mysql和redis所在服务器</p>\n<p>为了简化测试，事先规定好mysql<code>(192.168.5.4)</code>和redis<code>(192.168.5.5)</code>服务器的地址</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-initcontainer.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>initcontainer\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> main<span class=\"token punctuation\">-</span>container\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span> \n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n  <span class=\"token key atrule\">initContainers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>mysql\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'until ping 192.168.5.14 -c 1 ; do echo waiting for mysql...; sleep 2; done;'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>redis\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'until ping 192.168.5.15 -c 1 ; do echo waiting for reids...; sleep 2; done;'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-initcontainer.yaml\n<span class=\"token comment\"># 查看pod状态</span>\n<span class=\"token comment\"># 发现pod卡在启动第一个初始化容器过程中，后面的容器不会运行</span>\nkubectl describe pod  pod-initcontainer <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 动态查看pod</span>\nkubectl get pods pod-initcontainer <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-w</span>\n<span class=\"token comment\"># 接下来新开一个shell，为当前服务器新增两个ip，观察pod的变化</span>\n<span class=\"token function\">ifconfig</span> ens33:1 <span class=\"token number\">192.168</span>.5.14 netmask <span class=\"token number\">255.255</span>.255.0 up\n<span class=\"token function\">ifconfig</span> ens33:2 <span class=\"token number\">192.168</span>.5.15 netmask <span class=\"token number\">255.255</span>.255.0 up<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-3-3-钩子函数\"><a href=\"#5-3-3-钩子函数\" class=\"headerlink\" title=\"5.3.3 钩子函数\"></a>5.3.3 钩子函数</h3><ul>\n<li>post start：容器创建之后执行，如果失败了会重启容器</li>\n<li>pre stop ：容器终止之前执行，执行完成之后容器将成功终止，在其完成之前会阻塞删除容器的操作</li>\n</ul>\n<p>钩子处理器支持使用下面三种方式定义动作：</p>\n<ul>\n<li><p><strong>Exec命令</strong>：在容器内执行一次命令</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">……\n  <span class=\"token key atrule\">lifecycle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span> \n      <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> cat\n        <span class=\"token punctuation\">-</span> /tmp/healthy\n……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>TCPSocket</strong>：在当前容器尝试访问指定的socket</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">……      \n  <span class=\"token key atrule\">lifecycle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">tcpSocket</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>HTTPGet</strong>：在当前容器中向某url发起http请求</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">……\n  <span class=\"token key atrule\">lifecycle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#URI地址</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span> <span class=\"token comment\">#端口号</span>\n        <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.5.3 <span class=\"token comment\">#主机地址</span>\n        <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP <span class=\"token comment\">#支持的协议，http或者https</span>\n……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-hook-exec.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>hook<span class=\"token punctuation\">-</span>exec\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> main<span class=\"token punctuation\">-</span>container\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">lifecycle</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span> \n        <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 在容器启动的时候执行一个命令，修改掉nginx的默认首页内容</span>\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"echo postStart... > /usr/share/nginx/html/index.html\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">preStop</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 在容器停止之前停止nginx服务</span>\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/sbin/nginx\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-s\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"quit\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-hook-exec.yaml\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pods  pod-hook-exec <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 访问pod</span>\n<span class=\"token function\">curl</span> <span class=\"token number\">10.244</span>.2.48<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-3-4-容器探测\"><a href=\"#5-3-4-容器探测\" class=\"headerlink\" title=\"5.3.4 容器探测\"></a>5.3.4 容器探测</h3><p>容器探测用于检测容器中的应用实例是否正常工作，是保障业务可用性的一种传统机制。如果经过探测，实例的状态不符合预期，那么kubernetes就会把该问题实例” 摘除 “，不承担业务流量。kubernetes提供了两种探针来实现容器探测，分别是：</p>\n<ul>\n<li><strong>liveness probes</strong>：存活性探针，用于检测应用实例当前是否处于正常运行状态，如果不是，k8s会重启容器</li>\n<li><strong>readiness probes</strong>：就绪性探针，用于检测应用实例当前是否可以接收请求，如果不能，k8s不会转发流量</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>livenessProbe 决定是否重启容器，readinessProbe 决定是否将请求转发给容器。</p></blockquote>\n<p>上面两种探针目前均支持三种探测方式：</p>\n<ul>\n<li><p>Exec命令：在容器内执行一次命令，如果命令执行的退出码为0，则认为程序正常，否则不正常</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">……\n  <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> cat\n      <span class=\"token punctuation\">-</span> /tmp/healthy\n……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>TCPSocket：将会尝试访问一个用户容器的端口，如果能够建立这条连接，则认为程序正常，否则不正常</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">……      \n  <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">tcpSocket</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>HTTPGet：调用容器内Web应用的URL，如果返回的状态码在200和399之间，则认为程序正常，否则不正常</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">……\n  <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#URI地址</span>\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span> <span class=\"token comment\">#端口号</span>\n      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 127.0.0.1 <span class=\"token comment\">#主机地址</span>\n      <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP <span class=\"token comment\">#支持的协议，http或者https</span>\n……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>方式一：Exec</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-liveness-exec.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>liveness<span class=\"token punctuation\">-</span>exec\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span> \n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/cat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/tmp/hello.txt\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 执行一个查看文件的命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-liveness-exec.yaml\n<span class=\"token comment\"># 查看Pod详情</span>\nkubectl describe pods pod-liveness-exec <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 观察上面的信息就会发现nginx容器启动之后就进行了健康检查</span>\n<span class=\"token comment\"># 检查失败之后，容器被kill掉，然后尝试进行重启（这是重启策略的作用，后面讲解）</span>\n<span class=\"token comment\"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span>\nkubectl get pods pod-liveness-exec <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 当然接下来，可以修改成一个存在的文件，比如/tmp/hello.txt，再试，结果就正常了......</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>方式二：TCPSocket</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-liveness-tcpsocket.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>liveness<span class=\"token punctuation\">-</span>tcpsocket\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span> \n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">tcpSocket</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span> <span class=\"token comment\"># 尝试访问8080端口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-liveness-tcpsocket.yaml\n<span class=\"token comment\"># 查看Pod详情</span>\nkubectl describe pods pod-liveness-tcpsocket <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 观察上面的信息，发现尝试访问8080端口,但是失败了</span>\n<span class=\"token comment\"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span>\nkubectl get pods pod-liveness-tcpsocket  <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 当然接下来，可以修改成一个可以访问的端口，比如80，再试，结果就正常了......</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>方式三：HTTPGet</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-liveness-httpget.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>liveness<span class=\"token punctuation\">-</span>httpget\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 其实就是访问http://127.0.0.1:80/hello  </span>\n        <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP <span class=\"token comment\">#支持的协议，http或者https</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span> <span class=\"token comment\">#端口号</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /hello <span class=\"token comment\">#URI地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-liveness-httpget.yaml\n<span class=\"token comment\"># 查看Pod详情</span>\nkubectl describe pod pod-liveness-httpget <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 观察上面信息，尝试访问路径，但是未找到,出现404错误</span>\n<span class=\"token comment\"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span>\nkubectl get pod pod-liveness-httpget <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 当然接下来，可以修改成一个可以访问的路径path，比如/，再试，结果就正常了......</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># livenessProbe子属性</span>\nkubectl explain pod.spec.containers.livenessProbe\nFIELDS:\n   <span class=\"token builtin class-name\">exec</span> <span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span>  \n   tcpSocket    <span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span>\n   httpGet      <span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span>\n   initialDelaySeconds  <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span>  <span class=\"token comment\"># 容器启动后等待多少秒执行第一次探测</span>\n   timeoutSeconds       <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span>  <span class=\"token comment\"># 探测超时时间。默认1秒，最小1秒</span>\n   periodSeconds        <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span>  <span class=\"token comment\"># 执行探测的频率。默认是10秒，最小1秒</span>\n   failureThreshold     <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span>  <span class=\"token comment\"># 连续探测失败多少次才被认定为失败。默认是3。最小值是1</span>\n   successThreshold     <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span>  <span class=\"token comment\"># 连续探测成功多少次才被认定为成功。默认是1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-3-5-重启策略\"><a href=\"#5-3-5-重启策略\" class=\"headerlink\" title=\"5.3.5 重启策略\"></a>5.3.5 重启策略</h3><ul>\n<li><strong>Always</strong> ：容器失效时，自动重启该容器，这也是默认值。</li>\n<li><strong>OnFailure</strong> ： 容器终止运行且退出码不为0时重启</li>\n<li><strong>Never</strong> ： 不论状态为何，都不重启该容器</li>\n</ul>\n<p>重启策略适用于pod对象中的所有容器，首次需要重启的容器，将在其需要时立即进行重启，随后再次需要重启的操作将由kubelet延迟一段时间后进行，且反复的重启操作的延迟时长以此为10s、20s、40s、80s、160s和300s，300s是最大延迟时长。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-restartpolicy.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>restartpolicy\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>port\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /hello\n  <span class=\"token key atrule\">restartPolicy</span><span class=\"token punctuation\">:</span> Never <span class=\"token comment\"># 设置重启策略为Never</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-restartpolicy.yaml\n<span class=\"token comment\"># 查看Pod详情，发现nginx容器失败</span>\nkubectl  describe pods pod-restartpolicy  <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 多等一会，再观察pod的重启次数，发现一直是0，并未重启   </span>\nkubectl  get pods pod-restartpolicy <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-4-Pod调度\"><a href=\"#5-4-Pod调度\" class=\"headerlink\" title=\"5.4 Pod调度\"></a>5.4 Pod调度</h2><p>在默认情况下，一个Pod在哪个Node节点上运行，是由Scheduler组件采用相应的算法计算出来的，这个过程是不受人工控制的。但是在实际使用中，这并不满足的需求，因为很多情况下，我们想控制某些Pod到达某些节点上，那么应该怎么做呢？这就要求了解kubernetes对Pod的调度规则，kubernetes提供了四大类调度方式：</p>\n<ul>\n<li>自动调度：运行在哪个节点上完全由Scheduler经过一系列的算法计算得出</li>\n<li>定向调度：NodeName、NodeSelector</li>\n<li>亲和性调度：NodeAffinity、PodAffinity、PodAntiAffinity</li>\n<li>污点（容忍）调度：Taints、Toleration</li>\n</ul>\n<h3 id=\"5-4-1-定向调度【强制策略】\"><a href=\"#5-4-1-定向调度【强制策略】\" class=\"headerlink\" title=\"5.4.1 定向调度【强制策略】\"></a>5.4.1 定向调度【强制策略】</h3><h4 id=\"NodeName\"><a href=\"#NodeName\" class=\"headerlink\" title=\"NodeName\"></a><strong>NodeName</strong></h4><p>这种方式，其实是直接跳过Scheduler的调度逻辑，直接将Pod调度到指定名称的节点。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-nodename.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>nodename\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n  <span class=\"token key atrule\">nodeName</span><span class=\"token punctuation\">:</span> node1 <span class=\"token comment\"># 指定调度到node1节点上</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NodeSelector\"><a href=\"#NodeSelector\" class=\"headerlink\" title=\"NodeSelector\"></a><strong>NodeSelector</strong></h4><p>NodeSelector用于将pod调度到添加了指定标签的node节点上。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl label nodes node1 <span class=\"token assign-left variable\">nodeenv</span><span class=\"token operator\">=</span>pro\nubectl label nodes node2 <span class=\"token assign-left variable\">nodeenv</span><span class=\"token operator\">=</span>test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-nodeselector.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>nodeselector\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n  <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">nodeenv</span><span class=\"token punctuation\">:</span> pro <span class=\"token comment\"># 指定调度到具有nodeenv=pro标签的节点上</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-4-2-亲和性调度\"><a href=\"#5-4-2-亲和性调度\" class=\"headerlink\" title=\"5.4.2 亲和性调度\"></a>5.4.2 亲和性调度</h3><p>上一节，介绍了两种定向调度的方式，使用起来非常方便，但是也有一定的问题，那就是如果没有满足条件的Node，那么Pod将不会被运行，即使在集群中还有可用Node列表也不行，这就限制了它的使用场景。</p>\n<p>基于上面的问题，kubernetes还提供了一种亲和性调度（Affinity）。它在NodeSelector的基础之上的进行了扩展，可以通过配置的形式，实现优先选择满足条件的Node进行调度，如果没有，也可以调度到不满足条件的节点上，使调度更加灵活。</p>\n<p>Affinity主要分为三类：</p>\n<ul>\n<li><strong>nodeAffinity(node亲和性）</strong>: 以node为目标，解决pod可以调度到哪些node的问题</li>\n<li><strong>podAffinity(pod亲和性)</strong> : 以pod为目标，解决pod可以和哪些已存在的pod部署在同一个拓扑域中的问题</li>\n<li><strong>podAntiAffinity(pod反亲和性)</strong> : 以pod为目标，解决pod不能和哪些已存在pod部署在同一个拓扑域中的问题</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于亲和性(反亲和性)使用场景的说明：</p>\n<p><strong>亲和性</strong>：如果两个应用频繁交互，那就有必要利用亲和性让两个应用的尽可能的靠近，这样可以减少因网络通信而带来的性能损耗。</p>\n<p><strong>反亲和性</strong>：当应用的采用多副本部署时，有必要采用反亲和性让各个应用实例打散分布在各个node上，这样可以提高服务的高可用性。</p></blockquote>\n<h4 id=\"NodeAffinity\"><a href=\"#NodeAffinity\" class=\"headerlink\" title=\"NodeAffinity\"></a><strong>NodeAffinity</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 首先来看一下`NodeAffinity`的可配置项：</span>\npod.spec.affinity.nodeAffinity\n  requiredDuringSchedulingIgnoredDuringExecution  <span class=\"token comment\">#Node节点必须满足指定的所有规则才可以，相当于硬限制</span>\n    nodeSelectorTerms  <span class=\"token comment\">#节点选择列表</span>\n      matchFields   <span class=\"token comment\">#按节点字段列出的节点选择器要求列表</span>\n      matchExpressions   <span class=\"token comment\">#按节点标签列出的节点选择器要求列表(推荐)</span>\n        key    <span class=\"token comment\">#键</span>\n        values <span class=\"token comment\">#值</span>\n        operator <span class=\"token comment\">#关系符 支持Exists, DoesNotExist, In, NotIn, Gt, Lt</span>\n  preferredDuringSchedulingIgnoredDuringExecution <span class=\"token comment\">#优先调度到满足指定的规则的Node，相当于软限制 (倾向)</span>\n    preference   <span class=\"token comment\">#一个节点选择器项，与相应的权重相关联</span>\n      matchFields   <span class=\"token comment\">#按节点字段列出的节点选择器要求列表</span>\n      matchExpressions   <span class=\"token comment\">#按节点标签列出的节点选择器要求列表(推荐)</span>\n        key    <span class=\"token comment\">#键</span>\n        values <span class=\"token comment\">#值</span>\n        operator <span class=\"token comment\">#关系符 支持In, NotIn, Exists, DoesNotExist, Gt, Lt</span>\n\tweight <span class=\"token comment\">#倾向权重，在范围1-100。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#关系符的使用说明:</span>\n- matchExpressions:\n  - key: nodeenv              <span class=\"token comment\"># 匹配存在标签的key为nodeenv的节点</span>\n    operator: Exists\n  - key: nodeenv              <span class=\"token comment\"># 匹配标签的key为nodeenv,且value是\"xxx\"或\"yyy\"的节点</span>\n    operator: In\n    values: <span class=\"token punctuation\">[</span><span class=\"token string\">\"xxx\"</span>,<span class=\"token string\">\"yyy\"</span><span class=\"token punctuation\">]</span>\n  - key: nodeenv              <span class=\"token comment\"># 匹配标签的key为nodeenv,且value大于\"xxx\"的节点</span>\n    operator: Gt\n    values: <span class=\"token string\">\"xxx\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># requiredDuringSchedulingIgnoredDuringExecution</span>\n<span class=\"token comment\"># pod-nodeaffinity-required.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>nodeaffinity<span class=\"token punctuation\">-</span>required\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n  <span class=\"token key atrule\">affinity</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#亲和性设置</span>\n    <span class=\"token key atrule\">nodeAffinity</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#设置node亲和性</span>\n      <span class=\"token key atrule\">requiredDuringSchedulingIgnoredDuringExecution</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 硬限制，需要满足以下的至少一个</span>\n        <span class=\"token key atrule\">nodeSelectorTerms</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 匹配env的值在[\"xxx\",\"yyy\"]中的标签</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> nodeenv\n            <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In\n            <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"yyy\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># requiredDuringSchedulingIgnoredDuringExecution</span>\n<span class=\"token comment\"># pod-nodeaffinity-preferred.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>nodeaffinity<span class=\"token punctuation\">-</span>preferred\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n  <span class=\"token key atrule\">affinity</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#亲和性设置</span>\n    <span class=\"token key atrule\">nodeAffinity</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#设置node亲和性</span>\n      <span class=\"token key atrule\">preferredDuringSchedulingIgnoredDuringExecution</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 软限制</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">weight</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token key atrule\">preference</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 匹配env的值在[\"xxx\",\"yyy\"]中的标签(当前环境没有)</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> nodeenv\n            <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In\n            <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"yyy\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>NodeAffinity规则设置的注意事项：</strong></p>\n<ol>\n<li>如果同时定义了nodeSelector和nodeAffinity，那么必须两个条件都得到满足，Pod才能运行在指定的Node上</li>\n<li>如果nodeAffinity指定了多个nodeSelectorTerms，那么只需要其中一个能够匹配成功即可</li>\n<li>如果一个nodeSelectorTerms中有多个matchExpressions ，则一个节点必须满足所有的才能匹配成功</li>\n<li>如果一个pod所在的Node在Pod运行期间其标签发生了改变，不再符合该Pod的节点亲和性需求，则<strong>系统将忽略此变化</strong></li>\n</ol>\n<h4 id=\"PodAffinity\"><a href=\"#PodAffinity\" class=\"headerlink\" title=\"PodAffinity\"></a><strong>PodAffinity</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 首先来看一下`PodAffinity`的可配置项：</span>\npod.spec.affinity.podAffinity\n  requiredDuringSchedulingIgnoredDuringExecution  硬限制\n    namespaces       <span class=\"token comment\"># 指定参照pod的namespace</span>\n    topologyKey      <span class=\"token comment\"># 指定调度作用域</span>\n    labelSelector    <span class=\"token comment\"># 标签选择器</span>\n      matchExpressions  <span class=\"token comment\"># 按节点标签列出的节点选择器要求列表(推荐)</span>\n        key    <span class=\"token comment\"># 键</span>\n        values <span class=\"token comment\"># 值</span>\n        operator <span class=\"token comment\"># 关系符 支持In, NotIn, Exists, DoesNotExist.</span>\n      matchLabels    <span class=\"token comment\"># 指多个matchExpressions映射的内容</span>\n  preferredDuringSchedulingIgnoredDuringExecution <span class=\"token comment\"># 软限制</span>\n    podAffinityTerm  <span class=\"token comment\"># 选项</span>\n      namespaces      \n      topologyKey\n      labelSelector\n        matchExpressions  \n          key    <span class=\"token comment\"># 键</span>\n          values <span class=\"token comment\"># 值</span>\n          operator\n        matchLabels \n    weight <span class=\"token comment\"># 倾向权重，在范围1-100</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">topologyKey 用于指定调度时作用域,例如:\n    如果指定为kubernetes.io&#x2F;hostname，那就是以Node节点为区分范围\n\t  如果指定为beta.kubernetes.io&#x2F;os,则以Node节点的操作系统类型来区分<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-podaffinity-required.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>podaffinity<span class=\"token punctuation\">-</span>required\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n  <span class=\"token key atrule\">affinity</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#亲和性设置</span>\n    <span class=\"token key atrule\">podAffinity</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#设置pod亲和性</span>\n      <span class=\"token key atrule\">requiredDuringSchedulingIgnoredDuringExecution</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 硬限制</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">labelSelector</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 匹配env的值在[\"xxx\",\"yyy\"]中的标签</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> podenv\n            <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In\n            <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"yyy\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">topologyKey</span><span class=\"token punctuation\">:</span> kubernetes.io/hostname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"PodAntiAffinity\"><a href=\"#PodAntiAffinity\" class=\"headerlink\" title=\"PodAntiAffinity\"></a><strong>PodAntiAffinity</strong></h4><p>PodAntiAffinity主要实现以运行的Pod为参照，新创建的Pod跟参照pod不在一个区域中的功能。与上面的<code>PodAffinity</code>是一种相反策略</p>\n<h3 id=\"5-4-3-污点和容忍\"><a href=\"#5-4-3-污点和容忍\" class=\"headerlink\" title=\"5.4.3 污点和容忍\"></a>5.4.3 污点和容忍</h3><p><strong>污点（Taints）</strong></p>\n<p>前面的调度方式都是站在Pod的角度上，通过在Pod上添加属性，来确定Pod是否要调度到指定的Node上，其实我们也可以站在Node的角度上，通过在Node上添加<strong>污点</strong>属性，来决定是否允许Pod调度过来。</p>\n<p><strong>Node被设置上污点之后就和Pod之间存在了一种相斥的关系，进而拒绝Pod调度进来，甚至可以将已经存在的Pod驱逐出去。</strong></p>\n<p>污点的格式为：<code>key=value:effect</code>, key和value是污点的标签，effect描述污点的作用，支持如下三个选项：</p>\n<ul>\n<li><strong>PreferNoSchedule</strong>：kubernetes将尽量避免把Pod调度到具有该污点的Node上，除非没有其他节点可调度</li>\n<li><strong>NoSchedule</strong>：kubernetes将不会把Pod调度到具有该污点的Node上，但不会影响当前Node上已存在的Pod</li>\n<li><strong>NoExecute</strong>：kubernetes将不会把Pod调度到具有该污点的Node上，同时也会将Node上已存在的Pod驱离</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200605021831545.png\" alt=\"image-20200605021606508\"></p>\n<h4 id=\"污点API\"><a href=\"#污点API\" class=\"headerlink\" title=\"污点API\"></a>污点API</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 设置污点</span>\nkubectl taint nodes k8s.node1 <span class=\"token assign-left variable\">key</span><span class=\"token operator\">=</span>value:policy\n<span class=\"token comment\"># 去除污点</span>\nkubectl taint nodes k8s.node2 key:policy-\n<span class=\"token comment\"># 去除所有污点</span>\nkubectl taint nodes k8s.node2 key-\n<span class=\"token comment\"># 查看污点</span>\nkubectl describe <span class=\"token function\">node</span> k8s.node1 <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> Taints<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">注意：使用kubeadm搭建的集群，默认就会给master节点添加一个污点标记,所以pod就不会调度到master节点上.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>容忍（Toleration）</strong></p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200514095913741.png\" alt=\"image-20200514095913741\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>污点就是拒绝，容忍就是忽略，Node通过污点拒绝pod调度上去，Pod通过容忍忽略拒绝</p></blockquote>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-toleration.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>toleration\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n  <span class=\"token key atrule\">tolerations</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 添加容忍</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tag\"</span>        <span class=\"token comment\"># 要容忍的污点的key  </span>\n    <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Equal\"</span> <span class=\"token comment\"># 操作符  EqualExists（默认）</span>\n    <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"heima\"</span>    <span class=\"token comment\"># 容忍的污点的value</span>\n    <span class=\"token key atrule\">effect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"NoExecute\"</span>   <span class=\"token comment\"># 添加容忍的规则，这里必须和标记的污点规则相同</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl explain pod.spec.tolerations\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\nFIELDS:\n   key       <span class=\"token comment\"># 对应着要容忍的污点的键，空意味着匹配所有的键</span>\n   value     <span class=\"token comment\"># 对应着要容忍的污点的值</span>\n   operator  <span class=\"token comment\"># key-value的运算符，支持Equal和Exists（默认）</span>\n   effect    <span class=\"token comment\"># 对应污点的effect，空意味着匹配所有影响</span>\n   tolerationSeconds   <span class=\"token comment\"># 容忍时间, 当effect为NoExecute时生效，表示pod在Node上的停留时间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"6-Pod控制器详解\"><a href=\"#6-Pod控制器详解\" class=\"headerlink\" title=\"6. Pod控制器详解\"></a>6. Pod控制器详解</h1><h2 id=\"6-1-Pod控制器介绍\"><a href=\"#6-1-Pod控制器介绍\" class=\"headerlink\" title=\"6.1 Pod控制器介绍\"></a>6.1 Pod控制器介绍</h2><p>Pod是kubernetes的最小管理单元，在kubernetes中，按照pod的创建方式可以将其分为两类：</p>\n<ul>\n<li>自主式pod：kubernetes直接创建出来的Pod，这种pod删除后就没有了，也不会重建</li>\n<li>控制器创建的pod：kubernetes通过控制器创建的pod，这种pod删除了之后还会自动重建</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong><code>什么是Pod控制器</code></strong></p>\n<p>Pod控制器是管理pod的中间层，使用Pod控制器之后，只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它会创建出满足条件的Pod并确保每一个Pod资源处于用户期望的目标状态。如果Pod资源在运行中出现故障，它会基于指定策略重新编排Pod。</p></blockquote>\n<p>在kubernetes中，有很多类型的pod控制器，每种都有自己的适合的场景，常见的有下面这些：</p>\n<ul>\n<li>ReplicationController：比较原始的pod控制器，已经被废弃，由ReplicaSet替代</li>\n<li>ReplicaSet：保证副本数量一直维持在期望值，并支持pod数量扩缩容，镜像版本升级</li>\n<li><strong>Deployment</strong>：通过控制ReplicaSet来控制Pod，并支持滚动升级、回退版本</li>\n<li>Horizontal Pod Autoscaler：可以根据集群负载自动水平调整Pod的数量，实现削峰填谷</li>\n<li>DaemonSet：在集群中的指定Node上运行且仅运行一个副本，一般用于守护进程类的任务</li>\n<li>Job：它创建出来的pod只要完成任务就立即退出，不需要重启或重建，用于执行一次性任务</li>\n<li>Cronjob：它创建的Pod负责周期性任务控制，不需要持续后台运行</li>\n<li>StatefulSet：管理有状态应用</li>\n</ul>\n<h2 id=\"6-2-ReplicaSet-RS\"><a href=\"#6-2-ReplicaSet-RS\" class=\"headerlink\" title=\"6.2 ReplicaSet(RS)\"></a>6.2 ReplicaSet(RS)</h2><p>ReplicaSet的主要作用是<strong>保证一定数量的pod正常运行</strong>，它会持续监听这些Pod的运行状态，一旦Pod发生故障，就会重启或重建。同时它还支持对pod数量的扩缩容和镜像版本的升降级。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200612005334159.png\" alt=\"img\"></p>\n<p>ReplicaSet的资源清单文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1 <span class=\"token comment\"># 版本号</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ReplicaSet <span class=\"token comment\"># 类型       </span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 元数据</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># rs名称 </span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 所属命名空间 </span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#标签</span>\n    <span class=\"token key atrule\">controller</span><span class=\"token punctuation\">:</span> rs\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 详情描述</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 副本数量</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 选择器，通过它指定该控制器管理哪些pod</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># Labels匹配规则</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Expressions匹配规则</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>nginx<span class=\"token punctuation\">-</span>pod<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这里面，需要新了解的配置项就是<code>spec</code>下面几个选项：</p>\n<ul>\n<li><p>replicas：指定副本数量，其实就是当前rs创建出来的pod的数量，默认为1</p>\n</li>\n<li><p>selector：选择器，它的作用是建立pod控制器和pod之间的关联关系，采用的Label Selector机制</p>\n<p>在pod模板上定义label，在控制器上定义选择器，就可以表明当前控制器能管理哪些pod了</p>\n</li>\n<li><p>template：模板，就是当前控制器创建pod所使用的模板板，里面其实就是前一章学过的pod的定义</p>\n</li>\n</ul>\n<h3 id=\"ReplicaSet-Demo\"><a href=\"#ReplicaSet-Demo\" class=\"headerlink\" title=\"ReplicaSet Demo\"></a><strong>ReplicaSet Demo</strong></h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-replicaset.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ReplicaSet   \n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pc<span class=\"token punctuation\">-</span>replicaset\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建rs</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pc-replicaset.yaml\n<span class=\"token comment\"># 查看rs</span>\n<span class=\"token comment\"># DESIRED:期望副本数量  </span>\n<span class=\"token comment\"># CURRENT:当前副本数量  </span>\n<span class=\"token comment\"># READY:已经准备好提供服务的副本数量</span>\nkubectl get rs pc-replicaset <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 查看当前控制器创建出来的pod</span>\n<span class=\"token comment\"># 这里发现控制器创建出来的pod的名称是在控制器名称后面拼接了-xxxxx随机码</span>\nkubectl get pod <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"扩缩容\"><a href=\"#扩缩容\" class=\"headerlink\" title=\"扩缩容\"></a><strong>扩缩容</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 编辑rs的副本数量，修改spec:replicas: 6即可</span>\nkubectl edit rs pc-replicaset <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 当然也可以直接使用命令实现</span>\n<span class=\"token comment\"># 使用scale命令实现扩缩容， 后面--replicas=n直接指定目标数量即可</span>\nkubectl scale rs pc-replicaset <span class=\"token parameter variable\">--replicas</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 命令运行完毕，立即查看，发现已经有4个开始准备退出了</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\">#稍等片刻，就只剩下2个了</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"镜像升级\"><a href=\"#镜像升级\" class=\"headerlink\" title=\"镜像升级\"></a><strong>镜像升级</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 编辑rs的容器镜像 - image: nginx:1.17.2</span>\nkubectl edit rs pc-replicaset <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 再次查看，发现镜像版本已经变更了</span>\nkubectl get rs <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 同样的道理，也可以使用命令完成这个工作</span>\n<span class=\"token comment\"># kubectl set image rs rs名称 容器=镜像版本 -n namespace</span>\nkubectl <span class=\"token builtin class-name\">set</span> image rs pc-replicaset <span class=\"token assign-left variable\">nginx</span><span class=\"token operator\">=</span>nginx:1.17.1  <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 再次查看，发现镜像版本已经变更了</span>\nkubectl get rs <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"删除ReplicaSet\"><a href=\"#删除ReplicaSet\" class=\"headerlink\" title=\"删除ReplicaSet\"></a><strong>删除ReplicaSet</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 使用kubectl delete命令会删除此RS以及它管理的Pod</span>\n<span class=\"token comment\"># 在kubernetes删除RS前，会将RS的replicasclear调整为0，等待所有的Pod被删除后，在执行RS对象的删除</span>\nkubectl delete rs pc-replicaset <span class=\"token parameter variable\">-n</span> dev\nkubectl get pod <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 如果希望仅仅删除RS对象（保留Pod），可以使用kubectl delete命令时添加--cascade=false选项（不推荐）。</span>\nkubectl delete rs pc-replicaset <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">--cascade</span><span class=\"token operator\">=</span>false\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 也可以使用yaml直接删除(推荐)</span>\nkubectl delete <span class=\"token parameter variable\">-f</span> pc-replicaset.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-3-Deployment-Deploy\"><a href=\"#6-3-Deployment-Deploy\" class=\"headerlink\" title=\"6.3 Deployment(Deploy)\"></a>6.3 Deployment(Deploy)</h2><p>为了更好的解决服务编排的问题，kubernetes在V1.2版本开始，引入了Deployment控制器。值得一提的是，这种控制器并不直接管理pod，而是通过管理ReplicaSet来简介管理Pod，即：Deployment管理ReplicaSet，ReplicaSet管理Pod。所以Deployment比ReplicaSet功能更加强大。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200612005524778.png\" alt=\"img\"></p>\n<p>Deployment主要功能有下面几个：</p>\n<ul>\n<li>支持ReplicaSet的所有功能</li>\n<li>支持发布的停止、继续</li>\n<li>支持滚动升级和回滚版本</li>\n</ul>\n<p>Deployment的资源清单文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1 <span class=\"token comment\"># 版本号</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment <span class=\"token comment\"># 类型       </span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 元数据</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># rs名称 </span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 所属命名空间 </span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#标签</span>\n    <span class=\"token key atrule\">controller</span><span class=\"token punctuation\">:</span> deploy\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 详情描述</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 副本数量</span>\n  <span class=\"token key atrule\">revisionHistoryLimit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 保留历史版本，版本回退时用的</span>\n  <span class=\"token key atrule\">paused</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 暂停部署，默认是false  deployment -> pod 部署 是否立即执行</span>\n  <span class=\"token key atrule\">progressDeadlineSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span> <span class=\"token comment\"># 部署超时时间（s），默认是600</span>\n  <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 策略</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> RollingUpdate <span class=\"token comment\"># 滚动更新策略</span>\n    <span class=\"token key atrule\">rollingUpdate</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 滚动更新</span>\n      <span class=\"token key atrule\">maxSurge</span><span class=\"token punctuation\">:</span> 30% <span class=\"token comment\"># 最大额外可以存在的副本数，可以为百分比，也可以为整数</span>\n      <span class=\"token key atrule\">maxUnavailable</span><span class=\"token punctuation\">:</span> 30% <span class=\"token comment\"># 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 选择器，通过它指定该控制器管理哪些pod</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># Labels匹配规则</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Expressions匹配规则</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>nginx<span class=\"token punctuation\">-</span>pod<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Deployment Demo</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-deployment.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment      \n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pc<span class=\"token punctuation\">-</span>deployment\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建deployment</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f pc-deployment.yaml --record=true</span>\ndeployment.apps/pc-deployment created\n\n<span class=\"token comment\"># 查看deployment</span>\n<span class=\"token comment\"># UP-TO-DATE 最新版本的pod的数量</span>\n<span class=\"token comment\"># AVAILABLE  当前可用的pod的数量</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get deploy pc-deployment -n dev</span>\nNAME            READY   UP-TO-DATE   AVAILABLE   AGE\npc-deployment   <span class=\"token number\">3</span>/3     <span class=\"token number\">3</span>            <span class=\"token number\">3</span>           15s\n\n<span class=\"token comment\"># 查看rs</span>\n<span class=\"token comment\"># 发现rs的名称是在原来deployment的名字后面添加了一个10位数的随机串</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get rs -n dev</span>\nNAME                       DESIRED   CURRENT   READY   AGE\npc-deployment-6696798b78   <span class=\"token number\">3</span>         <span class=\"token number\">3</span>         <span class=\"token number\">3</span>       23s\n\n<span class=\"token comment\"># 查看pod</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev</span>\nNAME                             READY   STATUS    RESTARTS   AGE\npc-deployment-6696798b78-d2c8n   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          107s\npc-deployment-6696798b78-smpvp   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          107s\npc-deployment-6696798b78-wvjd8   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          107s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"扩缩容-1\"><a href=\"#扩缩容-1\" class=\"headerlink\" title=\"扩缩容\"></a><strong>扩缩容</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 变更副本数量为5个</span>\nkubectl scale deploy pc-deployment <span class=\"token parameter variable\">--replicas</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>  <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看deployment</span>\nkubectl get deploy pc-deployment <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 编辑deployment的副本数量，修改spec:replicas: 4即可</span>\nkubectl edit deploy pc-deployment <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"镜像更新\"><a href=\"#镜像更新\" class=\"headerlink\" title=\"镜像更新\"></a><strong>镜像更新</strong></h3><p>deployment支持两种更新策略:<code>重建更新</code>和<code>滚动更新</code>,可以通过<code>strategy</code>指定策略类型,支持两个属性:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">strategy：指定新的Pod替换旧的Pod的策略， 支持两个属性：\n  type：指定策略类型，支持两种策略\n    Recreate：在创建出新的Pod之前会先杀掉所有已存在的Pod\n    RollingUpdate：滚动更新，就是杀死一部分，就启动一部分，在更新过程中，存在两个版本Pod\n  rollingUpdate：当type为RollingUpdate时生效，用于为RollingUpdate设置参数，支持两个属性：\n    maxUnavailable：用来指定在升级过程中不可用Pod的最大数量，默认为25%。\n    maxSurge： 用来指定在升级过程中可以超过期望的Pod的最大数量，默认为25%。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"重建更新\"><a href=\"#重建更新\" class=\"headerlink\" title=\"重建更新\"></a>重建更新</h4><ol>\n<li>编辑pc-deployment.yaml,在spec节点下添加更新策略</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 策略</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Recreate <span class=\"token comment\"># 重建更新</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>创建deploy进行验证</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 变更镜像</span>\nkubectl <span class=\"token builtin class-name\">set</span> image deployment pc-deployment <span class=\"token assign-left variable\">nginx</span><span class=\"token operator\">=</span>nginx:1.17.2 <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 观察升级过程</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#  kubectl get pods -n dev -w</span>\nNAME                             READY   STATUS    RESTARTS   AGE\npc-deployment-5d89bdfbf9-65qcw   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          31s\npc-deployment-5d89bdfbf9-w5nzv   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          31s\npc-deployment-5d89bdfbf9-xpt7w   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          31s\n\npc-deployment-5d89bdfbf9-xpt7w   <span class=\"token number\">1</span>/1     Terminating   <span class=\"token number\">0</span>          41s\npc-deployment-5d89bdfbf9-65qcw   <span class=\"token number\">1</span>/1     Terminating   <span class=\"token number\">0</span>          41s\npc-deployment-5d89bdfbf9-w5nzv   <span class=\"token number\">1</span>/1     Terminating   <span class=\"token number\">0</span>          41s\n\npc-deployment-675d469f8b-grn8z   <span class=\"token number\">0</span>/1     Pending       <span class=\"token number\">0</span>          0s\npc-deployment-675d469f8b-hbl4v   <span class=\"token number\">0</span>/1     Pending       <span class=\"token number\">0</span>          0s\npc-deployment-675d469f8b-67nz2   <span class=\"token number\">0</span>/1     Pending       <span class=\"token number\">0</span>          0s\n\npc-deployment-675d469f8b-grn8z   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-deployment-675d469f8b-hbl4v   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-deployment-675d469f8b-67nz2   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\n\npc-deployment-675d469f8b-grn8z   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          1s\npc-deployment-675d469f8b-67nz2   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          1s\npc-deployment-675d469f8b-hbl4v   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          2s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"滚动更新\"><a href=\"#滚动更新\" class=\"headerlink\" title=\"滚动更新\"></a>滚动更新</h4><ol>\n<li>编辑pc-deployment.yaml,在spec节点下添加更新策略</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-deployment.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment      \n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pc<span class=\"token punctuation\">-</span>deployment\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 策略</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> RollingUpdate <span class=\"token comment\"># 滚动更新策略</span>\n    <span class=\"token key atrule\">rollingUpdate</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">maxSurge</span><span class=\"token punctuation\">:</span> 25% \n      <span class=\"token key atrule\">maxUnavailable</span><span class=\"token punctuation\">:</span> 25%\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>创建deploy进行验证</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 变更镜像</span>\nkubectl <span class=\"token builtin class-name\">set</span> image deployment pc-deployment <span class=\"token assign-left variable\">nginx</span><span class=\"token operator\">=</span>nginx:1.17.3 <span class=\"token parameter variable\">-n</span> dev \n<span class=\"token comment\"># 观察升级过程</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev -w</span>\nNAME                           READY   STATUS    RESTARTS   AGE\npc-deployment-c848d767-8rbzt   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          31m\npc-deployment-c848d767-h4p68   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          31m\npc-deployment-c848d767-hlmz4   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          31m\npc-deployment-c848d767-rrqcn   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          31m\n\npc-deployment-966bf7f44-226rx   <span class=\"token number\">0</span>/1     Pending             <span class=\"token number\">0</span>          0s\npc-deployment-966bf7f44-226rx   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-deployment-966bf7f44-226rx   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          1s\npc-deployment-c848d767-h4p68    <span class=\"token number\">0</span>/1     Terminating         <span class=\"token number\">0</span>          34m\n\npc-deployment-966bf7f44-cnd44   <span class=\"token number\">0</span>/1     Pending             <span class=\"token number\">0</span>          0s\npc-deployment-966bf7f44-cnd44   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-deployment-966bf7f44-cnd44   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          2s\npc-deployment-c848d767-hlmz4    <span class=\"token number\">0</span>/1     Terminating         <span class=\"token number\">0</span>          34m\n\npc-deployment-966bf7f44-px48p   <span class=\"token number\">0</span>/1     Pending             <span class=\"token number\">0</span>          0s\npc-deployment-966bf7f44-px48p   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-deployment-966bf7f44-px48p   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          0s\npc-deployment-c848d767-8rbzt    <span class=\"token number\">0</span>/1     Terminating         <span class=\"token number\">0</span>          34m\n\npc-deployment-966bf7f44-dkmqp   <span class=\"token number\">0</span>/1     Pending             <span class=\"token number\">0</span>          0s\npc-deployment-966bf7f44-dkmqp   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-deployment-966bf7f44-dkmqp   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          2s\npc-deployment-c848d767-rrqcn    <span class=\"token number\">0</span>/1     Terminating         <span class=\"token number\">0</span>          34m\n\n<span class=\"token comment\"># 至此，新版本的pod创建完毕，就版本的pod销毁完毕</span>\n<span class=\"token comment\"># 中间过程是滚动进行的，也就是边销毁边创建</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>滚动更新的过程：</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200416140251491.png\" alt=\"img\"></p>\n<p>镜像更新中rs的变化</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看rs,发现原来的rs的依旧存在，只是pod数量变为了0，而后又新产生了一个rs，pod数量为4</span>\n<span class=\"token comment\"># 其实这就是deployment能够进行版本回退的奥妙所在，后面会详细解释</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get rs -n dev</span>\nNAME                       DESIRED   CURRENT   READY   AGE\npc-deployment-6696798b78   <span class=\"token number\">0</span>         <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       7m37s\npc-deployment-6696798b11   <span class=\"token number\">0</span>         <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       5m37s\npc-deployment-c848d76789   <span class=\"token number\">4</span>         <span class=\"token number\">4</span>         <span class=\"token number\">4</span>       72s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a><strong>版本回退</strong></h3><p>deployment支持版本升级过程中的暂停、继续功能以及版本回退等诸多功能。</p>\n<p><code>kubectl rollout</code>： 版本升级相关功能，支持下面的选项：</p>\n<ul>\n<li><code>status</code> 显示当前升级状态</li>\n<li><code>history</code> 显示 升级历史记录</li>\n<li><code>pause</code> 暂停版本升级过程</li>\n<li><code>resume</code> 继续已经暂停的版本升级过程</li>\n<li><code>restart</code> 重启版本升级过程</li>\n<li><code>undo</code> 回滚到上一级版本（可以使用<code>--to-revision</code>回滚到指定版本）</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看当前升级版本的状态</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl rollout status deploy pc-deployment -n dev</span>\ndeployment <span class=\"token string\">\"pc-deployment\"</span> successfully rolled out\n<span class=\"token comment\"># 查看升级历史记录</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl rollout history deploy pc-deployment -n dev</span>\ndeployment.apps/pc-deployment\nREVISION  CHANGE-CAUSE\n<span class=\"token number\">1</span>         kubectl create <span class=\"token parameter variable\">--filename</span><span class=\"token operator\">=</span>pc-deployment.yaml <span class=\"token parameter variable\">--record</span><span class=\"token operator\">=</span>true\n<span class=\"token number\">2</span>         kubectl create <span class=\"token parameter variable\">--filename</span><span class=\"token operator\">=</span>pc-deployment.yaml <span class=\"token parameter variable\">--record</span><span class=\"token operator\">=</span>true\n<span class=\"token number\">3</span>         kubectl create <span class=\"token parameter variable\">--filename</span><span class=\"token operator\">=</span>pc-deployment.yaml <span class=\"token parameter variable\">--record</span><span class=\"token operator\">=</span>true\n<span class=\"token comment\"># 可以发现有三次版本记录，说明完成过两次升级</span>\n\n<span class=\"token comment\"># 版本回滚</span>\n<span class=\"token comment\"># 这里直接使用--to-revision=1回滚到了1版本， 如果省略这个选项，就是回退到上个版本，就是2版本</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl rollout undo deployment pc-deployment --to-revision=1 -n dev</span>\ndeployment.apps/pc-deployment rolled back\n\n<span class=\"token comment\"># 查看发现，通过nginx镜像版本可以发现到了第一版</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get deploy -n dev -o wide</span>\nNAME            READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         \npc-deployment   <span class=\"token number\">4</span>/4     <span class=\"token number\">4</span>            <span class=\"token number\">4</span>           74m   nginx        nginx:1.17.1   \n\n<span class=\"token comment\"># 查看rs，发现第一个rs中有4个pod运行，后面两个版本的rs中pod为运行</span>\n<span class=\"token comment\"># 其实deployment之所以可是实现版本的回滚，就是通过记录下历史rs来实现的，</span>\n<span class=\"token comment\"># 一旦想回滚到哪个版本，只需要将当前版本pod数量降为0，然后将回滚版本的pod提升为目标数量就可以了</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get rs -n dev</span>\nNAME                       DESIRED   CURRENT   READY   AGE\npc-deployment-6696798b78   <span class=\"token number\">4</span>         <span class=\"token number\">4</span>         <span class=\"token number\">4</span>       78m\npc-deployment-966bf7f44    <span class=\"token number\">0</span>         <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       37m\npc-deployment-c848d767     <span class=\"token number\">0</span>         <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       71m<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>金丝雀发布</strong></p>\n<p>Deployment控制器支持控制更新过程中的控制，如“暂停(pause)”或“继续(resume)”更新操作。</p>\n<p>比如有一批新的Pod资源创建完成后立即暂停更新过程，此时，仅存在一部分新版本的应用，主体部分还是旧的版本。然后，再筛选一小部分的用户请求路由到新版本的Pod应用，继续观察能否稳定地按期望的方式运行。确定没问题之后再继续完成余下的Pod资源滚动更新，否则立即回滚更新操作。这就是所谓的金丝雀发布。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 更新deployment的版本，并配置暂停deployment</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#  sudo kubectl set image deploy pc-deployment nginx=nginx:1.17.4 -n dev &amp;&amp;  sudo kubectl rollout pause deployment pc-deployment  -n dev</span>\ndeployment.apps/pc-deployment image updated\ndeployment.apps/pc-deployment paused\n\n<span class=\"token comment\">#观察更新状态</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sudo kubectl rollout status deploy pc-deployment -n dev</span>\nWaiting <span class=\"token keyword\">for</span> deployment <span class=\"token string\">\"pc-deployment\"</span> rollout to finish: <span class=\"token number\">2</span> out of <span class=\"token number\">4</span> new replicas have been updated<span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># 监控更新的过程，可以看到已经新增了一个资源，但是并未按照预期的状态去删除一个旧的资源，就是因为使用了pause暂停命令</span>\n\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get rs -n dev -o wide</span>\nNAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES         \npc-deployment-5d89bdfbf9   <span class=\"token number\">3</span>         <span class=\"token number\">3</span>         <span class=\"token number\">3</span>       19m     nginx        nginx:1.17.1   \npc-deployment-675d469f8b   <span class=\"token number\">0</span>         <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       14m     nginx        nginx:1.17.2   \npc-deployment-6c9f56fcfb   <span class=\"token number\">2</span>         <span class=\"token number\">2</span>         <span class=\"token number\">2</span>       3m16s   nginx        nginx:1.17.4   \n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev</span>\nNAME                             READY   STATUS    RESTARTS   AGE\npc-deployment-5d89bdfbf9-rj8sq   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          7m33s\npc-deployment-5d89bdfbf9-ttwgg   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          7m35s\npc-deployment-5d89bdfbf9-v4wvc   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          7m34s\npc-deployment-6c9f56fcfb-996rt   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          3m31s\npc-deployment-6c9f56fcfb-j2gtj   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          3m31s\n\n<span class=\"token comment\"># 确保更新的pod没问题了，继续更新</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl rollout resume deploy pc-deployment -n dev</span>\ndeployment.apps/pc-deployment resumed\n\n<span class=\"token comment\"># 查看最后的更新情况</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get rs -n dev -o wide</span>\nNAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES         \npc-deployment-5d89bdfbf9   <span class=\"token number\">0</span>         <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       21m     nginx        nginx:1.17.1   \npc-deployment-675d469f8b   <span class=\"token number\">0</span>         <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       16m     nginx        nginx:1.17.2   \npc-deployment-6c9f56fcfb   <span class=\"token number\">4</span>         <span class=\"token number\">4</span>         <span class=\"token number\">4</span>       5m11s   nginx        nginx:1.17.4   \n\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev</span>\nNAME                             READY   STATUS    RESTARTS   AGE\npc-deployment-6c9f56fcfb-7bfwh   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          37s\npc-deployment-6c9f56fcfb-996rt   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          5m27s\npc-deployment-6c9f56fcfb-j2gtj   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          5m27s\npc-deployment-6c9f56fcfb-rf84v   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          37s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>删除Deployment</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 删除deployment，其下的rs和pod也将被删除</span>\nkubectl delete <span class=\"token parameter variable\">-f</span> pc-deployment.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"6-4-Horizontal-Pod-Autoscaler-HPA\"><a href=\"#6-4-Horizontal-Pod-Autoscaler-HPA\" class=\"headerlink\" title=\"6.4 Horizontal Pod Autoscaler(HPA)\"></a>6.4 Horizontal Pod Autoscaler(HPA)</h2><p>在前面的课程中，我们已经可以实现通过手工执行<code>kubectl scale</code>命令实现Pod扩容或缩容，但是这显然不符合Kubernetes的定位目标–自动化、智能化。 Kubernetes期望可以实现通过监测Pod的使用情况，实现pod数量的自动调整，于是就产生了Horizontal Pod Autoscaler（HPA）这种控制器。</p>\n<p>HPA可以获取每个Pod利用率，然后和HPA中定义的指标进行对比，同时计算出需要伸缩的具体值，最后实现Pod的数量的调整。其实HPA与之前的Deployment一样，也属于一种Kubernetes资源对象，它通过追踪分析RC控制的所有目标Pod的负载变化情况，来确定是否需要针对性地调整目标Pod的副本数，这是HPA的实现原理。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200608155858271.png\" alt=\"img\"></p>\n<p>接下来，我们来做一个实验</p>\n<p><strong>1 安装metrics-server</strong></p>\n<p>metrics-server可以用来收集集群中的资源使用情况</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装git</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum install git -y</span>\n<span class=\"token comment\"># 获取metrics-server, 注意使用的版本</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># git clone -b v0.3.6 https://github.com/kubernetes-incubator/metrics-server</span>\n<span class=\"token comment\"># 修改deployment, 注意修改的是镜像和初始化参数</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /root/metrics-server/deploy/1.8+/</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim metrics-server-deployment.yaml</span>\n按图中添加下面选项\nhostNetwork: <span class=\"token boolean\">true</span>\nimage: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6\nargs:\n- --kubelet-insecure-tls\n- --kubelet-preferred-address-types<span class=\"token operator\">=</span>InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200608163326496.png\" alt=\"image-20200608163326496\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装metrics-server</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl apply -f ./</span>\n\n<span class=\"token comment\"># 查看pod运行情况</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pod -n kube-system</span>\nmetrics-server-6b976979db-2xwbj   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          90s\n\n<span class=\"token comment\"># 使用kubectl top node 查看资源使用情况</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl top node</span>\nNAME           CPU<span class=\"token punctuation\">(</span>cores<span class=\"token punctuation\">)</span>   CPU%   MEMORY<span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span>   MEMORY%\nk8s-master01   289m         <span class=\"token number\">14</span>%    1582Mi          <span class=\"token number\">54</span>%       \nk8s-node01     81m          <span class=\"token number\">4</span>%     1195Mi          <span class=\"token number\">40</span>%       \nk8s-node02     72m          <span class=\"token number\">3</span>%     1211Mi          <span class=\"token number\">41</span>%  \n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl top pod -n kube-system</span>\nNAME                              CPU<span class=\"token punctuation\">(</span>cores<span class=\"token punctuation\">)</span>   MEMORY<span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span>\ncoredns-6955765f44-7ptsb          3m           9Mi\ncoredns-6955765f44-vcwr5          3m           8Mi\netcd-master                       14m          145Mi\n<span class=\"token punctuation\">..</span>.\n<span class=\"token comment\"># 至此,metrics-server安装完成</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2 准备deployment和servie</strong></p>\n<p>创建pc-hpa-pod.yaml文件，内容如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 策略</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> RollingUpdate <span class=\"token comment\"># 滚动更新策略</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n        <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 资源配额</span>\n          <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 限制资源（上限）</span>\n            <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token comment\"># CPU限制，单位是core数</span>\n          <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 请求资源（下限）</span>\n            <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"100m\"</span>  <span class=\"token comment\"># CPU限制，单位是core数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建service</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl expose deployment nginx --type=NodePort --port=80 -n dev</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get deployment,pod,svc -n dev</span>\nNAME                    READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/nginx   <span class=\"token number\">1</span>/1     <span class=\"token number\">1</span>            <span class=\"token number\">1</span>           47s\n\nNAME                         READY   STATUS    RESTARTS   AGE\npod/nginx-7df9756ccc-bh8dr   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          47s\n\nNAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>        AGE\nservice/nginx   NodePort   <span class=\"token number\">10.101</span>.18.29   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">80</span>:31830/TCP   35s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3 部署HPA</strong></p>\n<p>创建pc-hpa.yaml文件，内容如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> autoscaling/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> HorizontalPodAutoscaler\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pc<span class=\"token punctuation\">-</span>hpa\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">minReplicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>  <span class=\"token comment\">#最小pod数量</span>\n  <span class=\"token key atrule\">maxReplicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\">#最大pod数量</span>\n  <span class=\"token key atrule\">targetCPUUtilizationPercentage</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># CPU使用率指标</span>\n  <span class=\"token key atrule\">scaleTargetRef</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 指定要控制的nginx信息</span>\n    <span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n    <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建hpa</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f pc-hpa.yaml</span>\nhorizontalpodautoscaler.autoscaling/pc-hpa created\n\n<span class=\"token comment\"># 查看hpa</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 <span class=\"token number\">1.8</span>+<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get hpa -n dev</span>\nNAME     REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\npc-hpa   Deployment/nginx   <span class=\"token number\">0</span>%/3%     <span class=\"token number\">1</span>         <span class=\"token number\">10</span>        <span class=\"token number\">1</span>          62s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4 测试</strong></p>\n<p>使用压测工具对service地址<code>192.168.5.4:31830</code>进行压测，然后通过控制台查看hpa和pod的变化</p>\n<p>hpa变化</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get hpa -n dev -w</span>\nNAME   REFERENCE      TARGETS  MINPODS  MAXPODS  REPLICAS  AGE\npc-hpa  Deployment/nginx  <span class=\"token number\">0</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">1</span>      4m11s\npc-hpa  Deployment/nginx  <span class=\"token number\">0</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">1</span>      5m19s\npc-hpa  Deployment/nginx  <span class=\"token number\">22</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">1</span>      6m50s\npc-hpa  Deployment/nginx  <span class=\"token number\">22</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">4</span>      7m5s\npc-hpa  Deployment/nginx  <span class=\"token number\">22</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">8</span>      7m21s\npc-hpa  Deployment/nginx  <span class=\"token number\">6</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">8</span>      7m51s\npc-hpa  Deployment/nginx  <span class=\"token number\">0</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">8</span>      9m6s\npc-hpa  Deployment/nginx  <span class=\"token number\">0</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">8</span>      13m\npc-hpa  Deployment/nginx  <span class=\"token number\">0</span>%/3%   <span class=\"token number\">1</span>     <span class=\"token number\">10</span>     <span class=\"token number\">1</span>      14m<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>deployment变化</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get deployment -n dev -w</span>\nNAME    READY   UP-TO-DATE   AVAILABLE   AGE\nnginx   <span class=\"token number\">1</span>/1     <span class=\"token number\">1</span>            <span class=\"token number\">1</span>           11m\nnginx   <span class=\"token number\">1</span>/4     <span class=\"token number\">1</span>            <span class=\"token number\">1</span>           13m\nnginx   <span class=\"token number\">1</span>/4     <span class=\"token number\">1</span>            <span class=\"token number\">1</span>           13m\nnginx   <span class=\"token number\">1</span>/4     <span class=\"token number\">1</span>            <span class=\"token number\">1</span>           13m\nnginx   <span class=\"token number\">1</span>/4     <span class=\"token number\">4</span>            <span class=\"token number\">1</span>           13m\nnginx   <span class=\"token number\">1</span>/8     <span class=\"token number\">4</span>            <span class=\"token number\">1</span>           14m\nnginx   <span class=\"token number\">1</span>/8     <span class=\"token number\">4</span>            <span class=\"token number\">1</span>           14m\nnginx   <span class=\"token number\">1</span>/8     <span class=\"token number\">4</span>            <span class=\"token number\">1</span>           14m\nnginx   <span class=\"token number\">1</span>/8     <span class=\"token number\">8</span>            <span class=\"token number\">1</span>           14m\nnginx   <span class=\"token number\">2</span>/8     <span class=\"token number\">8</span>            <span class=\"token number\">2</span>           14m\nnginx   <span class=\"token number\">3</span>/8     <span class=\"token number\">8</span>            <span class=\"token number\">3</span>           14m\nnginx   <span class=\"token number\">4</span>/8     <span class=\"token number\">8</span>            <span class=\"token number\">4</span>           14m\nnginx   <span class=\"token number\">5</span>/8     <span class=\"token number\">8</span>            <span class=\"token number\">5</span>           14m\nnginx   <span class=\"token number\">6</span>/8     <span class=\"token number\">8</span>            <span class=\"token number\">6</span>           14m\nnginx   <span class=\"token number\">7</span>/8     <span class=\"token number\">8</span>            <span class=\"token number\">7</span>           14m\nnginx   <span class=\"token number\">8</span>/8     <span class=\"token number\">8</span>            <span class=\"token number\">8</span>           15m\nnginx   <span class=\"token number\">8</span>/1     <span class=\"token number\">8</span>            <span class=\"token number\">8</span>           20m\nnginx   <span class=\"token number\">8</span>/1     <span class=\"token number\">8</span>            <span class=\"token number\">8</span>           20m\nnginx   <span class=\"token number\">1</span>/1     <span class=\"token number\">1</span>            <span class=\"token number\">1</span>           20m<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>pod变化</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@k8s-master01 ~]# kubectl get pods -n dev -w\nNAME                     READY   STATUS    RESTARTS   AGE\nnginx-7df9756ccc-bh8dr   1&#x2F;1     Running   0          11m\nnginx-7df9756ccc-cpgrv   0&#x2F;1     Pending   0          0s\nnginx-7df9756ccc-8zhwk   0&#x2F;1     Pending   0          0s\nnginx-7df9756ccc-rr9bn   0&#x2F;1     Pending   0          0s\nnginx-7df9756ccc-cpgrv   0&#x2F;1     ContainerCreating   0          0s\nnginx-7df9756ccc-8zhwk   0&#x2F;1     ContainerCreating   0          0s\nnginx-7df9756ccc-rr9bn   0&#x2F;1     ContainerCreating   0          0s\nnginx-7df9756ccc-m9gsj   0&#x2F;1     Pending             0          0s\nnginx-7df9756ccc-g56qb   0&#x2F;1     Pending             0          0s\nnginx-7df9756ccc-sl9c6   0&#x2F;1     Pending             0          0s\nnginx-7df9756ccc-fgst7   0&#x2F;1     Pending             0          0s\nnginx-7df9756ccc-g56qb   0&#x2F;1     ContainerCreating   0          0s\nnginx-7df9756ccc-m9gsj   0&#x2F;1     ContainerCreating   0          0s\nnginx-7df9756ccc-sl9c6   0&#x2F;1     ContainerCreating   0          0s\nnginx-7df9756ccc-fgst7   0&#x2F;1     ContainerCreating   0          0s\nnginx-7df9756ccc-8zhwk   1&#x2F;1     Running             0          19s\nnginx-7df9756ccc-rr9bn   1&#x2F;1     Running             0          30s\nnginx-7df9756ccc-m9gsj   1&#x2F;1     Running             0          21s\nnginx-7df9756ccc-cpgrv   1&#x2F;1     Running             0          47s\nnginx-7df9756ccc-sl9c6   1&#x2F;1     Running             0          33s\nnginx-7df9756ccc-g56qb   1&#x2F;1     Running             0          48s\nnginx-7df9756ccc-fgst7   1&#x2F;1     Running             0          66s\nnginx-7df9756ccc-fgst7   1&#x2F;1     Terminating         0          6m50s\nnginx-7df9756ccc-8zhwk   1&#x2F;1     Terminating         0          7m5s\nnginx-7df9756ccc-cpgrv   1&#x2F;1     Terminating         0          7m5s\nnginx-7df9756ccc-g56qb   1&#x2F;1     Terminating         0          6m50s\nnginx-7df9756ccc-rr9bn   1&#x2F;1     Terminating         0          7m5s\nnginx-7df9756ccc-m9gsj   1&#x2F;1     Terminating         0          6m50s\nnginx-7df9756ccc-sl9c6   1&#x2F;1     Terminating         0          6m50s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"6-5-DaemonSet-DS\"><a href=\"#6-5-DaemonSet-DS\" class=\"headerlink\" title=\"6.5 DaemonSet(DS)\"></a>6.5 DaemonSet(DS)</h2><p>DaemonSet类型的控制器可以保证在集群中的每一台（或指定）节点上都运行一个副本。一般适用于日志收集、节点监控等场景。也就是说，如果一个Pod提供的功能是节点级别的（每个节点都需要且只需要一个），那么这类Pod就适合使用DaemonSet类型的控制器创建。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200612010223537.png\" alt=\"img\"></p>\n<p>DaemonSet控制器的特点：</p>\n<ul>\n<li>每当向集群中添加一个节点时，指定的 Pod 副本也将添加到该节点上</li>\n<li>当节点从集群中移除时，Pod 也就被垃圾回收了</li>\n</ul>\n<p>下面先来看下DaemonSet的资源清单文件</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1 <span class=\"token comment\"># 版本号</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> DaemonSet <span class=\"token comment\"># 类型       </span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 元数据</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># rs名称 </span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 所属命名空间 </span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#标签</span>\n    <span class=\"token key atrule\">controller</span><span class=\"token punctuation\">:</span> daemonset\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 详情描述</span>\n  <span class=\"token key atrule\">revisionHistoryLimit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 保留历史版本</span>\n  <span class=\"token key atrule\">updateStrategy</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 更新策略</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> RollingUpdate <span class=\"token comment\"># 滚动更新策略</span>\n    <span class=\"token key atrule\">rollingUpdate</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 滚动更新</span>\n      <span class=\"token key atrule\">maxUnavailable</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 选择器，通过它指定该控制器管理哪些pod</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># Labels匹配规则</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Expressions匹配规则</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>nginx<span class=\"token punctuation\">-</span>pod<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建pc-daemonset.yaml，内容如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> DaemonSet      \n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pc<span class=\"token punctuation\">-</span>daemonset\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建daemonset</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f  pc-daemonset.yaml</span>\ndaemonset.apps/pc-daemonset created\n\n<span class=\"token comment\"># 查看daemonset</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#  kubectl get ds -n dev -o wide</span>\nNAME        DESIRED  CURRENT  READY  UP-TO-DATE  AVAILABLE   AGE   CONTAINERS   IMAGES         \npc-daemonset   <span class=\"token number\">2</span>        <span class=\"token number\">2</span>        <span class=\"token number\">2</span>      <span class=\"token number\">2</span>           <span class=\"token number\">2</span>        24s   nginx        nginx:1.17.1   \n\n<span class=\"token comment\"># 查看pod,发现在每个Node上都运行一个pod</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#  kubectl get pods -n dev -o wide</span>\nNAME                 READY   STATUS    RESTARTS   AGE   IP            NODE    \npc-daemonset-9bck8   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          37s   <span class=\"token number\">10.244</span>.1.43   node1     \npc-daemonset-k224w   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          37s   <span class=\"token number\">10.244</span>.2.74   node2      \n\n<span class=\"token comment\"># 删除daemonset</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl delete -f pc-daemonset.yaml</span>\ndaemonset.apps <span class=\"token string\">\"pc-daemonset\"</span> deleted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-6-Job\"><a href=\"#6-6-Job\" class=\"headerlink\" title=\"6.6 Job\"></a>6.6 Job</h2><p>Job，主要用于负责**批量处理(一次要处理指定数量任务)<strong>短暂的</strong>一次性(每个任务仅运行一次就结束)**任务。Job特点如下：</p>\n<ul>\n<li>当Job创建的pod执行成功结束时，Job将记录成功结束的pod数量</li>\n<li>当成功结束的pod达到指定的数量时，Job将完成执行</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200618213054113.png\" alt=\"img\"></p>\n<p>Job的资源清单文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-job.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> batch/v1 <span class=\"token comment\"># 版本号</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Job <span class=\"token comment\"># 类型       </span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 元数据</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># rs名称 </span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 所属命名空间 </span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#标签</span>\n    <span class=\"token key atrule\">controller</span><span class=\"token punctuation\">:</span> job\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 详情描述</span>\n  <span class=\"token key atrule\">completions</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 指定job需要成功运行Pods的次数。默认值: 1</span>\n  <span class=\"token key atrule\">parallelism</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 指定job在任一时刻应该并发运行Pods的数量。默认值: 1</span>\n  <span class=\"token key atrule\">activeDeadlineSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span> <span class=\"token comment\"># 指定job可运行的时间期限，超过时间还未结束，系统将会尝试进行终止。</span>\n  <span class=\"token key atrule\">backoffLimit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span> <span class=\"token comment\"># 指定job失败后进行重试的次数。默认是6</span>\n  <span class=\"token key atrule\">manualSelector</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否可以使用selector选择器选择pod，默认是false</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 选择器，通过它指定该控制器管理哪些pod</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># Labels匹配规则</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> counter<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Expressions匹配规则</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">-</span>pod<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> counter<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">restartPolicy</span><span class=\"token punctuation\">:</span> Never <span class=\"token comment\"># 重启策略只能设置为Never或者OnFailure</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> counter\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 2;done\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">关于重启策略设置的说明：\n    如果指定为OnFailure，则job会在pod出现故障时重启容器，而不是创建pod，failed次数不变\n    如果指定为Never，则job会在pod出现故障时创建新的pod，并且故障pod不会消失，也不会重启，failed次数加1\n    如果指定为Always的话，就意味着一直重启，意味着job任务会重复去执行了，当然不对，所以不能设置为Always<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建pc-job.yaml，内容如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> batch/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Job      \n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pc<span class=\"token punctuation\">-</span>job\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">manualSelector</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> counter<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> counter<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">restartPolicy</span><span class=\"token punctuation\">:</span> Never\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> counter\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建job</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f pc-job.yaml</span>\njob.batch/pc-job created\n\n<span class=\"token comment\"># 查看job</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get job -n dev -o wide  -w</span>\nNAME     COMPLETIONS   DURATION   AGE   CONTAINERS   IMAGES         SELECTOR\npc-job   <span class=\"token number\">0</span>/1           21s        21s   counter      busybox:1.30   <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>counter-pod\npc-job   <span class=\"token number\">1</span>/1           31s        79s   counter      busybox:1.30   <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>counter-pod\n\n<span class=\"token comment\"># 通过观察pod状态可以看到，pod在运行完毕任务后，就会变成Completed状态</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev -w</span>\nNAME           READY   STATUS     RESTARTS      AGE\npc-job-rxg96   <span class=\"token number\">1</span>/1     Running     <span class=\"token number\">0</span>            29s\npc-job-rxg96   <span class=\"token number\">0</span>/1     Completed   <span class=\"token number\">0</span>            33s\n\n<span class=\"token comment\"># 接下来，调整下pod运行的总数量和并行数量 即：在spec下设置下面两个选项</span>\n<span class=\"token comment\">#  completions: 6 # 指定job需要成功运行Pods的次数为6</span>\n<span class=\"token comment\">#  parallelism: 3 # 指定job并发运行Pods的数量为3</span>\n<span class=\"token comment\">#  然后重新运行job，观察效果，此时会发现，job会每次运行3个pod，总共执行了6个pod</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev -w</span>\nNAME           READY   STATUS    RESTARTS   AGE\npc-job-684ft   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          5s\npc-job-jhj49   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          5s\npc-job-pfcvh   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          5s\npc-job-684ft   <span class=\"token number\">0</span>/1     Completed   <span class=\"token number\">0</span>          11s\npc-job-v7rhr   <span class=\"token number\">0</span>/1     Pending     <span class=\"token number\">0</span>          0s\npc-job-v7rhr   <span class=\"token number\">0</span>/1     Pending     <span class=\"token number\">0</span>          0s\npc-job-v7rhr   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-job-jhj49   <span class=\"token number\">0</span>/1     Completed           <span class=\"token number\">0</span>          11s\npc-job-fhwf7   <span class=\"token number\">0</span>/1     Pending             <span class=\"token number\">0</span>          0s\npc-job-fhwf7   <span class=\"token number\">0</span>/1     Pending             <span class=\"token number\">0</span>          0s\npc-job-pfcvh   <span class=\"token number\">0</span>/1     Completed           <span class=\"token number\">0</span>          11s\npc-job-5vg2j   <span class=\"token number\">0</span>/1     Pending             <span class=\"token number\">0</span>          0s\npc-job-fhwf7   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-job-5vg2j   <span class=\"token number\">0</span>/1     Pending             <span class=\"token number\">0</span>          0s\npc-job-5vg2j   <span class=\"token number\">0</span>/1     ContainerCreating   <span class=\"token number\">0</span>          0s\npc-job-fhwf7   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          2s\npc-job-v7rhr   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          2s\npc-job-5vg2j   <span class=\"token number\">1</span>/1     Running             <span class=\"token number\">0</span>          3s\npc-job-fhwf7   <span class=\"token number\">0</span>/1     Completed           <span class=\"token number\">0</span>          12s\npc-job-v7rhr   <span class=\"token number\">0</span>/1     Completed           <span class=\"token number\">0</span>          12s\npc-job-5vg2j   <span class=\"token number\">0</span>/1     Completed           <span class=\"token number\">0</span>          12s\n\n<span class=\"token comment\"># 删除job</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl delete -f pc-job.yaml</span>\njob.batch <span class=\"token string\">\"pc-job\"</span> deleted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-7-CronJob-CJ\"><a href=\"#6-7-CronJob-CJ\" class=\"headerlink\" title=\"6.7 CronJob(CJ)\"></a>6.7 CronJob(CJ)</h2><p>CronJob控制器以Job控制器资源为其管控对象，并借助它管理pod资源对象，Job控制器定义的作业任务在其控制器资源创建之后便会立即执行，但CronJob可以以类似于Linux操作系统的周期性任务作业计划的方式控制其运行<strong>时间点</strong>及<strong>重复运行</strong>的方式。也就是说，<strong>CronJob可以在特定的时间点(反复的)去运行job任务</strong>。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200618213149531.png\" alt=\"img\"></p>\n<p>CronJob的资源清单文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> batch/v1beta1 <span class=\"token comment\"># 版本号</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> CronJob <span class=\"token comment\"># 类型       </span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 元数据</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># rs名称 </span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 所属命名空间 </span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#标签</span>\n    <span class=\"token key atrule\">controller</span><span class=\"token punctuation\">:</span> cronjob\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 详情描述</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># cron格式的作业调度运行时间点,用于控制任务在什么时间执行</span>\n  <span class=\"token key atrule\">concurrencyPolicy</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 并发执行策略，用于定义前一次作业运行尚未完成时是否以及如何运行后一次的作业</span>\n  <span class=\"token key atrule\">failedJobHistoryLimit</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 为失败的任务执行保留的历史记录数，默认为1</span>\n  <span class=\"token key atrule\">successfulJobHistoryLimit</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 为成功的任务执行保留的历史记录数，默认为3</span>\n  <span class=\"token key atrule\">startingDeadlineSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 启动作业错误的超时时长</span>\n  <span class=\"token key atrule\">jobTemplate</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># job控制器模板，用于为cronjob控制器生成job对象;下面其实就是job的定义</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">completions</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token key atrule\">parallelism</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token key atrule\">activeDeadlineSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n      <span class=\"token key atrule\">backoffLimit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n      <span class=\"token key atrule\">manualSelector</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> counter<span class=\"token punctuation\">-</span>pod\n        <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span> 规则\n          <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">-</span>pod<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> counter<span class=\"token punctuation\">-</span>pod\n        <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">restartPolicy</span><span class=\"token punctuation\">:</span> Never \n          <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> counter\n            <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n            <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 20;done\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://www.jianshu.com/p/e9ce1a7e1ed1\">Cron表达式的详细用法 - 简书 (jianshu.com)</a></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">需要重点解释的几个选项：\n<span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span> cron表达式，用于指定任务的执行时间\n    <span class=\"token important\">*/1</span>    *      *    *     *\n    &lt;分钟<span class=\"token punctuation\">></span> &lt;小时<span class=\"token punctuation\">></span> &lt;日<span class=\"token punctuation\">></span> &lt;月份<span class=\"token punctuation\">></span> &lt;星期<span class=\"token punctuation\">></span>\n\n    分钟 值从 0 到 59.\n    小时 值从 0 到 23.\n    日 值从 1 到 31.\n    月 值从 1 到 12.\n    星期 值从 0 到 6<span class=\"token punctuation\">,</span> 0 代表星期日\n    多个时间可以用逗号隔开； 范围可以用连字符给出；<span class=\"token important\">*可以作为通配符；</span> /表示每<span class=\"token punctuation\">...</span>\n<span class=\"token key atrule\">concurrencyPolicy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Allow</span><span class=\"token punctuation\">:</span>   允许Jobs并发运行(默认)\n    <span class=\"token key atrule\">Forbid</span><span class=\"token punctuation\">:</span>  禁止并发运行，如果上一次运行尚未完成，则跳过下一次运行\n    <span class=\"token key atrule\">Replace</span><span class=\"token punctuation\">:</span> 替换，取消当前正在运行的作业并用新作业替换它<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-cronjob.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> batch/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> CronJob\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pc<span class=\"token punctuation\">-</span>cronjob\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">controller</span><span class=\"token punctuation\">:</span> cronjob\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*/1 * * * *\"</span>\n  <span class=\"token key atrule\">jobTemplate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">restartPolicy</span><span class=\"token punctuation\">:</span> Never\n          <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> counter\n            <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n            <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建cronjob</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pc-cronjob.yaml\n<span class=\"token comment\"># 查看cronjob</span>\nkubectl get cronjobs <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看job</span>\nkubectl get <span class=\"token function\">jobs</span> <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 删除cronjob</span>\nkubectl  delete <span class=\"token parameter variable\">-f</span> pc-cronjob.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"7-Service详解\"><a href=\"#7-Service详解\" class=\"headerlink\" title=\"7. Service详解\"></a>7. Service详解</h1><h2 id=\"7-1-Service介绍\"><a href=\"#7-1-Service介绍\" class=\"headerlink\" title=\"7.1 Service介绍\"></a>7.1 Service介绍</h2><p>在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定的，这也就意味着不方便直接采用pod的ip对服务进行访问。为了解决这个问题，kubernetes提供了Service资源，Service会对提供同一个服务的多个pod进行聚合，并且提供一个统一的入口地址。通过访问Service的入口地址就能访问到后面的pod服务。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image202004081947169121626783758946.png\" alt=\"img\"></p>\n<p>Service在很多情况下只是一个概念，真正起作用的其实是kube-proxy服务进程，每个Node节点上都运行着一个kube-proxy服务进程。当创建Service的时候会通过api-server向etcd写入创建的service的信息，而kube-proxy会基于监听的机制发现这种Service的变动，然后<strong>它会将最新的Service信息转换成对应的访问规则</strong>。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200509121254425.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 10.97.97.97:80 是service提供的访问入口</span>\n<span class=\"token comment\"># 当访问这个入口的时候，可以发现后面有三个pod的服务在等待调用，</span>\n<span class=\"token comment\"># kube-proxy会基于rr（轮询）的策略，将请求分发到其中一个pod上去</span>\n<span class=\"token comment\"># 这个规则会同时在集群内的所有节点上都生成，所以在任何一个节点上访问都可以。</span>\n<span class=\"token punctuation\">[</span>root@node1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ipvsadm -Ln</span>\nIP Virtual Server version <span class=\"token number\">1.2</span>.1 <span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>\nProt LocalAddress:Port Scheduler Flags\n  -<span class=\"token operator\">></span> RemoteAddress:Port           Forward Weight ActiveConn InActConn\nTCP  <span class=\"token number\">10.97</span>.97.97:80 rr\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.39:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.40:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.2.33:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>kube-proxy目前支持三种工作模式:</p>\n<h3 id=\"userspace-模式\"><a href=\"#userspace-模式\" class=\"headerlink\" title=\"userspace 模式\"></a><strong>userspace 模式</strong></h3><p>userspace模式下，kube-proxy会为每一个Service创建一个监听端口，发向Cluster IP的请求被Iptables规则重定向到kube-proxy监听的端口上，kube-proxy根据LB算法选择一个提供服务的Pod并和其建立链接，以将请求转发到Pod上。  该模式下，kube-proxy充当了一个四层负责均衡器的角色。由于kube-proxy运行在userspace中，在进行转发处理时会增加内核和用户空间之间的数据拷贝，虽然比较稳定，但是效率比较低。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200509151424280.png\" alt=\"img\"></p>\n<h3 id=\"iptables-模式\"><a href=\"#iptables-模式\" class=\"headerlink\" title=\"iptables 模式\"></a><strong>iptables 模式</strong></h3><p>iptables模式下，kube-proxy为service后端的每个Pod创建对应的iptables规则，直接将发向Cluster IP的请求重定向到一个Pod IP。  该模式下kube-proxy不承担四层负责均衡器的角色，只负责创建iptables规则。该模式的优点是较userspace模式效率更高，但不能提供灵活的LB策略，当后端Pod不可用时也无法进行重试。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200509152947714.png\" alt=\"img\"></p>\n<h3 id=\"ipvs-模式\"><a href=\"#ipvs-模式\" class=\"headerlink\" title=\"ipvs 模式\"></a><strong>ipvs 模式</strong></h3><p>ipvs模式和iptables类似，kube-proxy监控Pod的变化并创建相应的ipvs规则。ipvs相对iptables转发效率更高。除此以外，ipvs支持更多的LB算法。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200509153731363.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 此模式必须安装ipvs内核模块，否则会降级为iptables</span>\n<span class=\"token comment\"># 开启ipvs</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl edit cm kube-proxy -n kube-system</span>\n<span class=\"token comment\"># 修改mode: \"ipvs\"</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl delete pod -l k8s-app=kube-proxy -n kube-system</span>\n<span class=\"token punctuation\">[</span>root@node1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ipvsadm -Ln</span>\nIP Virtual Server version <span class=\"token number\">1.2</span>.1 <span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>\nProt LocalAddress:Port Scheduler Flags\n  -<span class=\"token operator\">></span> RemoteAddress:Port           Forward Weight ActiveConn InActConn\nTCP  <span class=\"token number\">10.97</span>.97.97:80 rr\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.39:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.40:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.2.33:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-2-Service类型\"><a href=\"#7-2-Service类型\" class=\"headerlink\" title=\"7.2 Service类型\"></a>7.2 Service类型</h2><p>Service的资源清单文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service  <span class=\"token comment\"># 资源类型</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1  <span class=\"token comment\"># 资源版本</span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 元数据</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> service <span class=\"token comment\"># 资源名称</span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev <span class=\"token comment\"># 命名空间</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 描述</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 标签选择器，用于确定当前service代理哪些pod</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Service类型，指定service的访问方式</span>\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 虚拟服务的ip地址</span>\n  <span class=\"token key atrule\">sessionAffinity</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># session亲和性，支持ClientIP、None两个选项</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 端口信息</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP \n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3017</span>  <span class=\"token comment\"># service端口</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5003</span> <span class=\"token comment\"># pod端口</span>\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">31122</span> <span class=\"token comment\"># 主机端口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>ClusterIP</strong>：默认值，它是Kubernetes系统自动分配的虚拟IP，只能在集群内部访问</li>\n<li><strong>NodePort</strong>：将Service通过指定的Node上的端口暴露给外部，通过此方法，就可以在集群外部访问服务</li>\n<li><strong>LoadBalancer</strong>：使用外接负载均衡器完成到服务的负载分发，注意此模式需要外部云环境支持</li>\n<li><strong>ExternalName</strong>： 把集群外部的服务引入集群内部，直接使用</li>\n</ul>\n<h2 id=\"7-3-Service使用\"><a href=\"#7-3-Service使用\" class=\"headerlink\" title=\"7.3 Service使用\"></a>7.3 Service使用</h2><h3 id=\"7-3-1-实验环境准备\"><a href=\"#7-3-1-实验环境准备\" class=\"headerlink\" title=\"7.3.1 实验环境准备\"></a>7.3.1 实验环境准备</h3><p>在使用service之前，首先利用Deployment创建出3个pod，注意要为pod设置<code>app=nginx-pod</code>的标签</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-deployment.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment      \n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pc<span class=\"token punctuation\">-</span>deployment\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span> \n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f pc-deployment.yaml</span>\ndeployment.apps/pc-deployment created\n\n<span class=\"token comment\"># 查看pod详情</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev -o wide --show-labels</span>\nNAME                             READY   STATUS     IP            NODE     LABELS\npc-deployment-66cb59b984-8p84h   <span class=\"token number\">1</span>/1     Running    <span class=\"token number\">10.244</span>.1.39   node1    <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>nginx-pod\npc-deployment-66cb59b984-vx8vx   <span class=\"token number\">1</span>/1     Running    <span class=\"token number\">10.244</span>.2.33   node2    <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>nginx-pod\npc-deployment-66cb59b984-wnncx   <span class=\"token number\">1</span>/1     Running    <span class=\"token number\">10.244</span>.1.40   node1    <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>nginx-pod\n\n<span class=\"token comment\"># 为了方便后面的测试，修改下三台nginx的index.html页面（三台修改的IP地址不一致）</span>\n<span class=\"token function\">sudo</span> kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> pc-deployment-5ffc5bf56c-sg76p <span class=\"token parameter variable\">-n</span> dev /bin/sh\n <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">></span> /usr/share/nginx/html/index.html\n <span class=\"token builtin class-name\">exit</span>\n<span class=\"token function\">sudo</span> kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> pc-deployment-5ffc5bf56c-hzp79 <span class=\"token parameter variable\">-n</span> dev /bin/sh\n <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"2\"</span> <span class=\"token operator\">></span> /usr/share/nginx/html/index.html\n  <span class=\"token builtin class-name\">exit</span>\n<span class=\"token function\">sudo</span> kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> pc-deployment-5ffc5bf56c-46rht <span class=\"token parameter variable\">-n</span> dev /bin/sh\n <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"3\"</span> <span class=\"token operator\">></span> /usr/share/nginx/html/index.html\n  <span class=\"token builtin class-name\">exit</span>\n<span class=\"token comment\">#修改完毕之后，访问测试</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl 10.244.1.39</span>\n<span class=\"token number\">10.244</span>.1.39\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl 10.244.2.33</span>\n<span class=\"token number\">10.244</span>.2.33\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl 10.244.1.40</span>\n<span class=\"token number\">10.244</span>.1.40<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-3-2-ClusterIP类型的Service\"><a href=\"#7-3-2-ClusterIP类型的Service\" class=\"headerlink\" title=\"7.3.2 ClusterIP类型的Service\"></a>7.3.2 ClusterIP类型的Service</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-service-clusterip.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>clusterip\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span> 10.96.97.97 <span class=\"token comment\"># service的ip地址，如果不写，默认会生成一个</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>  <span class=\"token comment\"># Service端口       </span>\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span> <span class=\"token comment\"># pod端口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建service</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f pc-service-clusterip.yaml</span>\nservice/service-clusterip created\n\n<span class=\"token comment\"># 查看service</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get svc -n dev -o wide</span>\nNAME                TYPE        CLUSTER-IP    EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>   AGE   SELECTOR\nservice-clusterip   ClusterIP   <span class=\"token number\">10.96</span>.97.97   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">80</span>/TCP    13s   <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>nginx-pod\n\n<span class=\"token comment\"># 查看service的详细信息</span>\n<span class=\"token comment\"># 在这里有一个Endpoints列表，里面就是当前service可以负载到的服务入口</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl describe svc service-clusterip -n dev</span>\nName:              service-clusterip\nNamespace:         dev\nLabels:            <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nAnnotations:       <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nSelector:          <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>nginx-pod\nType:              ClusterIP\nIP:                <span class=\"token number\">10.97</span>.97.97\nPort:              <span class=\"token operator\">&lt;</span>unset<span class=\"token operator\">></span>  <span class=\"token number\">80</span>/TCP\nTargetPort:        <span class=\"token number\">80</span>/TCP\nEndpoints:         <span class=\"token number\">10.244</span>.1.39:80,10.244.1.40:80,10.244.2.33:80\nSession Affinity:  None\nEvents:            <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 查看ipvs的映射规则</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ipvsadm -Ln</span>\nTCP  <span class=\"token number\">10.97</span>.97.97:80 rr\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.39:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.40:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.2.33:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># 访问10.97.97.97:80观察效果</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl 10.97.97.97:80</span>\n<span class=\"token number\">10.244</span>.2.33<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Endpoint</strong></p>\n<p>Endpoint是kubernetes中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址，它是根据service配置文件中selector描述产生的。</p>\n<p>一个Service由一组Pod组成，这些Pod通过Endpoints暴露出来，<strong>Endpoints是实现实际服务的端点集合</strong>。换句话说，service和pod之间的联系是通过endpoints实现的。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200509191917069.png\" alt=\"image-20200509191917069\"></p>\n<p><strong>负载分发策略</strong></p>\n<p>对Service的访问被分发到了后端的Pod上去，目前kubernetes提供了两种负载分发策略：</p>\n<ul>\n<li><p>如果不定义，默认使用kube-proxy的策略，比如随机、轮询</p>\n</li>\n<li><p>基于客户端地址的会话保持模式，即来自同一个客户端发起的所有请求都会转发到固定的一个Pod上</p>\n<p>此模式可以使在spec中添加<code>sessionAffinity:ClientIP</code>选项</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> kubectl get endpoints <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n\n<span class=\"token comment\"># 查看ipvs的映射规则【rr 轮询】</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ipvsadm -Ln</span>\nTCP  <span class=\"token number\">10.97</span>.97.97:80 rr\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.39:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.40:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.2.33:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># 循环访问测试</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># while true;do curl 10.96.97.97:80; sleep 1; done;</span>\n<span class=\"token number\">10.244</span>.1.40\n<span class=\"token number\">10.244</span>.1.39\n<span class=\"token number\">10.244</span>.2.33\n<span class=\"token number\">10.244</span>.1.40\n<span class=\"token number\">10.244</span>.1.39\n<span class=\"token number\">10.244</span>.2.33\n\n<span class=\"token comment\"># 修改分发策略----sessionAffinity:ClientIP</span>\n<span class=\"token comment\"># 查看ipvs规则【persistent 代表持久】</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ipvsadm -Ln</span>\nTCP  <span class=\"token number\">10.97</span>.97.97:80 rr persistent <span class=\"token number\">10800</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.39:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.1.40:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n  -<span class=\"token operator\">></span> <span class=\"token number\">10.244</span>.2.33:80               Masq    <span class=\"token number\">1</span>      <span class=\"token number\">0</span>          <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># 循环访问测试</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># while true;do curl 192.168.150.136:30002; sleep 1; done;</span>\n<span class=\"token number\">10.244</span>.2.33\n<span class=\"token number\">10.244</span>.2.33\n<span class=\"token number\">10.244</span>.2.33\n  \n<span class=\"token comment\"># 删除service</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl delete -f service-clusterip.yaml</span>\n<span class=\"token function\">service</span> <span class=\"token string\">\"service-clusterip\"</span> deleted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-3-3-HeadLiness类型的Service\"><a href=\"#7-3-3-HeadLiness类型的Service\" class=\"headerlink\" title=\"7.3.3 HeadLiness类型的Service\"></a>7.3.3 HeadLiness类型的Service</h3><p>在某些场景中，开发人员可能不想使用Service提供的负载均衡功能，而希望自己来控制负载均衡策略，针对这种情况，kubernetes提供了HeadLiness Service，这类Service不会分配Cluster IP，如果想要访问service，<strong>只能通过service的域名进行查询</strong>。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># service-headliness.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>headliness\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span> None <span class=\"token comment\"># 将clusterIP设置为None，即可创建headliness Service</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>    \n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建service</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f service-headliness.yaml</span>\nservice/service-headliness created\n\n<span class=\"token comment\"># 获取service， 发现CLUSTER-IP未分配</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get svc service-headliness -n dev -o wide</span>\nNAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>   AGE   SELECTOR\nservice-headliness   ClusterIP   None         <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">80</span>/TCP    11s   <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>nginx-pod\n\n<span class=\"token comment\"># 查看service详情</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl describe svc service-headliness  -n dev</span>\nName:              service-headliness\nNamespace:         dev\nLabels:            <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nAnnotations:       <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nSelector:          <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>nginx-pod\nType:              ClusterIP\nIP:                None\nPort:              <span class=\"token operator\">&lt;</span>unset<span class=\"token operator\">></span>  <span class=\"token number\">80</span>/TCP\nTargetPort:        <span class=\"token number\">80</span>/TCP\nEndpoints:         <span class=\"token number\">10.244</span>.1.39:80,10.244.1.40:80,10.244.2.33:80\nSession Affinity:  None\nEvents:            <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 查看域名的解析情况</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl exec -it pc-deployment-66cb59b984-8p84h -n dev /bin/sh</span>\n/ <span class=\"token comment\"># cat /etc/resolv.conf</span>\nnameserver <span class=\"token number\">10.96</span>.0.10\nsearch dev.svc.cluster.local svc.cluster.local cluster.local\n\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># dig @10.96.0.10 service-headliness.dev.svc.cluster.local</span>\nservice-headliness.dev.svc.cluster.local. <span class=\"token number\">30</span> IN A <span class=\"token number\">10.244</span>.1.40\nservice-headliness.dev.svc.cluster.local. <span class=\"token number\">30</span> IN A <span class=\"token number\">10.244</span>.1.39\nservice-headliness.dev.svc.cluster.local. <span class=\"token number\">30</span> IN A <span class=\"token number\">10.244</span>.2.33<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-3-4-NodePort类型的Service\"><a href=\"#7-3-4-NodePort类型的Service\" class=\"headerlink\" title=\"7.3.4 NodePort类型的Service\"></a>7.3.4 NodePort类型的Service</h3><p>在之前的样例中，创建的Service的ip地址只有集群内部才可以访问，如果希望将Service暴露给集群外部使用，那么就要使用到另外一种类型的Service，称为NodePort类型。NodePort的工作原理其实就是<strong>将service的端口映射到Node的一个端口上</strong>，然后就可以通过<code>NodeIp:NodePort</code>来访问service了。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200620175731338.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-service-nodeport.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>nodeport\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort <span class=\"token comment\"># service类型</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30002</span> <span class=\"token comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配</span>\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建service</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f pc-service-nodeport.yaml</span>\nservice/service-nodeport created\n\n<span class=\"token comment\"># 查看service</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get svc -n dev -o wide</span>\nNAME               TYPE       CLUSTER-IP      EXTERNAL-IP   PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>       SELECTOR\nservice-nodeport   NodePort   <span class=\"token number\">10.105</span>.64.191   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">80</span>:30002/TCP  <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>nginx-pod\n\n<span class=\"token comment\"># 接下来可以通过电脑主机的浏览器去访问集群中任意一个nodeip的30002端口，即可访问到pod</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-3-5-LoadBalancer类型的Service\"><a href=\"#7-3-5-LoadBalancer类型的Service\" class=\"headerlink\" title=\"7.3.5 LoadBalancer类型的Service\"></a>7.3.5 LoadBalancer类型的Service</h3><p>LoadBalancer和NodePort很相似，目的都是向外部暴露一个端口，区别在于LoadBalancer会在集群的外部再来做一个负载均衡设备，而这个设备需要外部环境支持的，外部服务发送到这个设备上的请求，会被设备负载之后转发到集群中。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200510103945494.png\" alt=\"img\"></p>\n<h3 id=\"7-3-6-ExternalName类型的Service\"><a href=\"#7-3-6-ExternalName类型的Service\" class=\"headerlink\" title=\"7.3.6 ExternalName类型的Service\"></a>7.3.6 ExternalName类型的Service</h3><p>ExternalName类型的Service用于引入集群外部的服务，它通过<code>externalName</code>属性指定外部一个服务的地址，然后在集群内部访问此service就可以访问到外部的服务了。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200510113311209.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apiVersion: v1\nkind: Service\nmetadata:\n  name: service-externalname\n  namespace: dev\nspec:\n  type: ExternalName <span class=\"token comment\"># service类型</span>\n  externalName: www.baidu.com  <span class=\"token comment\">#改成ip地址也可以</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建service</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl  create -f service-externalname.yaml</span>\nservice/service-externalname created\n\n<span class=\"token comment\"># 域名解析</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># dig @10.96.0.10 service-externalname.dev.svc.cluster.local</span>\nservice-externalname.dev.svc.cluster.local. <span class=\"token number\">30</span> IN CNAME www.baidu.com.\nwww.baidu.com.          <span class=\"token number\">30</span>      IN      CNAME   www.a.shifen.com.\nwww.a.shifen.com.       <span class=\"token number\">30</span>      IN      A       <span class=\"token number\">39.156</span>.66.18\nwww.a.shifen.com.       <span class=\"token number\">30</span>      IN      A       <span class=\"token number\">39.156</span>.66.14<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"7-4-Ingress介绍\"><a href=\"#7-4-Ingress介绍\" class=\"headerlink\" title=\"7.4 Ingress介绍\"></a>7.4 Ingress介绍</h2><p>在前面课程中已经提到，Service对集群之外暴露服务的主要方式有两种：NotePort和LoadBalancer，但是这两种方式，都有一定的缺点：</p>\n<ul>\n<li>NodePort方式的缺点是会占用很多集群机器的端口，那么当集群服务变多的时候，这个缺点就愈发明显</li>\n<li>LB方式的缺点是每个service需要一个LB，浪费、麻烦，并且需要kubernetes之外设备的支持</li>\n</ul>\n<p>基于这种现状，kubernetes提供了Ingress资源对象，Ingress只需要一个NodePort或者一个LB就可以满足暴露多个Service的需求。工作机制大致如下图表示：</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200623092808049.png\" alt=\"img\"></p>\n<p>实际上，Ingress相当于一个7层的负载均衡器，是kubernetes对反向代理的一个抽象，它的工作原理类似于Nginx，可以理解成在<strong>Ingress里建立诸多映射规则，Ingress Controller通过监听这些配置规则并转化成Nginx的反向代理配置 , 然后对外部提供服务</strong>。在这里有两个核心概念：</p>\n<ul>\n<li>ingress：kubernetes中的一个对象，作用是定义请求如何转发到service的规则</li>\n<li>ingress controller：具体实现反向代理及负载均衡的程序，对ingress定义的规则进行解析，根据配置的规则来实现请求转发，实现方式有很多，比如Nginx, Contour, Haproxy等等</li>\n</ul>\n<p>Ingress（以Nginx为例）的工作原理如下：</p>\n<ol>\n<li>用户编写Ingress规则，说明哪个域名对应kubernetes集群中的哪个Service</li>\n<li>Ingress控制器动态感知Ingress服务规则的变化，然后生成一段对应的Nginx反向代理配置</li>\n<li>Ingress控制器会将生成的Nginx配置写入到一个运行着的Nginx服务中，并动态更新</li>\n<li>到此为止，其实真正在工作的就是一个Nginx了，内部配置了用户定义的请求转发规则</li>\n</ol>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200516112704764.png\" alt=\"img\"></p>\n<h2 id=\"7-5-Ingress使用\"><a href=\"#7-5-Ingress使用\" class=\"headerlink\" title=\"7.5 Ingress使用\"></a>7.5 Ingress使用</h2><h3 id=\"7-5-1-环境准备\"><a href=\"#7-5-1-环境准备\" class=\"headerlink\" title=\"7.5.1 环境准备\"></a>7.5.1 环境准备</h3><h4 id=\"搭建ingress环境\"><a href=\"#搭建ingress环境\" class=\"headerlink\" title=\"搭建ingress环境\"></a><strong>搭建ingress环境</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> ingress-control.yaml\nkubectl get pod <span class=\"token parameter variable\">-n</span> ingress-nginx\n<span class=\"token comment\"># 查看service</span>\nkubectl get svc <span class=\"token parameter variable\">-n</span> ingress-nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"准备service和pod\"><a href=\"#准备service和pod\" class=\"headerlink\" title=\"准备service和pod\"></a><strong>准备service和pod</strong></h4><p>为了后面的实验比较方便，创建如下图所示的模型</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200516102419998.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># tomcat-nginx.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>deployment\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">-</span>deployment\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">-</span>pod\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tomcat\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>8.5<span class=\"token punctuation\">-</span>jre10<span class=\"token punctuation\">-</span>slim\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>service\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span> None\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">-</span>service\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span> None\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-5-2-Http代理\"><a href=\"#7-5-2-Http代理\" class=\"headerlink\" title=\"7.5.2 Http代理\"></a>7.5.2 Http代理</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-ingress-http.yaml</span>\n<span class=\"token comment\"># kubectl explain Ingress.spec.rules.http.paths.backend.service</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>http\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> nginx.itheima.com\n    <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n        <span class=\"token key atrule\">pathType</span><span class=\"token punctuation\">:</span> Prefix\n        <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>service\n            <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> \n              <span class=\"token key atrule\">number</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> tomcat.itheima.com\n    <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n        <span class=\"token key atrule\">pathType</span><span class=\"token punctuation\">:</span> Prefix\n        <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">-</span>service\n            <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> \n              <span class=\"token key atrule\">number</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建</span>\nkubectl apply <span class=\"token parameter variable\">-f</span> pc-ingress-http.yaml\n<span class=\"token comment\"># 查看</span>\n<span class=\"token function\">sudo</span> kubectl get ing ingress-http <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看详情</span>\n<span class=\"token function\">sudo</span> kubectl describe ing ingress-http  <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 注意看上面的Address栏</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-5-3-Https代理\"><a href=\"#7-5-3-Https代理\" class=\"headerlink\" title=\"7.5.3 Https代理\"></a>7.5.3 Https代理</h3><h4 id=\"创建证书\"><a href=\"#创建证书\" class=\"headerlink\" title=\"创建证书\"></a>创建证书</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 生成证书</span>\nopenssl req <span class=\"token parameter variable\">-x509</span> <span class=\"token parameter variable\">-sha256</span> <span class=\"token parameter variable\">-nodes</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">365</span> <span class=\"token parameter variable\">-newkey</span> rsa:2048 <span class=\"token parameter variable\">-keyout</span> tls.key <span class=\"token parameter variable\">-out</span> tls.crt <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/C=CN/ST=BJ/L=BJ/O=nginx/CN=itheima.com\"</span>\n\n<span class=\"token comment\"># 创建密钥</span>\nkubectl create secret tls tls-secret <span class=\"token parameter variable\">--key</span> tls.key <span class=\"token parameter variable\">--cert</span> tls.crt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># ingress-https.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ingress<span class=\"token punctuation\">-</span>https\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tls</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx.itheima.com\n      <span class=\"token punctuation\">-</span> tomcat.itheima.com\n      <span class=\"token key atrule\">secretName</span><span class=\"token punctuation\">:</span> tls<span class=\"token punctuation\">-</span>secret <span class=\"token comment\"># 指定秘钥</span>\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> nginx.itheima.com\n    <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n        <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>service\n          <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> tomcat.itheima.com\n    <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n        <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">-</span>service\n          <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建</span>\nkubectl create <span class=\"token parameter variable\">-f</span> ingress-https.yaml\n<span class=\"token comment\"># 查看</span>\nkubectl get ing ingress-https <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看详情</span>\nkubectl describe ing ingress-https <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"8-数据存储\"><a href=\"#8-数据存储\" class=\"headerlink\" title=\"8. 数据存储\"></a>8. 数据存储</h1><p>为了持久化保存容器的数据，kubernetes引入了Volume的概念。</p>\n<p>Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命容器不与Pod中单个容器的生命周期相关，当容器终止或者重启时，Volume中的数据也不会丢失。</p>\n<p>kubernetes的Volume支持多种类型，比较常见的有下面几个：</p>\n<ul>\n<li>简单存储：EmptyDir、HostPath、NFS</li>\n<li>高级存储：PV、PVC</li>\n<li>配置存储：ConfigMap、Secret</li>\n</ul>\n<h2 id=\"8-1-基本存储\"><a href=\"#8-1-基本存储\" class=\"headerlink\" title=\"8.1 基本存储\"></a>8.1 基本存储</h2><h3 id=\"8-1-1-EmptyDir\"><a href=\"#8-1-1-EmptyDir\" class=\"headerlink\" title=\"8.1.1 EmptyDir\"></a>8.1.1 EmptyDir</h3><p>EmptyDir是最基础的Volume类型，一个EmptyDir就是Host上的一个空目录。</p>\n<p>EmptyDir是在Pod被分配到Node时创建的，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为kubernetes会自动分配一个目录，当Pod销毁时， EmptyDir中的数据也会被永久删除。 EmptyDir用途如下：</p>\n<ul>\n<li><strong>临时空间，例如用于某些应用程序运行时所需的临时目录，且无须永久保留</strong></li>\n<li><strong>一个容器需要从另一个容器中获取数据的目录（多容器共享目录）</strong></li>\n</ul>\n<p>接下来，通过一个容器之间文件共享的案例来使用一下EmptyDir。</p>\n<p>在一个Pod中准备两个容器nginx和busybox，然后声明一个Volume分别挂在到两个容器的目录中，然后nginx容器负责向Volume中写日志，busybox中通过命令将日志内容读到控制台。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200413174713773.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># volume-emptydir.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> volume<span class=\"token punctuation\">-</span>emptydir\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 将logs-volume挂在到nginx容器中，对应的目录为 /var/log/nginx</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/log/nginx\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tail -f /logs/access.log\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 初始命令，动态读取指定文件中内容</span>\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 将logs-volume 挂在到busybox容器中，对应的目录为 /logs</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /logs\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 声明volume， name为logs-volume，类型为emptyDir</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n    <span class=\"token key atrule\">emptyDir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建Pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> volume-emptydir.yaml\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pods volume-emptydir <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 通过podIp访问nginx</span>\n<span class=\"token function\">curl</span> <span class=\"token number\">10.42</span>.2.9\n<span class=\"token comment\"># 通过kubectl logs命令查看指定容器的标准输出</span>\nkubectl logs <span class=\"token parameter variable\">-f</span> volume-emptydir <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-c</span> busybox<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"8-1-2-HostPath\"><a href=\"#8-1-2-HostPath\" class=\"headerlink\" title=\"8.1.2 HostPath\"></a>8.1.2 HostPath</h3><p>HostPath就是将Node主机中一个实际目录挂在到Pod中，以供容器使用，这样的设计就可以保证Pod销毁了，但是数据依据可以存在于Node主机上。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200413214031331.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># volume-hostpath.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> volume<span class=\"token punctuation\">-</span>hostpath\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/log/nginx\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tail -f /logs/access.log\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /logs\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> volume\n    <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> pvc1\n      <span class=\"token key atrule\">readOnly</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n    <span class=\"token key atrule\">hostPath</span><span class=\"token punctuation\">:</span> \n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /root/logs\n      <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> DirectoryOrCreate  <span class=\"token comment\"># 目录存在就使用，不存在就先创建后使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># sudo kubectl apply -f volume-hostpath.yaml\n关于type的值的一点说明：\n    DirectoryOrCreate 目录存在就使用，不存在就先创建后使用\n    Directory   目录必须存在\n    FileOrCreate  文件存在就使用，不存在就先创建后使用\n    File 文件必须存在 \n    Socket  unix套接字必须存在\n    CharDevice  字符设备必须存在\n    BlockDevice 块设备必须存在<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"8-1-3-NFS\"><a href=\"#8-1-3-NFS\" class=\"headerlink\" title=\"8.1.3 NFS\"></a>8.1.3 NFS</h3><p>HostPath可以解决数据持久化的问题，但是一旦Node节点故障了，Pod如果转移到了别的节点，又会出现问题了，此时需要准备单独的网络存储系统，比较常用的用NFS、CIFS。</p>\n<p>NFS是一个网络文件存储系统，可以搭建一台NFS服务器，然后将Pod中的存储直接连接到NFS系统上，这样的话，无论Pod在节点上怎么转移，只要Node跟NFS的对接没问题，数据就可以成功访问。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200413215133559.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nfs安装见 Linux环境配置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># volume-nfs.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> volume<span class=\"token punctuation\">-</span>nfs\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/log/nginx\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tail -f /logs/access.log\"</span><span class=\"token punctuation\">]</span> \n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /logs\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> logs<span class=\"token punctuation\">-</span>volume\n    <span class=\"token key atrule\">nfs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> 192.168.5.6  <span class=\"token comment\">#nfs服务器地址</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /root/data/nfs <span class=\"token comment\">#共享文件路径</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看主节点挂载目录</span>\nshowmount <span class=\"token parameter variable\">-e</span>\n<span class=\"token comment\"># 创建pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> volume-nfs.yaml\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pods volume-nfs <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 查看nfs服务器上的共享目录，发现已经有文件了</span>\n<span class=\"token function\">ls</span> /root/data/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-2-高级存储\"><a href=\"#8-2-高级存储\" class=\"headerlink\" title=\"8.2 高级存储\"></a>8.2 高级存储</h2><p>PV（Persistent Volume）是持久化卷的意思，是对底层的共享存储的一种抽象。一般情况下PV由kubernetes管理员进行创建和配置，它与底层具体的共享存储技术有关，并通过插件完成与共享存储的对接。</p>\n<p>PVC（Persistent Volume Claim）是持久卷声明的意思，是用户对于存储需求的一种声明。换句话说，PVC其实就是用户向kubernetes系统发出的一种资源需求申请。</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200514194111567.png\" alt=\"img\"></p>\n<p>使用了PV和PVC之后，工作可以得到进一步的细分：</p>\n<ul>\n<li>存储：存储工程师维护</li>\n<li>PV： kubernetes管理员维护</li>\n<li>PVC：kubernetes用户维护</li>\n</ul>\n<h3 id=\"8-2-1-PV\"><a href=\"#8-2-1-PV\" class=\"headerlink\" title=\"8.2.1 PV\"></a>8.2.1 PV</h3><p>PV是存储资源的抽象，下面是资源清单文件:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1  \n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolume\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pv2\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nfs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 存储类型，与底层真正存储对应</span>\n  <span class=\"token key atrule\">capacity</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 存储能力，目前只支持存储空间的设置</span>\n    <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 2Gi\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 访问模式</span>\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 存储类别</span>\n  <span class=\"token key atrule\">persistentVolumeReclaimPolicy</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 回收策略</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>PV 的关键配置参数说明：</p>\n<ul>\n<li><p><strong>存储类型</strong></p>\n<p>底层实际存储的类型，kubernetes支持多种存储类型，每种存储类型的配置都有所差异</p>\n</li>\n<li><p><strong>存储能力（capacity）</strong></p>\n</li>\n</ul>\n<p>目前只支持存储空间的设置( storage&#x3D;1Gi )，不过未来可能会加入IOPS、吞吐量等指标的配置</p>\n<ul>\n<li><p><strong>访问模式（accessModes）</strong></p>\n<p>用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式：</p>\n<ul>\n<li>ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载</li>\n<li>ReadOnlyMany（ROX）： 只读权限，可以被多个节点挂载</li>\n<li>ReadWriteMany（RWX）：读写权限，可以被多个节点挂载</li>\n</ul>\n<p><code>需要注意的是，底层不同的存储类型可能支持的访问模式不同</code></p>\n</li>\n<li><p><strong>回收策略（persistentVolumeReclaimPolicy）</strong></p>\n<p>当PV不再被使用了之后，对其的处理方式。目前支持三种策略：</p>\n<ul>\n<li>Retain （保留） 保留数据，需要管理员手工清理数据</li>\n<li>Recycle（回收） 清除 PV 中的数据，效果相当于执行 rm -rf &#x2F;thevolume&#x2F;*</li>\n<li>Delete （删除） 与 PV 相连的后端存储完成 volume 的删除操作，当然这常见于云服务商的存储服务</li>\n</ul>\n<p><code>需要注意的是，底层不同的存储类型可能支持的回收策略不同</code></p>\n</li>\n<li><p><strong>存储类别</strong></p>\n<p>PV可以通过storageClassName参数指定一个存储类别</p>\n<ul>\n<li>具有特定类别的PV只能与请求了该类别的PVC进行绑定</li>\n<li>未设定类别的PV则只能与不请求任何类别的PVC进行绑定</li>\n</ul>\n</li>\n<li><p><strong>状态（status）</strong></p>\n<p>一个 PV 的生命周期中，可能会处于4中不同的阶段：</p>\n<ul>\n<li>Available（可用）： 表示可用状态，还未被任何 PVC 绑定</li>\n<li>Bound（已绑定）： 表示 PV 已经被 PVC 绑定</li>\n<li>Released（已释放）： 表示 PVC 被删除，但是资源还未被集群重新声明</li>\n<li>Failed（失败）： 表示该 PV 的自动回收失败</li>\n</ul>\n</li>\n</ul>\n<p><strong>实验</strong></p>\n<p>使用NFS作为存储，来演示PV的使用，创建3个PV，对应NFS中的3个暴露的路径。</p>\n<ol>\n<li>准备NFS环境</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建目录</span>\n<span class=\"token function\">mkdir</span> /nfs/test/<span class=\"token punctuation\">&#123;</span>pv1,pv2,pv3<span class=\"token punctuation\">&#125;</span> <span class=\"token parameter variable\">-pv</span>\n\n<span class=\"token comment\"># 暴露服务</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">></span>  /etc/exports <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\">  <span class=\"token comment\"># 覆盖写！</span></span>\n/nfs/test/pv1     192.168.150.0/24(rw,no_root_squash)\n/nfs/test/pv2     192.168.150.0/24(rw,no_root_squash)\n/nfs/test/pv3     192.168.150.0/24(rw,no_root_squash)\n/nfs/data  *(rw,async,no_root_squash)\nEOF</span>\nsystemctl restart nfs\n<span class=\"token function\">service</span> nfs status\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"/nfs/data/ 192.168.150.0/24(insecure,rw,sync,no_root_squash)\"</span>  <span class=\"token operator\">>></span> /etc/exports  <span class=\"token comment\">#追加写</span>\n\nsystemctl status rpcbind\nsystemctl status nfs\n\n<span class=\"token function\">umount</span> /nfs/data\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> nfs <span class=\"token number\">192.168</span>.150.135:/nfs/data /nfs/data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>创建</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pv-test001.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolume\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span>  pv1\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">number</span><span class=\"token punctuation\">:</span> pv1\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">capacity</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1Gi\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">nfs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /nfs/test/pv1\n    <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> 192.168.150.135\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolume\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span>  pv2\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">number</span><span class=\"token punctuation\">:</span> pv2\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">capacity</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 2Gi\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">nfs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /nfs/test/pv2\n    <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> 192.168.150.135\n    \n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolume\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span>  pv3\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">number</span><span class=\"token punctuation\">:</span> pv3\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">capacity</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 3Gi\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">nfs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /nfs/test/pv3\n    <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> 192.168.150.135<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建 pv</span>\n<span class=\"token function\">sudo</span> kubectl apply <span class=\"token parameter variable\">-f</span> pv-test001.yaml\n<span class=\"token comment\"># 查看pv</span>\nkubectl get <span class=\"token function\">pv</span> <span class=\"token parameter variable\">-o</span> wide<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-2-2-PVC\"><a href=\"#8-2-2-PVC\" class=\"headerlink\" title=\"8.2.2 PVC\"></a>8.2.2 PVC</h3><p>PVC是资源的申请，用来声明对存储空间、访问模式、存储类别需求信息。下面是资源清单文件:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pvc\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 访问模式</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 采用标签对PV选择</span>\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 存储类别</span>\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 请求空间</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 5Gi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>PVC 的关键配置参数说明：</p>\n<ul>\n<li><strong>访问模式（accessModes）</strong></li>\n</ul>\n<p>用于描述用户应用对存储资源的访问权限</p>\n<ul>\n<li><p><strong>选择条件（selector）</strong></p>\n<p>通过Label Selector的设置，可使PVC对于系统中己存在的PV进行筛选</p>\n</li>\n<li><p><strong>存储类别（storageClassName）</strong></p>\n<p>PVC在定义时可以设定需要的后端存储的类别，只有设置了该class的pv才能被系统选出</p>\n</li>\n<li><p><strong>资源请求（Resources ）</strong></p>\n<p>描述对存储资源的请求</p>\n</li>\n</ul>\n<p><strong>实验</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pvc-test001.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pvc1\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span> \n  <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1Gi \n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pvc2\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span> \n  <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1Gi\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pvc3\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span> \n  <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1Gi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建pvc</span>\n<span class=\"token function\">sudo</span> kubectl apply <span class=\"token parameter variable\">-f</span> pvc-test001.yaml\n<span class=\"token comment\"># 查看pvc</span>\n<span class=\"token function\">sudo</span> kubectl get pvc  <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 查看pv</span>\n<span class=\"token function\">sudo</span> kubectl get <span class=\"token function\">pv</span> <span class=\"token parameter variable\">-o</span> wide<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pods-test001.yaml  使用pvc</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod1\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"while true;do echo pod1 >> /root/out.txt; sleep 1; done;\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> volume\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /root\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> volume\n      <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> pvc1\n        <span class=\"token key atrule\">readOnly</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod2\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.30</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"while true;do echo pod2 >> /root/out.txt; sleep 1; done;\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> volume\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /root\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> volume\n      <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> pvc2\n        <span class=\"token key atrule\">readOnly</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> pod1 <span class=\"token parameter variable\">-n</span> dev -- /bin/bash \n\n<span class=\"token comment\"># 创建pod</span>\n<span class=\"token function\">sudo</span> kubectl apply <span class=\"token parameter variable\">-f</span> pods-test001.yaml\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pods <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\"># 查看pvc</span>\nkubectl get pvc <span class=\"token parameter variable\">-n</span> dev <span class=\"token parameter variable\">-o</span> yaml\n<span class=\"token comment\"># 查看pv挂载路径</span>\n<span class=\"token function\">sudo</span> kubectl get <span class=\"token function\">pv</span> pvc-9c9e200c-259a-4652-8a35-ab19927447b4  <span class=\"token parameter variable\">-o</span> yaml <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> path\n<span class=\"token comment\"># 查看所有 path</span>\n<span class=\"token function\">sudo</span> kubectl get <span class=\"token function\">pv</span> <span class=\"token parameter variable\">-o</span> yaml <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> path <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token operator\">&lt;</span>pvc-name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"8-2-3-生命周期\"><a href=\"#8-2-3-生命周期\" class=\"headerlink\" title=\"8.2.3 生命周期\"></a>8.2.3 生命周期</h3><p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200515002806726.png\" alt=\"img\"></p>\n<h2 id=\"8-3-配置存储\"><a href=\"#8-3-配置存储\" class=\"headerlink\" title=\"8.3 配置存储\"></a>8.3 配置存储</h2><h3 id=\"8-3-1-ConfigMap\"><a href=\"#8-3-1-ConfigMap\" class=\"headerlink\" title=\"8.3.1 ConfigMap\"></a>8.3.1 ConfigMap</h3><p>ConfigMap是一种比较特殊的存储卷，它的主要作用是用来存储配置信息的。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pc-configmap.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> configmap\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">info</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    username:admin\n    password:123456</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建configmap</span>\n<span class=\"token function\">sudo</span> kubectl create <span class=\"token parameter variable\">-f</span> pc-configmap.yaml\n<span class=\"token comment\"># 查看configmap详情</span>\n<span class=\"token function\">sudo</span> kubectl describe cm configmap <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># pod-configmap.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>configmap\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 将configmap挂载到目录</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /configmap/config\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 引用configmap</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config\n    <span class=\"token key atrule\">configMap</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> configmap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建pod</span>\n<span class=\"token function\">sudo</span> kubectl create <span class=\"token parameter variable\">-f</span> pod-configmap.yaml\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pod pod-configmap <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\">#进入容器</span>\n<span class=\"token function\">sudo</span> kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> pod-configmap <span class=\"token parameter variable\">-n</span> dev /bin/sh\n<span class=\"token builtin class-name\">cd</span> /configmap/config/\n<span class=\"token function\">ls</span>\n<span class=\"token function\">cat</span> info\n<span class=\"token comment\"># info</span>\nusername:admin\npassword:123456\n<span class=\"token comment\"># 可以看到映射已经成功，每个configmap都映射成了一个目录</span>\n<span class=\"token comment\"># key--->文件     value---->文件中的内容</span>\n<span class=\"token comment\"># 此时如果更新configmap的内容, 容器中的值也会动态更新</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-3-2-Secret\"><a href=\"#8-3-2-Secret\" class=\"headerlink\" title=\"8.3.2 Secret\"></a>8.3.2 Secret</h3><p>在kubernetes中，还存在一种和ConfigMap非常类似的对象，称为Secret对象。它主要用于存储敏感信息，例如密码、秘钥、证书等等。</p>\n<ol>\n<li>首先使用base64对数据进行编码</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'admin'</span> <span class=\"token operator\">|</span> base64 <span class=\"token comment\">#准备username</span>\n<span class=\"token comment\"># YWRtaW4=</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'123456'</span> <span class=\"token operator\">|</span> base64 <span class=\"token comment\">#准备password</span>\n<span class=\"token comment\"># MTIzNDU2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>接下来编写secret.yaml，并创建Secret</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Secret\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> secret\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Opaque\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> YWRtaW4=\n  <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> MTIzNDU2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建secret</span>\nkubectl create <span class=\"token parameter variable\">-f</span> secret.yaml\n<span class=\"token comment\"># 查看secret详情</span>\nkubectl describe secret secret <span class=\"token parameter variable\">-n</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>创建pod-secret.yaml，将上面创建的secret挂载进去：</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod<span class=\"token punctuation\">-</span>secret\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.17.1\n    <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 将secret挂载到目录</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config\n      <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /secret/config\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config\n    <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">secretName</span><span class=\"token punctuation\">:</span> secret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建pod</span>\nkubectl create <span class=\"token parameter variable\">-f</span> pod-secret.yaml\n<span class=\"token comment\"># 查看pod</span>\nkubectl get pod pod-secret <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token comment\"># 进入容器，查看secret信息，发现已经自动解码了</span>\nkubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> pod-secret /bin/sh <span class=\"token parameter variable\">-n</span> dev\n<span class=\"token function\">ls</span> /secret/config/\n<span class=\"token comment\"># password  username</span>\n<span class=\"token function\">more</span> /secret/config/username\n<span class=\"token comment\"># admin</span>\n<span class=\"token function\">more</span> /secret/config/password\n<span class=\"token comment\"># 123456</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，已经实现了利用secret实现了信息的编码。</p>\n<h1 id=\"9-安全认证\"><a href=\"#9-安全认证\" class=\"headerlink\" title=\"9. 安全认证\"></a>9. 安全认证</h1><h2 id=\"9-1-访问控制概述\"><a href=\"#9-1-访问控制概述\" class=\"headerlink\" title=\"9.1 访问控制概述\"></a>9.1 访问控制概述</h2><p>Kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对Kubernetes的各种<strong>客户端</strong>进行<strong>认证和鉴权</strong>操作。</p>\n<p><strong>客户端</strong></p>\n<p>在Kubernetes集群中，客户端通常有两类：</p>\n<ul>\n<li><strong>User Account</strong>：一般是独立于kubernetes之外的其他服务管理的用户账号。</li>\n<li><strong>Service Account</strong>：kubernetes管理的账号，用于为Pod中的服务进程在访问Kubernetes时提供身份标识。</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520102949189.png\" alt=\"img\"></p>\n<p><strong>认证、授权与准入控制</strong></p>\n<p>ApiServer是访问及管理资源对象的唯一入口。任何一个请求访问ApiServer，都要经过下面三个流程：</p>\n<ul>\n<li>Authentication（认证）：身份鉴别，只有正确的账号才能够通过认证</li>\n<li>Authorization（授权）： 判断用户是否有权限对访问的资源执行特定的动作</li>\n<li>Admission Control（准入控制）：用于补充授权机制以实现更加精细的访问控制功能。</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520103942580.png\" alt=\"img\"></p>\n<h2 id=\"9-2-认证管理\"><a href=\"#9-2-认证管理\" class=\"headerlink\" title=\"9.2 认证管理\"></a>9.2 认证管理</h2><p>Kubernetes集群安全的最关键点在于如何识别并认证客户端身份，它提供了3种客户端身份认证方式：</p>\n<ul>\n<li><p>HTTP Base认证：通过用户名+密码的方式认证</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">这种认证方式是把“用户名:密码”用BASE64算法进行编码后的字符串放在HTTP请求中的Header Authorization域里发送给服务端。服务端收到后进行解码，获取用户名及密码，然后进行用户身份认证的过程。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>HTTP Token认证：通过一个Token来识别合法用户</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">这种认证方式是用一个很长的难以被模仿的字符串--Token来表明客户身份的一种方式。每个Token对应一个用户名，当客户端发起API调用请求时，需要在HTTP Header里放入Token，API Server接到Token后会跟服务器中保存的token进行比对，然后进行用户身份认证的过程。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>HTTPS证书认证：基于CA根证书签名的双向数字证书认证方式</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">这种认证方式是安全性最高的一种方式，但是同时也是操作起来最麻烦的一种方式。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200518211037434.png\" alt=\"img\"></p>\n<p><strong>HTTPS认证大体分为3个过程：</strong></p>\n<ol>\n<li><p>证书申请和下发</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">HTTPS通信双方的服务器向CA机构申请证书，CA机构下发根证书、服务端证书及私钥给申请者<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>客户端和服务端的双向认证</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1&gt; 客户端向服务器端发起请求，服务端下发自己的证书给客户端，\n   客户端接收到证书后，通过私钥解密证书，在证书中获得服务端的公钥，\n   客户端利用服务器端的公钥认证证书中的信息，如果一致，则认可这个服务器\n2&gt; 客户端发送自己的证书给服务器端，服务端接收到证书后，通过私钥解密证书，\n   在证书中获得客户端的公钥，并用该公钥认证证书信息，确认客户端是否合法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>服务器端和客户端进行通信</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">服务器端和客户端协商好加密方案后，客户端会产生一个随机的秘钥并加密，然后发送到服务器端。\n服务器端接收这个秘钥后，双方接下来通信的所有内容都通过该随机秘钥加密<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意: Kubernetes允许同时配置多种认证方式，只要其中任意一个方式认证通过即可</p></blockquote>\n<h2 id=\"9-3-授权管理\"><a href=\"#9-3-授权管理\" class=\"headerlink\" title=\"9.3 授权管理\"></a>9.3 授权管理</h2><p>授权发生在认证成功之后，通过认证就可以知道请求用户是谁， 然后Kubernetes会根据事先定义的授权策略来决定用户是否有权限访问，这个过程就称为授权。</p>\n<p>每个发送到ApiServer的请求都带上了用户和资源的信息：比如发送请求的用户、请求的路径、请求的动作等，授权就是根据这些信息和授权策略进行比较，如果符合策略，则认为授权通过，否则会返回错误。</p>\n<p>API Server目前支持以下几种授权策略：</p>\n<ul>\n<li><strong>AlwaysDeny</strong>：表示拒绝所有请求，一般用于测试</li>\n<li><strong>AlwaysAllow</strong>：允许接收所有请求，相当于集群不需要授权流程（Kubernetes默认的策略）</li>\n<li><strong>ABAC</strong>：基于属性的访问控制，表示使用用户配置的授权规则对用户请求进行匹配和控制</li>\n<li><strong>Webhook</strong>：通过调用外部REST服务对用户进行授权</li>\n<li><strong>Node</strong>：是一种专用模式，用于对kubelet发出的请求进行访问控制</li>\n<li><strong>RBAC</strong>：基于角色的访问控制（kubeadm安装方式下的默认选项）</li>\n</ul>\n<p>RBAC(Role-Based Access Control) 基于角色的访问控制，主要是在描述一件事情：<strong>给哪些对象授予了哪些权限</strong></p>\n<p>其中涉及到了下面几个概念：</p>\n<ul>\n<li>对象：User、Groups、ServiceAccount</li>\n<li>角色：代表着一组定义在资源上的可操作动作(权限)的集合</li>\n<li>绑定：将定义好的角色跟用户绑定在一起</li>\n</ul>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200519181209566.png\" alt=\"img\"></p>\n<p>RBAC引入了4个顶级资源对象：</p>\n<ul>\n<li>Role、ClusterRole：角色，用于指定一组权限</li>\n<li>RoleBinding、ClusterRoleBinding：角色绑定，用于将角色（权限）赋予给对象</li>\n</ul>\n<p><strong>Role、ClusterRole</strong></p>\n<p>一个角色就是一组权限的集合，这里的权限都是许可形式的（白名单）。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Role只能对命名空间内的资源进行授权，需要指定nameapce</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>role\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 支持的API组列表,\"\" 空字符串，表示核心API群</span>\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pods\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 支持的资源对象列表</span>\n  <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 允许的对资源对象的操作方法列表</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># ClusterRole可以对集群范围内资源、跨namespaces的范围资源、非资源类型进行授权</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>clusterrole\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pods\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>需要详细说明的是，rules中的参数：</p>\n<ul>\n<li><p>apiGroups: 支持的API组列表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;&quot;,&quot;apps&quot;, &quot;autoscaling&quot;, &quot;batch&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>resources：支持的资源对象列表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;services&quot;, &quot;endpoints&quot;, &quot;pods&quot;,&quot;secrets&quot;,&quot;configmaps&quot;,&quot;crontabs&quot;,&quot;deployments&quot;,&quot;jobs&quot;,\n&quot;nodes&quot;,&quot;rolebindings&quot;,&quot;clusterroles&quot;,&quot;daemonsets&quot;,&quot;replicasets&quot;,&quot;statefulsets&quot;,\n&quot;horizontalpodautoscalers&quot;,&quot;replicationcontrollers&quot;,&quot;cronjobs&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>verbs：对资源对象的操作方法列表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;, &quot;exec&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p><strong>RoleBinding、ClusterRoleBinding</strong></p>\n<p>角色绑定用来把一个角色绑定到一个目标对象上，绑定目标可以是User、Group或者ServiceAccount。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># RoleBinding可以将同一namespace中的subject绑定到某个Role下，则此subject即具有该Role定义的权限</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> RoleBinding\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>role<span class=\"token punctuation\">-</span>binding\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> User\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> heima\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>role\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># ClusterRoleBinding在整个集群级别和所有namespaces将特定的subject与ClusterRole绑定，授予权限</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRoleBinding\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>clusterrole<span class=\"token punctuation\">-</span>binding\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> User\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> heima\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>clusterrole\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>RoleBinding引用ClusterRole进行授权</strong></p>\n<p>RoleBinding可以引用ClusterRole，对属于同一命名空间内ClusterRole定义的资源主体进行授权。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">一种很常用的做法就是，集群管理员为集群范围预定义好一组角色（ClusterRole），然后在多个命名空间中重复使用这些ClusterRole。这样可以大幅提高授权管理工作效率，也使得各个命名空间下的基础性授权规则与使用体验保持一致。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 虽然authorization-clusterrole是一个集群角色，但是因为使用了RoleBinding</span>\n<span class=\"token comment\"># 所以heima只能读取dev命名空间中的资源</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> RoleBinding\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>role<span class=\"token punctuation\">-</span>binding<span class=\"token punctuation\">-</span>ns\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> User\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> heima\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>clusterrole\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>实战：创建一个只能管理dev空间下Pods资源的账号</strong></p>\n<ol>\n<li>创建账号</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1) 创建证书</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /etc/kubernetes/pki/</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># (umask 077;openssl genrsa -out devman.key 2048)</span>\n\n<span class=\"token comment\"># 2) 用apiserver的证书去签署</span>\n<span class=\"token comment\"># 2-1) 签名申请，申请的用户是devman,组是devgroup</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># openssl req -new -key devman.key -out devman.csr -subj \"/CN=devman/O=devgroup\"     </span>\n<span class=\"token comment\"># 2-2) 签署证书</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># openssl x509 -req -in devman.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out devman.crt -days 3650</span>\n\n<span class=\"token comment\"># 3) 设置集群、用户、上下文信息</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl config set-cluster kubernetes --embed-certs=true --certificate-authority=/etc/kubernetes/pki/ca.crt --server=https://192.168.109.100:6443</span>\n\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl config set-credentials devman --embed-certs=true --client-certificate=/etc/kubernetes/pki/devman.crt --client-key=/etc/kubernetes/pki/devman.key</span>\n\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl config set-context devman@kubernetes --cluster=kubernetes --user=devman</span>\n\n<span class=\"token comment\"># 切换账户到devman</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl config use-context devman@kubernetes</span>\nSwitched to context <span class=\"token string\">\"devman@kubernetes\"</span><span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 查看dev下pod，发现没有权限</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev</span>\nError from server <span class=\"token punctuation\">(</span>Forbidden<span class=\"token punctuation\">)</span>: pods is forbidden: User <span class=\"token string\">\"devman\"</span> cannot list resource <span class=\"token string\">\"pods\"</span> <span class=\"token keyword\">in</span> API group <span class=\"token string\">\"\"</span> <span class=\"token keyword\">in</span> the namespace <span class=\"token string\">\"dev\"</span>\n\n<span class=\"token comment\"># 切换到admin账户</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl config use-context kubernetes-admin@kubernetes</span>\nSwitched to context <span class=\"token string\">\"kubernetes-admin@kubernetes\"</span><span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2） 创建Role和RoleBinding，为devman用户授权</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dev<span class=\"token punctuation\">-</span>role\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pods\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">]</span>\n  \n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> RoleBinding\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1beta1\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> authorization<span class=\"token punctuation\">-</span>role<span class=\"token punctuation\">-</span>binding\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> User\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> devman\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Role\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dev<span class=\"token punctuation\">-</span>role\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f dev-role.yaml</span>\nrole.rbac.authorization.k8s.io/dev-role created\nrolebinding.rbac.authorization.k8s.io/authorization-role-binding created<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>切换账户，再次验证</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 切换账户到devman</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl config use-context devman@kubernetes</span>\nSwitched to context <span class=\"token string\">\"devman@kubernetes\"</span><span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 再次查看</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pods -n dev</span>\nNAME                                 READY   STATUS             RESTARTS   AGE\nnginx-deployment-66cb59b984-8wp2k    <span class=\"token number\">1</span>/1     Running            <span class=\"token number\">0</span>          4d1h\nnginx-deployment-66cb59b984-dc46j    <span class=\"token number\">1</span>/1     Running            <span class=\"token number\">0</span>          4d1h\nnginx-deployment-66cb59b984-thfck    <span class=\"token number\">1</span>/1     Running            <span class=\"token number\">0</span>          4d1h\n\n<span class=\"token comment\"># 为了不影响后面的学习,切回admin账户</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 pki<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl config use-context kubernetes-admin@kubernetes</span>\nSwitched to context <span class=\"token string\">\"kubernetes-admin@kubernetes\"</span><span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"9-4-准入控制\"><a href=\"#9-4-准入控制\" class=\"headerlink\" title=\"9.4 准入控制\"></a>9.4 准入控制</h2><p>通过了前面的认证和授权之后，还需要经过准入控制处理通过之后，apiserver才会处理这个请求。</p>\n<p>准入控制是一个可配置的控制器列表，可以通过在Api-Server上通过命令行设置选择执行哪些准入控制器：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">--admission-control&#x3D;NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,\n                      DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>只有当所有的准入控制器都检查通过之后，apiserver才执行该请求，否则返回拒绝。</p>\n<p>当前可配置的Admission Control准入控制如下：</p>\n<ul>\n<li>AlwaysAdmit：允许所有请求</li>\n<li>AlwaysDeny：禁止所有请求，一般用于测试</li>\n<li>AlwaysPullImages：在启动容器之前总去下载镜像</li>\n<li>DenyExecOnPrivileged：它会拦截所有想在Privileged Container上执行命令的请求</li>\n<li>ImagePolicyWebhook：这个插件将允许后端的一个Webhook程序来完成admission controller的功能。</li>\n<li>Service Account：实现ServiceAccount实现了自动化</li>\n<li>SecurityContextDeny：这个插件将使用SecurityContext的Pod中的定义全部失效</li>\n<li>ResourceQuota：用于资源配额管理目的，观察所有请求，确保在namespace上的配额不会超标</li>\n<li>LimitRanger：用于资源限制管理，作用于namespace上，确保对Pod进行资源限制</li>\n<li>InitialResources：为未设置资源请求与限制的Pod，根据其镜像的历史资源的使用情况进行设置</li>\n<li>NamespaceLifecycle：如果尝试在一个不存在的namespace中创建资源对象，则该创建请求将被拒绝。当删除一个namespace时，系统将会删除该namespace中所有对象。</li>\n<li>DefaultStorageClass：为了实现共享存储的动态供应，为未指定StorageClass或PV的PVC尝试匹配默认的StorageClass，尽可能减少用户在申请PVC时所需了解的后端存储细节</li>\n<li>DefaultTolerationSeconds：这个插件为那些没有设置forgiveness tolerations并具有notready:NoExecute和unreachable:NoExecute两种taints的Pod设置默认的“容忍”时间，为5min</li>\n<li>PodSecurityPolicy：这个插件用于在创建或修改Pod时决定是否根据Pod的security context和可用的PodSecurityPolicy对Pod的安全策略进行控制</li>\n</ul>\n<h1 id=\"10-DashBoard\"><a href=\"#10-DashBoard\" class=\"headerlink\" title=\"10. DashBoard\"></a>10. DashBoard</h1><p>之前在kubernetes中完成的所有操作都是通过命令行工具kubectl完成的。其实，为了提供更丰富的用户体验，kubernetes还开发了一个基于web的用户界面（Dashboard）。用户可以使用Dashboard部署容器化的应用，还可以监控应用的状态，执行故障排查以及管理kubernetes中各种资源。</p>\n<h2 id=\"10-1-部署Dashboard\"><a href=\"#10-1-部署Dashboard\" class=\"headerlink\" title=\"10.1 部署Dashboard\"></a>10.1 部署Dashboard</h2><ol>\n<li>下载yaml，并运行Dashboard</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 下载yaml</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wget  https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span>\n\n<span class=\"token comment\"># 修改kubernetes-dashboard的Service类型</span>\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  type: NodePort  <span class=\"token comment\"># 新增</span>\n  ports:\n    - port: <span class=\"token number\">443</span>\n      targetPort: <span class=\"token number\">8443</span>\n      nodePort: <span class=\"token number\">30009</span>  <span class=\"token comment\"># 新增</span>\n  selector:\n    k8s-app: kubernetes-dashboard\n\n<span class=\"token comment\"># 部署</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create -f recommended.yaml</span>\n\n<span class=\"token comment\"># 查看namespace下的kubernetes-dashboard下的资源</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl get pod,svc -n kubernetes-dashboard</span>\nNAME                                            READY   STATUS    RESTARTS   AGE\npod/dashboard-metrics-scraper-c79c65bb7-zwfvw   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          111s\npod/kubernetes-dashboard-56484d4c5-z95z5        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          111s\n\nNAME                               TYPE       CLUSTER-IP      EXTERNAL-IP  PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>         AGE\nservice/dashboard-metrics-scraper  ClusterIP  <span class=\"token number\">10.96</span>.89.218    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>       <span class=\"token number\">8000</span>/TCP        111s\nservice/kubernetes-dashboard       NodePort   <span class=\"token number\">10.104</span>.178.171  <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>       <span class=\"token number\">443</span>:30009/TCP   111s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2）创建访问账户，获取token</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建账号</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01-1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard</span>\n\n<span class=\"token comment\"># 授权</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01-1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create clusterrolebinding dashboard-admin-rb --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin</span>\n\n<span class=\"token comment\"># 获取账号token</span>\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#  kubectl get secrets -n kubernetes-dashboard | grep dashboard-admin</span>\ndashboard-admin-token-xbqhh        kubernetes.io/service-account-token   <span class=\"token number\">3</span>      2m35s\n\n<span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl describe secrets dashboard-admin-token-xbqhh -n kubernetes-dashboard</span>\nName:         dashboard-admin-token-xbqhh\nNamespace:    kubernetes-dashboard\nLabels:       <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nAnnotations:  kubernetes.io/service-account.name: dashboard-admin\n              kubernetes.io/service-account.uid: 95d84d80-be7a-4d10-a2e0-68f90222d039\n\nType:  kubernetes.io/service-account-token\n\nData\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nnamespace:  <span class=\"token number\">20</span> bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImJrYkF4bW5XcDhWcmNGUGJtek5NODFuSXl1aWptMmU2M3o4LTY5a2FKS2cifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4teGJxaGgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOTVkODRkODAtYmU3YS00ZDEwLWEyZTAtNjhmOTAyMjJkMDM5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.NAl7e8ZfWWdDoPxkqzJzTB46sK9E8iuJYnUI9vnBaY3Jts7T1g1msjsBnbxzQSYgAG--cV0WYxjndzJY_UWCwaGPrQrt_GunxmOK9AUnzURqm55GR2RXIZtjsWVP2EBatsDgHRmuUbQvTFOvdJB4x3nXcYLN2opAaMqg3rnU2rr-A8zCrIuX_eca12wIp_QiuP3SF-tzpdLpsyRfegTJZl6YnSGyaVkC9id-cxZRb307qdCfXPfCHR_2rt5FVfxARgg_C0e3eFHaaYQO7CitxsnIoIXpOFNAR8aUrmopJyODQIPqBWUehb7FhlU1DCduHnIIXVC_UICZ-MKYewBDLw\nca.crt:     <span class=\"token number\">1025</span> bytes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3）通过浏览器访问Dashboard的UI</p>\n<p>在登录页面上输入上面的token</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520144548997.png\" alt=\"image-20200520144548997\"></p>\n<p>出现下面的页面代表成功</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520144959353.png\" alt=\"image-20200520144959353\"></p>\n<h2 id=\"10-2-使用DashBoard\"><a href=\"#10-2-使用DashBoard\" class=\"headerlink\" title=\"10.2 使用DashBoard\"></a>10.2 使用DashBoard</h2><p>本章节以Deployment为例演示DashBoard的使用</p>\n<p><strong>查看</strong></p>\n<p>选择指定的命名空间<code>dev</code>，然后点击<code>Deployments</code>，查看dev空间下的所有deployment</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520154628679.png\" alt=\"img\"></p>\n<p><strong>扩缩容</strong></p>\n<p>在<code>Deployment</code>上点击<code>规模</code>，然后指定<code>目标副本数量</code>，点击确定</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520162605102.png\" alt=\"img\"></p>\n<p><strong>编辑</strong></p>\n<p>在<code>Deployment</code>上点击<code>编辑</code>，然后修改<code>yaml文件</code>，点击确定</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520163253644.png\" alt=\"image-20200520163253644\"></p>\n<p><strong>查看Pod</strong></p>\n<p>点击<code>Pods</code>, 查看pods列表</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520163552110.png\" alt=\"img\"></p>\n<p><strong>操作Pod</strong></p>\n<p>选中某个Pod，可以对其执行日志（logs）、进入执行（exec）、编辑、删除操作</p>\n<p><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/image20200520163832827.png\" alt=\"img\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Dashboard提供了kubectl的绝大部分功能，这里不再一一演示</p></blockquote>\n","feature":false,"text":"1. Kubernetes介绍1.1 kubernetes组件一个kubernetes集群主要是由**控制节点(master)、工作节点(node)**构成，每个节点上都会安装不同的组件。 master：集群的控制平面，负责集群的决策 ( 管理 ) ApiServer : 资源操...","link":"","photos":[],"count_time":{"symbolsCount":"101k","symbolsTime":"1:32"},"categories":[],"tags":[{"name":"k8s","slug":"k8s","count":1,"path":"api/tags/k8s.json"},{"name":"devops","slug":"devops","count":1,"path":"api/tags/devops.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Kubernetes%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1. Kubernetes介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-kubernetes%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">1.1 kubernetes组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-kubernetes%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.2 kubernetes概念</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">2. 部署</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3. 资源管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">3.1 资源管理介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-YAML%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">3.2 YAML语言介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.3 资源管理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-1-%E5%91%BD%E4%BB%A4%E5%BC%8F%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.3.1 命令式对象管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-3-%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%AF%B9%E8%B1%A1%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.3.3 声明式对象配置</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">4. 实战入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-Namespace\"><span class=\"toc-text\">4.1 Namespace</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-Pod\"><span class=\"toc-text\">4.2 Pod</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-Label\"><span class=\"toc-text\">4.3 Label</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-Deployment\"><span class=\"toc-text\">4.4 Deployment</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-Service\"><span class=\"toc-text\">4.5 Service</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-Pod%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">5. Pod详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-Pod%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">5.1 Pod介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-1-Pod%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">5.1.1 Pod结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-2-Pod%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">5.1.2 Pod定义</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-Pod%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">5.2 Pod配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-1-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">5.2.1 基本配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-2-%E9%95%9C%E5%83%8F%E6%8B%89%E5%8F%96\"><span class=\"toc-text\">5.2.2 镜像拉取</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-3-%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">5.2.3 启动命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-4-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">5.2.4 环境变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-5-%E7%AB%AF%E5%8F%A3%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">5.2.5 端口设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-6-%E8%B5%84%E6%BA%90%E9%85%8D%E9%A2%9D\"><span class=\"toc-text\">5.2.6 资源配额</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-Pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">5.3 Pod生命周期</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-1-%E5%88%9B%E5%BB%BA%E5%92%8C%E7%BB%88%E6%AD%A2\"><span class=\"toc-text\">5.3.1 创建和终止</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-2-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">5.3.2 初始化容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-3-%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5.3.3 钩子函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-4-%E5%AE%B9%E5%99%A8%E6%8E%A2%E6%B5%8B\"><span class=\"toc-text\">5.3.4 容器探测</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-5-%E9%87%8D%E5%90%AF%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">5.3.5 重启策略</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-4-Pod%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">5.4 Pod调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-1-%E5%AE%9A%E5%90%91%E8%B0%83%E5%BA%A6%E3%80%90%E5%BC%BA%E5%88%B6%E7%AD%96%E7%95%A5%E3%80%91\"><span class=\"toc-text\">5.4.1 定向调度【强制策略】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NodeName\"><span class=\"toc-text\">NodeName</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NodeSelector\"><span class=\"toc-text\">NodeSelector</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-2-%E4%BA%B2%E5%92%8C%E6%80%A7%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">5.4.2 亲和性调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NodeAffinity\"><span class=\"toc-text\">NodeAffinity</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PodAffinity\"><span class=\"toc-text\">PodAffinity</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PodAntiAffinity\"><span class=\"toc-text\">PodAntiAffinity</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-3-%E6%B1%A1%E7%82%B9%E5%92%8C%E5%AE%B9%E5%BF%8D\"><span class=\"toc-text\">5.4.3 污点和容忍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B1%A1%E7%82%B9API\"><span class=\"toc-text\">污点API</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-Pod%E6%8E%A7%E5%88%B6%E5%99%A8%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">6. Pod控制器详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-Pod%E6%8E%A7%E5%88%B6%E5%99%A8%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">6.1 Pod控制器介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-ReplicaSet-RS\"><span class=\"toc-text\">6.2 ReplicaSet(RS)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ReplicaSet-Demo\"><span class=\"toc-text\">ReplicaSet Demo</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A9%E7%BC%A9%E5%AE%B9\"><span class=\"toc-text\">扩缩容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%95%9C%E5%83%8F%E5%8D%87%E7%BA%A7\"><span class=\"toc-text\">镜像升级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4ReplicaSet\"><span class=\"toc-text\">删除ReplicaSet</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-3-Deployment-Deploy\"><span class=\"toc-text\">6.3 Deployment(Deploy)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A9%E7%BC%A9%E5%AE%B9-1\"><span class=\"toc-text\">扩缩容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%95%9C%E5%83%8F%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">镜像更新</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%BB%BA%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">重建更新</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">滚动更新</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80\"><span class=\"toc-text\">版本回退</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-4-Horizontal-Pod-Autoscaler-HPA\"><span class=\"toc-text\">6.4 Horizontal Pod Autoscaler(HPA)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-5-DaemonSet-DS\"><span class=\"toc-text\">6.5 DaemonSet(DS)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-6-Job\"><span class=\"toc-text\">6.6 Job</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-7-CronJob-CJ\"><span class=\"toc-text\">6.7 CronJob(CJ)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-Service%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">7. Service详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-1-Service%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">7.1 Service介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#userspace-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">userspace 模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#iptables-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">iptables 模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ipvs-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">ipvs 模式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-2-Service%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">7.2 Service类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-3-Service%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">7.3 Service使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-1-%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">7.3.1 实验环境准备</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-2-ClusterIP%E7%B1%BB%E5%9E%8B%E7%9A%84Service\"><span class=\"toc-text\">7.3.2 ClusterIP类型的Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-3-HeadLiness%E7%B1%BB%E5%9E%8B%E7%9A%84Service\"><span class=\"toc-text\">7.3.3 HeadLiness类型的Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-4-NodePort%E7%B1%BB%E5%9E%8B%E7%9A%84Service\"><span class=\"toc-text\">7.3.4 NodePort类型的Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-5-LoadBalancer%E7%B1%BB%E5%9E%8B%E7%9A%84Service\"><span class=\"toc-text\">7.3.5 LoadBalancer类型的Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-6-ExternalName%E7%B1%BB%E5%9E%8B%E7%9A%84Service\"><span class=\"toc-text\">7.3.6 ExternalName类型的Service</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-4-Ingress%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">7.4 Ingress介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-5-Ingress%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">7.5 Ingress使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-5-1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">7.5.1 环境准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%90%AD%E5%BB%BAingress%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">搭建ingress环境</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87service%E5%92%8Cpod\"><span class=\"toc-text\">准备service和pod</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-5-2-Http%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">7.5.2 Http代理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-5-3-Https%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">7.5.3 Https代理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">创建证书</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">8. 数据存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-1-%E5%9F%BA%E6%9C%AC%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">8.1 基本存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-1-EmptyDir\"><span class=\"toc-text\">8.1.1 EmptyDir</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-2-HostPath\"><span class=\"toc-text\">8.1.2 HostPath</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-3-NFS\"><span class=\"toc-text\">8.1.3 NFS</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-2-%E9%AB%98%E7%BA%A7%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">8.2 高级存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-1-PV\"><span class=\"toc-text\">8.2.1 PV</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-2-PVC\"><span class=\"toc-text\">8.2.2 PVC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-3-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">8.2.3 生命周期</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-3-%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">8.3 配置存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-1-ConfigMap\"><span class=\"toc-text\">8.3.1 ConfigMap</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-2-Secret\"><span class=\"toc-text\">8.3.2 Secret</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81\"><span class=\"toc-text\">9. 安全认证</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-1-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">9.1 访问控制概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-2-%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">9.2 认证管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-3-%E6%8E%88%E6%9D%83%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">9.3 授权管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-4-%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">9.4 准入控制</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-DashBoard\"><span class=\"toc-text\">10. DashBoard</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1-%E9%83%A8%E7%BD%B2Dashboard\"><span class=\"toc-text\">10.1 部署Dashboard</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-2-%E4%BD%BF%E7%94%A8DashBoard\"><span class=\"toc-text\">10.2 使用DashBoard</span></a></li></ol></li></ol>","author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"},"baidu":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/JuneQ"}}}},"mapped":true,"prev_post":{"title":"Redis原理","uid":"0f9864dd4863efa9b41c7bba5ace71e0","slug":"Redis原理","date":"2022-07-30T08:22:44.000Z","updated":"2022-09-30T09:54:59.732Z","comments":true,"path":"api/articles/Redis原理.json","keywords":null,"cover":[],"text":"Redis原理篇1、原理篇-Redis数据结构1.1 动态字符串我们都知道Redis中保存的Key是字符串，value往往是字符串或者字符串的集合。可见字符串是Redis中最常用的一种数据结构。 不过Redis没有直接使用C语言中的字符串，因为C语言字符串存在很多问题：获取字符串...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"Redis","slug":"Redis","count":2,"path":"api/tags/Redis.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"},"baidu":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/JuneQ"}}}},"feature":true},"next_post":{"title":"Mycat2入门","uid":"6b7e4a534de9f7da91f5ad92c6f8b78c","slug":"Mycat2入门","date":"2022-09-30T09:39:20.000Z","updated":"2022-09-30T09:48:35.054Z","comments":true,"path":"api/articles/Mycat2入门.json","keywords":null,"cover":[],"text":"1. 概述1.1 MyCat能干什么？ 读写分离 数据分片 垂直拆分（分库）、水平拆分（分表）、垂直+水平拆分（分库分表） 多数据源整合 Mycat 的原理中最重要的一个动词是“拦截”，它拦截了用户发送过来的 SQL 语 句，首先对 SQL 语句做了一些特定的分析：如分片分析、路...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":1,"path":"api/tags/中间件.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"},"baidu":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/JuneQ"}}}}}}