{"title":"Java 集合","uid":"34c2acd56bc16b503002a852a65f4137","slug":"Java集合详解","date":"2022-09-22T01:13:17.000Z","updated":"2022-09-22T01:15:40.085Z","comments":true,"path":"api/articles/Java集合详解.json","keywords":null,"cover":[],"content":"<h1 id=\"Java-集合\"><a href=\"#Java-集合\" class=\"headerlink\" title=\"Java 集合\"></a>Java 集合</h1><h2 id=\"Collection-接口-（父接口）\"><a href=\"#Collection-接口-（父接口）\" class=\"headerlink\" title=\"Collection 接口 （父接口）\"></a>Collection 接口 （父接口）</h2><img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220328104908708.png\" alt=\"image-20220328104908708\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"Iterator-迭代器\"><a href=\"#Iterator-迭代器\" class=\"headerlink\" title=\"Iterator 迭代器\"></a>Iterator 迭代器</h4><p>所有实现了<code>Iteratable</code>接口的类都可以通过<code>iterator()</code>方法获取迭代器</p>\n<p>注意：重新获取<code>iterator</code>即可重置迭代器；</p>\n<h4 id=\"增强-for-循环\"><a href=\"#增强-for-循环\" class=\"headerlink\" title=\"增强 for 循环\"></a>增强 for 循环</h4><ol>\n<li>可以对 数组 和 集合 使用；</li>\n<li>底层使用的仍然是 <code>iterator</code>；</li>\n<li>大写 I 可以快速生成代码（Idea）。</li>\n</ol>\n<h2 id=\"List-接口-可重复-有顺序\"><a href=\"#List-接口-可重复-有顺序\" class=\"headerlink\" title=\"List 接口  可重复-有顺序\"></a>List 接口  可重复-有顺序</h2><h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h4><ol>\n<li><p>线程不安全</p>\n</li>\n<li><p>ArrayList 维护了一个 Object 类型的数组 elementData – <code>transient Object[] elementData</code> &#x2F;&#x2F; transient 表示该属性不会被序列化</p>\n</li>\n<li><p>两种构造方式（构造时数组已经初始化）：</p>\n<ol>\n<li>无参构造： <code>ArrayList</code>，则初始化 <code>elementData</code> 容量为<code>0</code>，<strong>第一次添加时</strong>，则扩容至默认容量<code>10</code>，如需再次扩容，则扩容为当前的<code>1.5</code>倍（1+1&#x2F;2）;Vector（无参情况下） 扩容倍数是2，线程安全是因为每个方法头上添加了 synchronized</li>\n<li>指定<code>initialCapacity</code>大小的构造器：初始 <code>elementData</code> 容量为指定大小，如需扩容，则直接扩容 <code>elementData</code> 为当前的<code>1.5倍</code></li>\n</ol>\n</li>\n<li><p><strong>每次添加元素时，都会触发一次扩容检查，容量不满足 size+1 就扩容</strong></p>\n</li>\n<li><p>源码解读如下</p>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220328102410246.png\" alt=\"image-20220328102410246\" style=\"zoom:50%;\" /></li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220328102321216.png\" alt=\"image-20220328102321216\" style=\"zoom:50%;\" />\n\n<h4 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h4><ol>\n<li>线程安全</li>\n<li>如果无参，默认10，满后，<code>2倍</code>扩容；如果指定大小，满后则每次直接<code>2倍</code>扩容（优先使用自定义增量capacityIncrement）</li>\n<li>有参构造可以指定扩容大小 <code>Vector(int initialCapacity, int capacityIncrement)</code></li>\n<li>源码解读如下</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ensureCapacityHelper</span><span class=\"token punctuation\">(</span>elementCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 扩容检查</span>\n    elementData<span class=\"token punctuation\">[</span>elementCount<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacityHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// overflow-conscious code</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minCapacity <span class=\"token operator\">-</span> elementData<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 真正扩容方法</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// overflow-conscious code</span>\n    <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//扩容的关键算法</span>\n    <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>capacityIncrement <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n                                     capacityIncrement <span class=\"token operator\">:</span> oldCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> minCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 扩容后仍不满足最小capacity要求</span>\n        newCapacity <span class=\"token operator\">=</span> minCapacity<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 超过最大容量</span>\n        newCapacity <span class=\"token operator\">=</span> <span class=\"token function\">hugeCapacity</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elementData <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h4><p><img src=\"https://img-blog.csdn.net/20180901151616363?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ0OTI2NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"结构\"></p>\n<ol>\n<li>底层维护了一个<code>双向链表</code></li>\n<li>可以添加任意元素</li>\n<li>其中有两个属性<code>first</code>和<code>last</code>分别指向首节点和尾结点</li>\n<li>每个节点（Node对象），里面又维护了<code>prev</code>，<code>next</code>，<code>item</code>三个属性，其中通过<code>prev</code>指向前一个，通过<code>next</code>指向后一个节点，最终实现双向链表</li>\n<li>LinkedList 增删快，查找慢</li>\n<li>源码解读如下（尾插头删）</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">linkLast</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">linkLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 旧尾结点</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建新节点</span>\n        last <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 新节点上位尾结点</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            first <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个节点 first->a  last->a</span>\n        <span class=\"token keyword\">else</span>\n            l<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 新节点是从尾部连接的！新节点赋值->旧尾结点.next </span>\n        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//注意是第一个</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> f <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">unlinkFirst</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">E</span> <span class=\"token function\">unlinkFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// assert f == first &amp;&amp; f != null;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">E</span> element <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> next <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span>\n        first <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            last <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 只有一个节点</span>\n        <span class=\"token keyword\">else</span>\n            next<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 返回删除的元素</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"集合选择\"><a href=\"#集合选择\" class=\"headerlink\" title=\"集合选择\"></a>集合选择</h4><ol>\n<li><code>ArrayList</code> 查询快，增删慢</li>\n<li><code>LinkedList</code>查询慢，增删快</li>\n<li>一般来说，程序中 <code>80~90</code>的业务都是查询，因此大部分情况下选择<code>ArrayList</code></li>\n<li>也可以根据业务需要灵活选择</li>\n</ol>\n<h2 id=\"Set-接口\"><a href=\"#Set-接口\" class=\"headerlink\" title=\"Set 接口\"></a>Set 接口</h2><ol>\n<li>TreeSet有序，HashSet无序</li>\n<li>不允许重复，最多包含一个<code>null</code></li>\n</ol>\n<h4 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如何决定元素是相同的？</p></blockquote>\n<ol>\n<li>hashCode() 决定节点添加到数组下标的位置；<ul>\n<li>真正地逻辑是：**<code>(table.length -1) &amp; hash(hashCode())</code>**</li>\n</ul>\n</li>\n<li>当 hashCode() 方法算出的元素落到了某个链表上，从头到尾依次比较，有相同元素，添加失败，无相同元素，添加到链表尾部；</li>\n<li>可以存放<code>null</code>，但只能有一个（null的哈希值为0）</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220328153236632.png\" alt=\"image-20220328153236632\" style=\"zoom: 33%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>源码分析</p></blockquote>\n<ol>\n<li>底层实际上是<code>HashMap</code></li>\n<li>底层调用的是Hashmap的API，value是占位符PRESENT – <code>new Object()</code></li>\n<li>元素顺序取决于hash函数的结果，是一个<strong>固定</strong>的顺序</li>\n<li>无参构造器：default-capacity(16)  loadFactor(0.75) </li>\n<li><strong>单链表长度达到9个（在添加第9个元素后立刻检查，这是由于binCount是之前的容量！）时才进入 <code>treeifbin()</code>方法</strong></li>\n<li><code>tab == null || (n = tab.length) &lt; 64</code><ul>\n<li>64指的是HashSet中所有的元素（包括链表上的）</li>\n</ul>\n</li>\n<li>resize 扩容发生在以下三个时机：<ul>\n<li>初始化一个HashSet，第一次添加元素时，table为null，此时<strong>扩容</strong>为长度为16的数组(无参构造，有参则初始化为指定的大小向上取2^n值)</li>\n<li>当前HashMap.size&gt;threshold时，成功添加第(threshold+1)个元素时，触发扩容方法</li>\n<li><strong>链表的节点数大于8</strong>，若<strong>table.length</strong>&lt;64，触发扩容方法；若table.length&gt;&#x3D;64，触发树化</li>\n</ul>\n</li>\n<li>不错的帖子<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/396019103\">从泊松分布谈起HashMap为什么默认扩容因子是0.75 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://blog.csdn.net/qq_41603102/article/details/125077385\">2022面试题：HashMap相关问题硬核梳理_小牛呼噜噜的博客-CSDN博客</a></li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 调用链 add->put->putVal(hash->hashCode)</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">//PRESENT相当于一个占位符，Object[]</span>\n        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">// 由此可见，真正的哈希值是hashCode方法进一步包装的值</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token comment\">/**------------------------核心算法------------------------**/</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n    \t  <span class=\"token comment\">// 初始化 table 数组</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    \t  <span class=\"token comment\">// tab[i]初始化</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          \t<span class=\"token comment\">// tab[i]已经有节点了</span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// p 是 table[i] 的第一个元素（可能是Node或TreeNode，TreeNode是HashMap的静态内部类，已树化的节点）</span>\n            <span class=\"token comment\">// 以下代码判断是否是同一个对象</span>\n            <span class=\"token comment\">// CASE1:Node 第一个节点的hash、equals||地址 与加入节点相同</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// CASE2:p 是一颗红黑树</span>\n                e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// CASE3:Node 有多个节点，第一个节点不能匹配，遍历链表</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 注意此处 p.next 赋给 e</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 本次添加过后链表元素达到了9个才进行扩容，因为binCount是之前的容量</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n                            <span class=\"token comment\">//是否要进行红黑树化判断，以下是条件，不满足执行 resize() 方法</span>\n                            <span class=\"token comment\">// treeifyBin方法中还有判断：tab == null || (n = tab.length) &lt; 64  </span>\n                            <span class=\"token comment\">// 满足才能真正树化</span>\n                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token comment\">// e = p.next</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// p 向下指一个节点</span>\n                    p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token comment\">// value 替换细节</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//此处把k-v的v替换，value是传参进来的v</span>\n                <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加后检查，第十三个元素添加后进入if执行扩容</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t  <span class=\"token comment\">// 为 HashMap 子类准备的方法（如LinkedList），在本类中为空实现</span>\n        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**-------------------数组扩容---------------------**/</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldCap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> oldTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldThr <span class=\"token operator\">=</span> threshold<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> newCap<span class=\"token punctuation\">,</span> newThr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            threshold <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> oldTab<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 没超过最大值，就扩充为原来的2倍</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">=</span> oldCap <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span>\n                 oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span>\n            newThr <span class=\"token operator\">=</span> oldThr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// double threshold</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldThr <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// initial capacity was placed in threshold</span>\n        newCap <span class=\"token operator\">=</span> oldThr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>               <span class=\"token comment\">// zero initial threshold signifies using defaults</span>\n        newCap <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">;</span>\n        newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">*</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 计算新的resize上限</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newThr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">float</span> ft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>newCap <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">;</span>\n        newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span> ft <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">?</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ft <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    threshold <span class=\"token operator\">=</span> newThr<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"rawtypes\"</span>，<span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    table <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 把每个bucket都移动到新的buckets中</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> oldCap<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    newTab<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newTab<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> oldCap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 链表优化重hash的代码块</span>\n                    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> loHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> loTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原索引存放的引用</span>\n                    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> hiHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> hiTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原索引+oldCap存放的引用</span>\n                    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n                        next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                       <span class=\"token comment\">/*\n                       \t取余(%)操作中如果除数是2的幂次则等价于与其除数减一的与(&amp;)操作\n                     \t （也就是说 hash%length==hash&amp;(length-1)的前提是 length 是2的 n 次方；）。\n                      */</span>\n                        <span class=\"token comment\">// 原索引</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> oldCap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                loHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">else</span>\n                                loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尾插</span>\n                            loTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尾插</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 原索引+oldCap</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                hiHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">else</span>\n                                hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                            hiTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 原索引放到bucket里</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                        newTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loHead<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token comment\">// 原索引+oldCap放到bucket里</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                        newTab<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> oldCap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hiHead<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> newTab<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://img-blog.csdnimg.cn/img_convert/5d543e3e7e2f55110e5d59c17ce958f8.png\"  />\n\n\n\n<h4 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>继承<code>HashSet</code>，实现<code>Set</code></p></blockquote>\n<ol>\n<li>HashMap维护对象是 Node ，LinkedHashSet维护对象是 Entry extends HashMap.Node</li>\n<li>底层维护了一个<code>哈希表</code>和<code>双向链表</code></li>\n<li>每一个节点有<code>pre</code>和<code>next</code>属性，这样可以形成<code>双向链表</code></li>\n<li>在添加一个元素时，先求<code>hash值</code>，再求索引，确定该元素在<code>hashtable</code>中的位置，然后将添加的元素加入到双向链表中（如果已经存在，则不添加，原则上通<code>hashset</code>一致）</li>\n<li>这样<code>LinkedHashSet</code>能确保插入顺序和遍历顺序一致</li>\n<li>源码解读</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*LinkedHashSet内部类 Entry ，将来会取代Node成为LinkedHashSet的table的节点元素*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220328223415390.png\" alt=\"image-20220328223415390\" style=\"zoom:50%;\" />\n\n\n\n\n\n<h4 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h4><ol>\n<li>使用无参构造器时，元素仍是无序的</li>\n<li>TreeMap 的实现就是红黑树数据结构，也就说是一棵自平衡的排序二叉树</li>\n<li>源码解析如下</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">// 第一次添加元素，注意节点对象是 Entry</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此处的compare是为了检查 key 是否为空值</span>\n            \n            root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> cmp<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// split comparator and comparable paths</span>\n        <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> cpr <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cpr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 遍历所有的 key，给key找适当的位置</span>\n                parent <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                cmp <span class=\"token operator\">=</span> cpr<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//绑定到定义的 compare 方法</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token comment\">// 发现相等的 key ，用 value 的值覆盖这个 key 的 value，且方法退出</span>\n                    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> k <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n                parent <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                cmp <span class=\"token operator\">=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fixAfterInsertion</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"Map-接口\"><a href=\"#Map-接口\" class=\"headerlink\" title=\"Map 接口\"></a>Map 接口</h2><ol>\n<li>TreeMap有序，HashMap无序</li>\n<li>key 不允许重复(null也不能重复），value可以重复</li>\n<li>k-v 最后是 HashMap$Node node &#x3D; newNode(hash , key , value , null)</li>\n<li>k-v 是为了方便程序员进行遍历设计的，会创建 EntrySet 集合，该集合存放的元素类型 Entry ，而一个 Entry 对象就有 k-v EntrySet&lt;Entry&lt;K,V&gt;&gt; 即： transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</li>\n<li>entrySet 中，定义的类型是 Map.Entry , 但实际上存放的是 HashMap$Node , 这是因为 HashMap$Node implements Map.Entry static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;</li>\n<li>当把 HashMap$Node 对象存放到 entrySet 就方便我们的遍历，因为 Map.Entry 提供了重要方法 K getKey() – V getValue()</li>\n</ol>\n<h4 id=\"Map-遍历\"><a href=\"#Map-遍历\" class=\"headerlink\" title=\"Map 遍历\"></a>Map 遍历</h4><ol>\n<li>增强 FOR</li>\n<li>迭代器 Iterator</li>\n<li><code>values()</code> 方法 ，此方法返回集合 Collection ，可以使用以上两种遍历方式</li>\n<li><code>entrySet()</code> 方法 ， 此方法返回 Set –&gt; EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;  ， 可以使用 1 ，2 两种方式遍历</li>\n</ol>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h4><p><img src=\"/assets/image-20220725115123500.png\" alt=\"image-20220725115123500\"></p>\n<img src=\"assets/image-20220725123132655.png\" alt=\"image-20220725123132655\" style=\"zoom:67%;\" />\n\n<p><img src=\"/assets/image-20220725125618263.png\" alt=\"image-20220725125618263\"></p>\n<ol>\n<li>当添加 key-val 时，通过 key 的哈希值得到在table的索引，然后判断该索引处是否有元素，如果没有元素则直接添加，如果有元素则继续判断该元素的 key 和准备加入的 key 是否相等，如果相等，则直接替换 val；如果不相等则需要判断是树结构还是链表结构，做出相应处理，如果添加时发现容量不够，则需要扩容。</li>\n<li>执行构造 <code>new HashMap()</code> ，初始化加载因子 loadfactor &#x3D; 0.75 &amp; hashMap$Node[] table &#x3D; null</li>\n<li>执行 put 调用 <code>putVal()</code> ，详细细节见 HashSet</li>\n</ol>\n<img src=\"http://markdown-pic-june.oss-cn-beijing.aliyuncs.com/uPic/image-20220329103439431.png\" alt=\"image-20220329103439431\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"Hashtable\"><a href=\"#Hashtable\" class=\"headerlink\" title=\"Hashtable\"></a>Hashtable</h4><ol>\n<li>实现了 <code>Map</code> 集合，即存放 k-v 键值对，key不能重复</li>\n<li>Hashtable 的键和值<strong>都不能</strong>为 null ，否则抛出 NullPointerException</li>\n<li>Hashtable 使用方法基本上和 HashMap 一致</li>\n<li>Hashtable 线程安全</li>\n<li>默认值 initialCapacity-11 loadFactor-0.75，扩容方式 2*old+1</li>\n<li>源码解析如下</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token comment\">// 无参构造 默认大小是 11 ，loadFactor仍然是 0.75，所以threshold是 11*0.75=8</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Hashtable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Make sure the value is not null</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// Makes sure the key is not already in the hashtable.</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> tab<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> entry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> entry <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> entry<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">V</span> old <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                entry<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> tab<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Rehash the table if the threshold is exceeded</span>\n            <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n            hash <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// Creates the new entry.</span>\n        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldMap <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//扩容机制如下 2*oldCapacity+1</span>\n        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldCapacity <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCapacity <span class=\"token operator\">==</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// Keep running with MAX_ARRAY_SIZE buckets</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            newCapacity <span class=\"token operator\">=</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    \t<span class=\"token comment\">//数组扩容</span>\n        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span>newCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        threshold <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">,</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        table <span class=\"token operator\">=</span> newMap<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> oldCapacity <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> old <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>oldMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> old <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> old<span class=\"token punctuation\">;</span>\n                old <span class=\"token operator\">=</span> old<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> newCapacity<span class=\"token punctuation\">;</span>\n                e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>newMap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                newMap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h5><ol>\n<li>继承自 <code>Hashtable</code>，仍然以 k-v 键值对保存数据</li>\n<li>使用方式与 Hashtable 类似</li>\n<li><code>Properties</code>可以从 <code>xxx.properties</code>文件中，加载数据到其创建的对象中，并对其修改</li>\n</ol>\n<h4 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h4><p>这个类不依赖<code>hashCode</code>和<code>equals</code></p>\n<ol>\n<li><p>使用比较器构造器</p>\n<ul>\n<li>&#96;&#96;&#96;java<br>public TreeSet(Comparator&lt;? super E&gt; comparator) {<br>    this(new TreeMap&lt;&gt;(comparator));<br>}<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n2. 第一次添加，把k-v封装到 Entry 对象，放入 root\n\n   - &#96;&#96;&#96;java\n     Entry&lt;K,V&gt; t &#x3D; root;\n     if (t &#x3D;&#x3D; null) &#123;\n         compare(key, key); &#x2F;&#x2F; type (and possibly null) check\n     \n         root &#x3D; new Entry&lt;&gt;(key, value, null);\n         size &#x3D; 1;\n         modCount++;\n         return null;\n     &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>以后添加</p>\n<ul>\n<li>&#96;&#96;&#96;java<br>int cmp;<br>Entry&lt;K,V&gt; parent;<br>&#x2F;&#x2F; split comparator and comparable paths<br>Comparator&lt;? super K&gt; cpr &#x3D; comparator;<br>if (cpr !&#x3D; null) {<br>do {  &#x2F;&#x2F; 遍历所有key，给key找适当的位置<br>    parent &#x3D; t;<br>    cmp &#x3D; cpr.compare(key, t.key); &#x2F;&#x2F;调用的是传入的比较器<br>    if (cmp &lt; 0)<br>        t &#x3D; t.left;<br>    else if (cmp &gt; 0)<br>        t &#x3D; t.right;<br>    else<br>          &#x2F;&#x2F; 发现已经有重复的key，覆盖value并返回<br>        return t.setValue(value);<br>} while (t !&#x3D; null);<br>}<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n\n\n## 集合选择\n\n1. 先判断存储的类型（一组对象或一组键值对）\n2. 一组对象：Collection接口实现类\n   1. 允许重复：List\n      - 增删多：LinkedList（底层维护了一个双向链表）\n      - 改查多：ArrayList（底层维护Object类型可变数组）\n   2. 不允许重复：Set\n      - 无序：HashSet（底层是HashMap，维护了一个哈希表，即数组+链表+红黑树）\n      - 排序：TreeSet\n      - 插入和取出顺序一致：LinkedHashSet（底层维护了数组+双向链表）\n3. 一组键值对：Map\n   - 键无序：HashMap（底层是哈希表）\n   - 键排序：TreeMap\n   - 键插入和取出顺序一致：LinkedHashMap\n   - 文件操作：Properties\n\n\n\n## Collections 工具类\n\n1. 排序相关\n   - reverse()   &#x2F;&#x2F; 反转\n   - shuffle()     &#x2F;&#x2F; 乱序\n   - sort()        &#x2F;&#x2F; 排序 ，可以定义比较器\n   - swap()     &#x2F;&#x2F; 交换\n2. 查找、替换\n   - max()   &#x2F;&#x2F; 可以定义比较器\n   - **frequency()**   &#x2F;&#x2F; 某元素出现频率\n   - copy()     &#x2F;&#x2F; 注意数组越界问题！\n   - replaceAll()  &#x2F;&#x2F; 集合中某元素替换\n\n\n\n&#96;&#96;&#96;java\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n","feature":true,"text":"Java 集合Collection 接口 （父接口） Iterator 迭代器所有实现了Iteratable接口的类都可以通过iterator()方法获取迭代器 注意：重新获取iterator即可重置迭代器； 增强 for 循环 可以对 数组 和 集合 使用； 底层使用的仍然是 ...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"18 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"},{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java-%E9%9B%86%E5%90%88\"><span class=\"toc-text\">Java 集合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Collection-%E6%8E%A5%E5%8F%A3-%EF%BC%88%E7%88%B6%E6%8E%A5%E5%8F%A3%EF%BC%89\"><span class=\"toc-text\">Collection 接口 （父接口）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Iterator-%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">Iterator 迭代器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%BC%BA-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">增强 for 循环</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#List-%E6%8E%A5%E5%8F%A3-%E5%8F%AF%E9%87%8D%E5%A4%8D-%E6%9C%89%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">List 接口  可重复-有顺序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ArrayList\"><span class=\"toc-text\">ArrayList</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Vector\"><span class=\"toc-text\">Vector</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LinkedList\"><span class=\"toc-text\">LinkedList</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">集合选择</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Set-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Set 接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HashSet\"><span class=\"toc-text\">HashSet</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LinkedHashSet\"><span class=\"toc-text\">LinkedHashSet</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TreeSet\"><span class=\"toc-text\">TreeSet</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Map-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Map 接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Map-%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">Map 遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HashMap\"><span class=\"toc-text\">HashMap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Hashtable\"><span class=\"toc-text\">Hashtable</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Properties\"><span class=\"toc-text\">Properties</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TreeMap\"><span class=\"toc-text\">TreeMap</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}},"mapped":true,"prev_post":{"title":"test","uid":"bc567916c4dc0d8169bd26d18e348d36","slug":"test","date":"2022-09-22T01:13:17.000Z","updated":"2022-09-22T01:14:11.494Z","comments":true,"path":"api/articles/test.json","keywords":null,"cover":null,"text":"nihao ","link":"","photos":[],"count_time":{"symbolsCount":6,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}},"feature":true},"next_post":{}}