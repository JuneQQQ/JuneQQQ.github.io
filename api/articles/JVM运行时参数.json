{"title":"JVM运行时参数","uid":"1f9dc448d62e7f280399f2b271c23383","slug":"JVM运行时参数","date":"2022-09-30T09:38:36.000Z","updated":"2022-09-30T09:42:12.603Z","comments":true,"path":"api/articles/JVM运行时参数.json","keywords":null,"cover":[],"content":"<h1 id=\"JVM运行时参数\"><a href=\"#JVM运行时参数\" class=\"headerlink\" title=\"JVM运行时参数\"></a>JVM运行时参数</h1><h2 id=\"01-JVM-参数选项类型\"><a href=\"#01-JVM-参数选项类型\" class=\"headerlink\" title=\"01-JVM 参数选项类型\"></a>01-JVM 参数选项类型</h2><h3 id=\"类型一：标准参数选项\"><a href=\"#类型一：标准参数选项\" class=\"headerlink\" title=\"类型一：标准参数选项\"></a>类型一：标准参数选项</h3><ul>\n<li>特点<ul>\n<li>以 <code>-</code> 开头</li>\n<li>比较稳定，以后基本不会变化</li>\n<li>可以用 <code>java</code> 或 <code>java -help</code> 看到可选项</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型二：-X参数选项\"><a href=\"#类型二：-X参数选项\" class=\"headerlink\" title=\"类型二：-X参数选项\"></a>类型二：-X参数选项</h3><ul>\n<li>特点<ul>\n<li>非标准化参数</li>\n<li>功能比较稳定</li>\n<li>以 <code>-X</code> 开头</li>\n<li>JVM 的 JIT 编译模式的选项</li>\n<li>可以通过 <code>java -X</code> 查看可选项</li>\n</ul>\n</li>\n<li>特别的，以下三个等价，都是 -XX类型参数<ul>\n<li>-Xms<size> 设置初始堆大小<ul>\n<li>-XX:InitialHeapSize</li>\n</ul>\n</li>\n<li>-Xmx<size> 设置最大堆大小<ul>\n<li>-XX:MaxHeapSize</li>\n</ul>\n</li>\n<li>-Xss<size> 设置Java线程堆栈大小<ul>\n<li>-XX:ThreadStackSize</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型三：-XX参数选项\"><a href=\"#类型三：-XX参数选项\" class=\"headerlink\" title=\"类型三：-XX参数选项\"></a>类型三：-XX参数选项</h3><ul>\n<li>特点<ul>\n<li>非标准化参数</li>\n<li>使用最多的参数类型</li>\n<li>这类选项属于实验型，不稳定</li>\n<li>以 <code>-XX</code> 开头</li>\n<li>用于开发和调试JVM</li>\n</ul>\n</li>\n<li>分类<ul>\n<li>boolean<ul>\n<li>-XX:+<option></li>\n<li>-XX:-<option></li>\n</ul>\n</li>\n<li>非 boolean<ul>\n<li>数值型：-XX:<option>&#x3D;<number></li>\n<li>非数值型格式：-XX:<name>&#x3D;<string></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特别的，-XX:+PrintFlagsFinal：<ul>\n<li>输出所有有参数的名称和默认值</li>\n<li>默认不包括 Diagnostic 和 Expermental 的参数</li>\n<li>可以配合以下两个指令使用<ul>\n<li>-XX:+UnlockDiagnosticVMOptions</li>\n<li>-XX:UnlockExperimentalVMOptions</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"02-添加JVM参数选项\"><a href=\"#02-添加JVM参数选项\" class=\"headerlink\" title=\"02-添加JVM参数选项\"></a>02-添加JVM参数选项</h2><h3 id=\"直接运行-jar-包\"><a href=\"#直接运行-jar-包\" class=\"headerlink\" title=\"直接运行 jar 包\"></a>直接运行 jar 包</h3><p><code>java -Xms50m -Xmx50m -XX:+PrintGCDetails -jar xx.jar</code></p>\n<h3 id=\"通过-Tomcat\"><a href=\"#通过-Tomcat\" class=\"headerlink\" title=\"通过 Tomcat\"></a>通过 Tomcat</h3><ul>\n<li>Linux系统下可以在 <strong>tomcat&#x2F;bin&#x2F;catalina.sh</strong> 添加如下配置：<ul>\n<li><code>JAVA_OPTS=&quot;-Xms512M -Xmx1024M&quot;</code></li>\n</ul>\n</li>\n<li>Windows系统下在 catalina.bat 中添加如下配置<ul>\n<li><code>set &quot;JAVA_OPTS=-Xms512M -Xmx1024M&quot;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"程序运行过程中\"><a href=\"#程序运行过程中\" class=\"headerlink\" title=\"程序运行过程中\"></a>程序运行过程中</h3><ul>\n<li>使用 jinfo -flag <name>&#x3D;<value> <pid>    </li>\n<li>使用 jinfo -flag [ +|- ]<name> <pid></li>\n</ul>\n<h2 id=\"03-常用的JVM参数选项\"><a href=\"#03-常用的JVM参数选项\" class=\"headerlink\" title=\"03-常用的JVM参数选项\"></a>03-常用的JVM参数选项</h2><h3 id=\"打印设置的XX选项及值\"><a href=\"#打印设置的XX选项及值\" class=\"headerlink\" title=\"打印设置的XX选项及值\"></a>打印设置的XX选项及值</h3><ul>\n<li><code>-XX:+PrintCommandLineFlags</code><ul>\n<li>可以让程序运行前打印出用户手动设置或JVM自动设置的XX选项</li>\n</ul>\n</li>\n<li><code>-XX:+PrintFlagsInitial</code><ul>\n<li>表示打印出所有XX选项的默认值</li>\n</ul>\n</li>\n<li><code>-XX:+PrintFlagsFinal</code><ul>\n<li>表示打印出XX选项在程序运行时生效的值</li>\n</ul>\n</li>\n<li><code>-XX:+PrintVMOptions</code><ul>\n<li>打印JVM的参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"堆、栈、方法区等内存大小设置\"><a href=\"#堆、栈、方法区等内存大小设置\" class=\"headerlink\" title=\"堆、栈、方法区等内存大小设置\"></a>堆、栈、方法区等内存大小设置</h3><h4 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h4><ul>\n<li><code>-Xss128k</code><ul>\n<li>设置每个线程的栈大小为128k</li>\n<li>等价于<code>-XX:ThreadStackSize=128k</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"堆内存\"><a href=\"#堆内存\" class=\"headerlink\" title=\"堆内存\"></a>堆内存</h4><ul>\n<li><code>-Xms3550m</code><ul>\n<li>等价于<code>-XX:InitialHeapSize</code></li>\n<li>设置JVM初始堆内存为3550m</li>\n</ul>\n</li>\n<li><code>-Xmx3550m</code><ul>\n<li>等价于<code>-XX:MaxHeapSize</code></li>\n<li>设置JVM最大最内存为3550m</li>\n</ul>\n</li>\n<li><code>-Xmn2g</code><ul>\n<li><code>设置年轻代大小为2G</code></li>\n<li>官方推荐配置为整个堆大小的3&#x2F;8</li>\n</ul>\n</li>\n<li><code>-XX:NewSize=1024m</code><ul>\n<li>设置年轻代初始值为1024m</li>\n</ul>\n</li>\n<li><code>-XX:MaxNewSize=1024m</code><ul>\n<li>设置年轻代最大值为1024m</li>\n</ul>\n</li>\n<li><code>-XX:SurvivorRatio=8</code><ul>\n<li>设置年轻代中Eden与一个Survivor的比例，默认8</li>\n</ul>\n</li>\n<li><code>-XX:+UseAdaptiveSizePolicy</code><ul>\n<li>自动选择各区的大小比例</li>\n</ul>\n</li>\n<li><code>-XX:NewRatio=4</code><ul>\n<li>设置老年代与年轻代的比值</li>\n</ul>\n</li>\n<li><code>-XX:PretenureSizeThreadshold=1024</code><ul>\n<li>设置让大于此阈值的对象直接分配在老年代，单位字节</li>\n<li>只对Serial、ParNew收集器有效</li>\n</ul>\n</li>\n<li><code>-XX:MaxTenuringThrehold=15</code><ul>\n<li>新生代每次MinorGC之后，还存活的对象年龄+1，当对象的年龄大于此设定值时晋升老年代，默认15</li>\n</ul>\n</li>\n<li><code>-XX:StringTableSize=1009</code><ul>\n<li>设置StringTableSize 大小，当系统中字符串较多时，扩大此值可以提升性能</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"OutOfMemory-相关的选项\"><a href=\"#OutOfMemory-相关的选项\" class=\"headerlink\" title=\"OutOfMemory 相关的选项\"></a>OutOfMemory 相关的选项</h4><ul>\n<li><code>-XX:+HeapDumpOnOutOfMemoryError</code><ul>\n<li>表示在内存出现OOM的时候，把Heap转存（Dump）到文件便于后续分析</li>\n</ul>\n</li>\n<li><code>-XX:+HeapDumpBeforeFullGC</code><ul>\n<li>表示出现Full GC之前，生成Heap转储文件</li>\n</ul>\n</li>\n<li><code>-XX:+HeapDumpPath=&lt;path&gt;</code><ul>\n<li>指定heap转存文件的路径</li>\n</ul>\n</li>\n<li><code>-XX:OnOutOfMemoryError</code><ul>\n<li>指定一个可行性程序或者脚本的路径，当发生OOM的时候，执行该脚本</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211007-xia-wu75047.png\" alt=\"截屏2021-10-07下午7.50.47\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"垃圾回收器相关选项\"><a href=\"#垃圾回收器相关选项\" class=\"headerlink\" title=\"垃圾回收器相关选项\"></a>垃圾回收器相关选项</h4><img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211007-xia-wu80824.png\" alt=\"截屏2021-10-07下午8.08.24\" style=\"zoom:50%;\" />\n\n<h5 id=\"查看默认垃圾收集器\"><a href=\"#查看默认垃圾收集器\" class=\"headerlink\" title=\"查看默认垃圾收集器\"></a>查看默认垃圾收集器</h5><ul>\n<li><code>-XX:+PrintCommandLineFlags</code><ul>\n<li>查看命令行相关参数</li>\n</ul>\n</li>\n<li><code>jinfo  -flag  相关垃圾回收器参数  进程ID</code></li>\n</ul>\n<h5 id=\"Serial-回收器\"><a href=\"#Serial-回收器\" class=\"headerlink\" title=\"Serial 回收器\"></a>Serial 回收器</h5><p>Serial收集器作为HotSpot中Client模式下的默认新生代垃圾收集器。Serial Old是运行在Client模式下默认的老年代垃圾回收器。</p>\n<ul>\n<li><code>-XX:+UseSerialGC</code>：使用该GC</li>\n</ul>\n<h5 id=\"ParNew-回收器\"><a href=\"#ParNew-回收器\" class=\"headerlink\" title=\"ParNew 回收器\"></a>ParNew 回收器</h5><ul>\n<li><p><code>-XX:+UseParNewGC</code>：手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p>\n</li>\n<li><p><code>-XX:ParallelGCThreads=n</code>：限制线程数量，默认开启和CPU数据相同的线程数。</p>\n</li>\n</ul>\n<h5 id=\"Parallel-回收器\"><a href=\"#Parallel-回收器\" class=\"headerlink\" title=\"Parallel 回收器\"></a>Parallel 回收器</h5><ul>\n<li><code>-XX:+UseParallelGC</code>：手动指定年轻代使用Parallel并行收集器执行内存回收任务</li>\n<li><code>-XX:+UseParallelOldGC</code>：手动指定老年代都是使用并行回收收集器。<ul>\n<li>分别适用于老年代和新生代，JDK 8 默认开启</li>\n</ul>\n</li>\n<li><code>-XX:ParallelGCThreads</code>：设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。<ul>\n<li>默认情况下，当CPU数量小于8个，ParallelGCThreads的值等于CPU数量</li>\n<li>当CPU数量大于8个，ParallelGCThreads的值等于 3+[ 5*CPU_Count &#x2F;8 ]</li>\n</ul>\n</li>\n<li><code>-XX:MaxGCPauseMillis</code>：设置垃圾收集器最大停顿时间（STW），单位毫秒<ul>\n<li>为了尽可能的把停顿时间控制在MaxGCPauseMillis内，收集器在工作时会调整Java堆大小或者其他一些参数。</li>\n<li>对于用户来讲，停顿时间越短体验越好，但是在服务器端，我们注重高并发，整体的吞吐量，所以服务器端适合Parallel，进行控制</li>\n<li>该参数使用需谨慎</li>\n</ul>\n</li>\n<li><code>-XX:GCTimeRatio</code>：垃圾收集时间占总时间的比例。用于衡量吞吐量的大小<ul>\n<li>取值范围（0,100）。默认99，也就是垃圾回收时间不超过1%</li>\n<li>与前一个参数有一定的矛盾性，暂停时间越长，Ratio参数就越容易超过设定的比例。</li>\n</ul>\n</li>\n<li><code>-XX:+UseAdaptiveSizePolicy</code>：设置Parallel Scavenge收集器具有<strong>自适应调节策略</strong><ul>\n<li>这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间的平衡点。</li>\n<li>在手动调优比较苦难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMillis），让虚拟机自己完成调优工作。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"CMS-回收器\"><a href=\"#CMS-回收器\" class=\"headerlink\" title=\"CMS 回收器\"></a>CMS 回收器</h5><ul>\n<li><code>-XX:+UseConcMarkSweepGC</code>：手动指定使用CMS收集器执行内存回收任务。<ul>\n<li>开启该参数后会自动将<code>-XX:+UseParNewGC</code>打开</li>\n</ul>\n</li>\n<li><code>-XX:CMSlnitiatingOccupanyFraction</code>：设置堆内存使用的阈值，一旦达到该阈值，便开始进行回收。<ul>\n<li>JDK5及以前的版本默认68；JDK6及以上的版本默认92</li>\n<li>如果内存增长缓慢，则可以设置一稍大的值，大的阈值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Full GC的执行次数。</li>\n</ul>\n</li>\n<li><code>-XX:+UseCMSCompactAtFullCollection</code>：用于指定在执行完Full GC后对内存空间进行压缩整理，以避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变长了。</li>\n<li><code>-XX:CMSFullGCBeforeCompaction</code>：设置在执行多少次Full GC后对内存空间进行压缩整理</li>\n<li><code>-XX:ParallelCMSThreads</code>：设置CMS的线程数量<ul>\n<li>CMS默认启动的线程数是 （ParallelGCThreads+3）&#x2F; 4，ParallelGCThreads是年轻代并行收集器的线程数。当CPU资源比较紧张时，受CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕</li>\n</ul>\n</li>\n</ul>\n<p><strong>特别说明</strong></p>\n<ul>\n<li>JDK 9：CMS被标记 deprecated</li>\n<li>JDK 14：删除CMS垃圾收集器</li>\n</ul>\n<h5 id=\"G1-回收器\"><a href=\"#G1-回收器\" class=\"headerlink\" title=\"G1 回收器\"></a>G1 回收器</h5><ul>\n<li><code>-XX:MaxGCPauseMillis</code>：设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到），默认200ms</li>\n<li><code>-XX:ParallelGCThread</code>：设置STW时线程数的值，最多为8</li>\n<li><code>-XX:ConcGCThreads</code>：设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1&#x2F;4左右</li>\n<li><code>-XX:InitiatingHeapOccupancyPercent</code>：设置触发并发GC周期的Java堆占用率阈值。超过此值，触发GC，默认45</li>\n<li><code>-XX:G1NewSizePercent   -XX:G1MaxNewSizePercent</code>：新生代占用整个堆内存的最小百分比（默认5%）、最大百分比（默认60%）</li>\n<li><code>-XX:G1ReservePercent=10</code>：保留内存区域，防止 to space（Survivor中的to区）溢出</li>\n</ul>\n<img src=\"https://markdown-pic-june.oss-cn-beijing.aliyuncs.com/2022/09/30/jie-ping20211007-xia-wu90609.png\" alt=\"截屏2021-10-07下午9.06.09\" style=\"zoom:50%;\" />\n\n\n\n<h4 id=\"GC日志相关选项\"><a href=\"#GC日志相关选项\" class=\"headerlink\" title=\"GC日志相关选项\"></a>GC日志相关选项</h4><h5 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h5><ul>\n<li>-verbose:gc<ul>\n<li>输出gc日志信息，默认输出到标准输出。</li>\n</ul>\n</li>\n<li>-XX:+PrintGC<ul>\n<li>等同于-verbose:gc</li>\n<li>表示打开简化的GC日志</li>\n</ul>\n</li>\n<li>-XX:+PrintGCDetails<ul>\n<li>在发生垃圾回收时打印内存回收详细的日志，并在进程退出时输出当前内存各区域分配情况</li>\n</ul>\n</li>\n<li>-XX:+PrintGCTimeStamps<ul>\n<li>输出GC发生时的时间戳</li>\n</ul>\n</li>\n<li>-XX:+PrintGCDataStamps<ul>\n<li>输出GC发生时的时间戳（形如 2013-05-04T21:53:59.234+0800）</li>\n</ul>\n</li>\n<li>-XX:+PrintHeapAtGC<ul>\n<li>每一次GC前和GC后，都打印堆信息</li>\n</ul>\n</li>\n<li>-Xloggc:<file><ul>\n<li>把GC日志写入到一个文件中去，而不是打印到标准输出中</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"其他参数\"><a href=\"#其他参数\" class=\"headerlink\" title=\"其他参数\"></a>其他参数</h5><ul>\n<li>-XX:+DisableExplicitGC<ul>\n<li>禁止hotspot执行System.gc( )，默认禁用</li>\n</ul>\n</li>\n<li>-XX:ReservedCodeCacheSize&#x3D;<n>[g|m|k]</li>\n<li>-XX:InitialCodeCacheSize&#x3D;<n>[g|m|k]<ul>\n<li>指定代码缓存的大小</li>\n</ul>\n</li>\n<li>-XX:+UseCodeCacheFlushing<ul>\n<li>使用该参数让JVM放弃一些被编译的代码，避免代码缓存占满时JVM切换到interpreted-only情况</li>\n</ul>\n</li>\n<li>-XX:+DoEscapeAnalysis<ul>\n<li>开启逃逸分析</li>\n</ul>\n</li>\n<li>-XX:+UseBiasedLocking<ul>\n<li>开启偏向锁</li>\n</ul>\n</li>\n<li>-XX:+UseLargePages<ul>\n<li>开启使用大页面</li>\n</ul>\n</li>\n<li>-XX:+UseTLAB<ul>\n<li>使用TLAB，默认打开</li>\n</ul>\n</li>\n<li>-XX:+PrintTLAB<ul>\n<li>打印TLAB的使用情况</li>\n</ul>\n</li>\n<li>-XX:TLABSize<ul>\n<li>设置TLAB大小</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"04-通过Java代码获取JVM参数\"><a href=\"#04-通过Java代码获取JVM参数\" class=\"headerlink\" title=\"04-通过Java代码获取JVM参数\"></a>04-通过Java代码获取JVM参数</h2><p>Java提供了 java.lang.management 包用于监视和管理Java虚拟机和Java运行时中的其他组件，它允许本地和远程监控和管理运行的Java虚拟机。其中ManagementFactory这个类还是挺常用的。另外还有Runtime类也可以获取一些内存、CPU核数等相关的数据。</p>\n","text":"JVM运行时参数01-JVM 参数选项类型类型一：标准参数选项 特点 以 - 开头 比较稳定，以后基本不会变化 可以用 java 或 java -help 看到可选项 类型二：-X参数选项 特点 非标准化参数 功能比较稳定 以 -X 开头 JVM 的 JIT 编译模式的选项 可以...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"},{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">JVM运行时参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#01-JVM-%E5%8F%82%E6%95%B0%E9%80%89%E9%A1%B9%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">01-JVM 参数选项类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E4%B8%80%EF%BC%9A%E6%A0%87%E5%87%86%E5%8F%82%E6%95%B0%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">类型一：标准参数选项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E4%BA%8C%EF%BC%9A-X%E5%8F%82%E6%95%B0%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">类型二：-X参数选项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E4%B8%89%EF%BC%9A-XX%E5%8F%82%E6%95%B0%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">类型三：-XX参数选项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#02-%E6%B7%BB%E5%8A%A0JVM%E5%8F%82%E6%95%B0%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">02-添加JVM参数选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C-jar-%E5%8C%85\"><span class=\"toc-text\">直接运行 jar 包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-Tomcat\"><span class=\"toc-text\">通过 Tomcat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%AD\"><span class=\"toc-text\">程序运行过程中</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#03-%E5%B8%B8%E7%94%A8%E7%9A%84JVM%E5%8F%82%E6%95%B0%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">03-常用的JVM参数选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E8%AE%BE%E7%BD%AE%E7%9A%84XX%E9%80%89%E9%A1%B9%E5%8F%8A%E5%80%BC\"><span class=\"toc-text\">打印设置的XX选项及值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E6%96%B9%E6%B3%95%E5%8C%BA%E7%AD%89%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">堆、栈、方法区等内存大小设置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A0%86%E5%86%85%E5%AD%98\"><span class=\"toc-text\">堆内存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#OutOfMemory-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">OutOfMemory 相关的选项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E7%9B%B8%E5%85%B3%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">垃圾回收器相关选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E9%BB%98%E8%AE%A4%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8\"><span class=\"toc-text\">查看默认垃圾收集器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Serial-%E5%9B%9E%E6%94%B6%E5%99%A8\"><span class=\"toc-text\">Serial 回收器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ParNew-%E5%9B%9E%E6%94%B6%E5%99%A8\"><span class=\"toc-text\">ParNew 回收器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Parallel-%E5%9B%9E%E6%94%B6%E5%99%A8\"><span class=\"toc-text\">Parallel 回收器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#CMS-%E5%9B%9E%E6%94%B6%E5%99%A8\"><span class=\"toc-text\">CMS 回收器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#G1-%E5%9B%9E%E6%94%B6%E5%99%A8\"><span class=\"toc-text\">G1 回收器</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#GC%E6%97%A5%E5%BF%97%E7%9B%B8%E5%85%B3%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">GC日志相关选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">常用参数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">其他参数</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#04-%E9%80%9A%E8%BF%87Java%E4%BB%A3%E7%A0%81%E8%8E%B7%E5%8F%96JVM%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">04-通过Java代码获取JVM参数</span></a></li></ol></li></ol>","author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"}}}},"mapped":true,"prev_post":{"title":"JVM调优入门","uid":"d286e43e20ffc8862d83a0fa7399e8da","slug":"JVM调优入门","date":"2022-09-30T09:38:43.000Z","updated":"2022-09-30T09:49:53.506Z","comments":true,"path":"api/articles/JVM调优入门.json","keywords":null,"cover":[],"text":"性能监控与调优第一章-概述大厂面试题 背景说明生产环境的问题 生产环境发生内存溢出如何处理？ 生产环境应该给服务器分配多少内存合适？ 如何应对垃圾回收器的性能调优？ 生产环境CPU负载飙高如何处理？ 生产环境应该给分配多少线程合适？ 不加log，如何确定请求是否执行了某一代码？ ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"},{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"}}}}},"next_post":{"title":"Vue基础","uid":"d216cb7f62edb6d66c0218a494244405","slug":"Vue基础","date":"2022-09-30T09:34:43.000Z","updated":"2022-09-30T09:37:40.425Z","comments":true,"path":"api/articles/Vue基础.json","keywords":null,"cover":[],"text":"1. Vue基础1.1 Demo&lt;!-- 准备好一个容器 --&gt; &lt;div id&#x3D;&quot;demo&quot;&gt; &lt;h1&gt;&#123;&#123;name.toUpperCase()&#125;&#125;，&#123;&#123...","link":"","photos":[],"count_time":{"symbolsCount":"83k","symbolsTime":"1:16"},"categories":[],"tags":[{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"},{"name":"框架","slug":"框架","count":1,"path":"api/tags/框架.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{"bilibili":{"icon":"/svg/bilibili-line.svg","link":"https://space.bilibili.com/432154182"}}}}}}