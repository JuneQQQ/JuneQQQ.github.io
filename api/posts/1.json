{"total":17,"pageSize":12,"pageCount":2,"data":[{"title":"Kubernetes入门","uid":"e770f8dee4e3c6fbfdcee5dd8a2fe82a","slug":"Kubernetes入门","date":"2022-09-30T09:46:09.000Z","updated":"2022-09-30T09:57:12.891Z","comments":true,"path":"api/articles/Kubernetes入门.json","cover":[],"text":"1. Kubernetes介绍1.1 kubernetes组件一个kubernetes集群主要是由**控制节点(master)、工作节点(node)**构成，每个节点上都会安装不同的组件。 master：集群的控制平面，负责集群的决策 ( 管理 ) ApiServer : 资源操...","link":"","photos":[],"count_time":{"symbolsCount":"101k","symbolsTime":"1:32"},"categories":[],"tags":[{"name":"k8s","slug":"k8s","count":1,"path":"api/tags/k8s.json"},{"name":"devops","slug":"devops","count":1,"path":"api/tags/devops.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}},"feature":true},{"title":"JVM内存与垃圾回收","uid":"cfe9c60f951ff43b26c629865afffd67","slug":"JVM内存与垃圾回收","date":"2022-09-28T09:38:16.000Z","updated":"2022-09-30T10:16:33.897Z","comments":true,"path":"api/articles/JVM内存与垃圾回收.json","cover":[],"text":"内存与垃圾回收篇 类加载子系统 类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件表示。 ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定 加载的类信息存放于一块称为方法区的...","link":"","photos":[],"count_time":{"symbolsCount":"61k","symbolsTime":"56 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"},{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}},"feature":true},{"title":"Redis原理","uid":"0f9864dd4863efa9b41c7bba5ace71e0","slug":"Redis原理","date":"2022-07-30T08:22:44.000Z","updated":"2022-09-30T09:54:59.732Z","comments":true,"path":"api/articles/Redis原理.json","cover":[],"text":"Redis原理篇1、原理篇-Redis数据结构1.1 动态字符串我们都知道Redis中保存的Key是字符串，value往往是字符串或者字符串的集合。可见字符串是Redis中最常用的一种数据结构。 不过Redis没有直接使用C语言中的字符串，因为C语言字符串存在很多问题：获取字符串...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"Redis","slug":"Redis","count":2,"path":"api/tags/Redis.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}},"feature":true},{"title":"Java集合","uid":"fd2c15dc5d41ab5172de4dd08fd40ea9","slug":"Java集合","date":"2022-09-30T09:44:29.000Z","updated":"2022-09-30T09:44:56.284Z","comments":true,"path":"api/articles/Java集合.json","cover":[],"text":"Java 集合Collection 接口 （父接口） Iterator 迭代器所有实现了Iteratable接口的类都可以通过iterator()方法获取迭代器 注意：重新获取iterator即可重置迭代器； 增强 for 循环 可以对 数组 和 集合 使用； 底层使用的仍然是 ...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"18 mins."},"categories":[],"tags":[{"name":"Java集合","slug":"Java集合","count":1,"path":"api/tags/Java集合.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},{"title":"Mycat2入门","uid":"6b7e4a534de9f7da91f5ad92c6f8b78c","slug":"Mycat2入门","date":"2022-09-30T09:39:20.000Z","updated":"2022-09-30T09:48:35.054Z","comments":true,"path":"api/articles/Mycat2入门.json","cover":[],"text":"1. 概述1.1 MyCat能干什么？ 读写分离 数据分片 垂直拆分（分库）、水平拆分（分表）、垂直+水平拆分（分库分表） 多数据源整合 Mycat 的原理中最重要的一个动词是“拦截”，它拦截了用户发送过来的 SQL 语 句，首先对 SQL 语句做了一些特定的分析：如分片分析、路...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"中间件","slug":"中间件","count":1,"path":"api/tags/中间件.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},{"title":"Kafka入门","uid":"99aa4407a60ebb936774d228acd49096","slug":"Kafka入门","date":"2022-09-30T09:39:05.000Z","updated":"2022-09-30T09:42:53.809Z","comments":true,"path":"api/articles/Kafka入门.json","cover":[],"text":"1. 环境搭建 主机名 IP ubuntu1 192.168.150.100 ubuntu2 192.168.150.101 ubuntu3 192.168.150.102 注意，以下均为Kraft方式搭建，官方不建议生产环境这么做 截止2022.8.17 1.1 三节点原生集群...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"MQ","slug":"MQ","count":1,"path":"api/tags/MQ.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},{"title":"JUC并发编程","uid":"75cf46e9ea7d77c8be442b61749fec6f","slug":"JUC并发编程","date":"2022-09-30T09:38:55.000Z","updated":"2022-09-30T09:43:41.709Z","comments":true,"path":"api/articles/JUC并发编程.json","cover":[],"text":"JUC并发编程进程与线程进程 程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的 当一个程序被运行，从磁盘加载这个程序的代码至内存，这是就开启了一个进...","link":"","photos":[],"count_time":{"symbolsCount":"102k","symbolsTime":"1:32"},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"},{"name":"JUC","slug":"JUC","count":1,"path":"api/tags/JUC.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},{"title":"JVM调优入门","uid":"d286e43e20ffc8862d83a0fa7399e8da","slug":"JVM调优入门","date":"2022-09-30T09:38:43.000Z","updated":"2022-09-30T09:49:53.506Z","comments":true,"path":"api/articles/JVM调优入门.json","cover":[],"text":"性能监控与调优第一章-概述大厂面试题 背景说明生产环境的问题 生产环境发生内存溢出如何处理？ 生产环境应该给服务器分配多少内存合适？ 如何应对垃圾回收器的性能调优？ 生产环境CPU负载飙高如何处理？ 生产环境应该给分配多少线程合适？ 不加log，如何确定请求是否执行了某一代码？ ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"},{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},{"title":"JVM运行时参数","uid":"1f9dc448d62e7f280399f2b271c23383","slug":"JVM运行时参数","date":"2022-09-30T09:38:36.000Z","updated":"2022-09-30T09:42:12.603Z","comments":true,"path":"api/articles/JVM运行时参数.json","cover":[],"text":"JVM运行时参数01-JVM 参数选项类型类型一：标准参数选项 特点 以 - 开头 比较稳定，以后基本不会变化 可以用 java 或 java -help 看到可选项 类型二：-X参数选项 特点 非标准化参数 功能比较稳定 以 -X 开头 JVM 的 JIT 编译模式的选项 可以...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"},{"name":"学习笔记","slug":"学习笔记","count":8,"path":"api/tags/学习笔记.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},{"title":"Vue基础","uid":"d216cb7f62edb6d66c0218a494244405","slug":"Vue基础","date":"2022-09-30T09:34:43.000Z","updated":"2022-09-30T09:37:40.425Z","comments":true,"path":"api/articles/Vue基础.json","cover":[],"text":"1. Vue基础1.1 Demo&lt;!-- 准备好一个容器 --&gt; &lt;div id&#x3D;&quot;demo&quot;&gt; &lt;h1&gt;&#123;&#123;name.toUpperCase()&#125;&#125;，&#123;&#123...","link":"","photos":[],"count_time":{"symbolsCount":"83k","symbolsTime":"1:16"},"categories":[],"tags":[{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"},{"name":"框架","slug":"框架","count":1,"path":"api/tags/框架.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},{"title":"SpringMVC","uid":"cd53cdbf97b8f99c953dd3eda45eed25","slug":"SpringMVC","date":"2022-09-30T09:31:34.000Z","updated":"2022-09-30T09:32:50.707Z","comments":true,"path":"api/articles/SpringMVC.json","cover":[],"text":"SpringMVC概述基于Spring的一个框架，实际上就是Spring的一个模块，是专门做web开发的，理解是Servlet的一个升级。SpringMVC中有一个对象是Servlet：DispatherServlet，负责接受用户的所有请求，用户把请求给了DispatherSe...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[],"tags":[{"name":"Java框架","slug":"Java框架","count":2,"path":"api/tags/Java框架.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}},{"title":"SpringBoot2","uid":"b4181dd5d95268a72dc772ce74f718cd","slug":"SpringBoot2","date":"2022-09-30T09:31:29.000Z","updated":"2022-09-30T09:32:29.213Z","comments":true,"path":"api/articles/SpringBoot2.json","cover":[],"text":"入门案例几个注解@Cofiguration@Configuration(proxyBeanMethods=false) // Lite模式 @Configuration(proxyBeanMethods=true) // Full模式 严格保证Bean单实例，每次属性注入都要检查...","link":"","photos":[],"count_time":{"symbolsCount":"55k","symbolsTime":"50 mins."},"categories":[],"tags":[{"name":"Java框架","slug":"Java框架","count":2,"path":"api/tags/Java框架.json"}],"author":{"name":"JuneQQQ","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/JuneQQQ","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_46925850","juejin":"https://juejin.cn/user/3927934338357197","customs":{}}}}]}